<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于TCP三次握手</title>
    <url>/2018/05/04/TCP/</url>
    <content><![CDATA[<p style="text-align: center;">好久没有上传博客了[懒人脸]</p>

<h1 id="关于TCP三次握手"><a href="#关于TCP三次握手" class="headerlink" title="关于TCP三次握手"></a>关于TCP三次握手</h1><p>最近身边的同学很多去参加一些互联网公司的面试，从他们的面经了解到java web开发面试必问的一个问题就是TCP的三次握手，而且这也是作为后端开发者必须掌握的计算机网络基础知识，所以针对这部分整理一下以便反复复习查看。</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="http://s5.51cto.com/wyfs02/M00/80/1F/wKiom1c4WFWCS-2pAAAevg_elm0490.png" alt="image"></p>
<hr>
<p>注意：</p>
<ul>
<li>ACK位（图中部分，用ACK大写表示ACK位，ack小写表示确认号）：确认，当ACK = 1是确认号ack才有效，建立连接后，所有传送的报文段都必须把ACK置为1.</li>
</ul>
<ul>
<li>SYN位（图中部分）：同部位，在建立连接的时候使用，若SYN=1，ACK=0，则表示是一个连接请求报文，若接收方同意接收连接，则使用SYN = 1，ACK = 1。所以，从上面可以看出来SYN = 1表示这个报文是一个连接请求或连接接收报文。</li>
<li></li>
</ul>
<hr>
<ul>
<li>第一次握手：建立连接时，<strong>客户端发送syn包</strong>（<strong>seq=n</strong>）到服务器，并进入<strong>SYN_SENT</strong>状态，等待服务器确认；++SYN：同步序列编号（Synchronize Sequence Numbers）。++</li>
<li></li>
<li>第二次握手：<strong>服务器收到SYN包</strong>，必须确认客户的SYN（<strong>ack=n+1</strong>），同时<strong>自己也发送一个SYN包</strong>（<strong>seq=k</strong>），即<strong>SYN+ACK包</strong>，此时服务器进入<strong>SYN_RECV</strong>状态；</li>
<li></li>
<li>第三次握手：<strong>客户端收到服务器的SYN+ACK包</strong>，<strong>向服务器发送确认包ACK</strong>(<strong>ack=k+1</strong>），此包发送完毕，客户端和服务器进入<strong>ESTABLISHED</strong>（TCP连接成功）状态，完成三次握手。</li>
</ul>
<hr>
<p>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p>
<p>未连接队列</p>
<p>在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于SYN_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>关闭TCP连接：改进的三次握手(四次挥手)</p>
<p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</p>
<p>第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP<strong>向主机B发送一个带有FIN附加标记的报文段</strong>（++FIN表示英文finish++）。</p>
<p>第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是<strong>先向主机A发送一个确认序号ACK</strong>，同时通知自己相应的应用程序：对方要求关闭连接（<strong>先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段</strong>）。</p>
<p>第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，<strong>TCP向主机A送一个FIN报文段</strong>。</p>
<p>第四步，主机A收到这个FIN报文段后，<strong>向主机B发送一个ACK表示连接彻底释放</strong>。</p>
<hr>
<p>一个完整的TCP连接图示：<br><img src="https://pic4.zhimg.com/ab46c8eb523f3f7686bc72fa23c82cc7_r.jpg" alt="image"></p>
<h2 id="为什么要采用三次握手，两次不行吗？"><a href="#为什么要采用三次握手，两次不行吗？" class="headerlink" title="为什么要采用三次握手，两次不行吗？"></a>为什么要采用三次握手，两次不行吗？</h2><p><img src="https://img-blog.csdn.net/20160809153504099" alt="image"></p>
]]></content>
      <tags>
        <tag>TCP</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax学习</title>
    <url>/2017/07/08/ajax/</url>
    <content><![CDATA[<h1 id="Ajax全称-Asynchronous-Javascript-And-XML（异步JavaScript和XML）"><a href="#Ajax全称-Asynchronous-Javascript-And-XML（异步JavaScript和XML）" class="headerlink" title="Ajax全称 Asynchronous Javascript And XML（异步JavaScript和XML）"></a>Ajax全称 Asynchronous Javascript And XML（异步JavaScript和XML）</h1><h1 id="XMLHttpRequest对象-以下简称xhr"><a href="#XMLHttpRequest对象-以下简称xhr" class="headerlink" title="XMLHttpRequest对象(以下简称xhr)"></a>XMLHttpRequest对象(以下简称xhr)</h1><p>XMLHttpRequest对象(以下简称xhr)</p>
<ul>
<li>异步 通过对象XMLHttpRequest   -&gt; 后台与服务器之间异步交换数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> request;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line"></span><br><span class="line">       request=<span class="keyword">new</span> XMLHttpRequest();   <span class="comment">//IE7+,Firefox,Chrome,Opera，Safari</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">request=<span class="keyword">new</span> ActiveXObject（<span class="string">"Microsoft.XMLHTTP"</span>）;<span class="comment">//IE6,IE5</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一个完整的http请求过程"><a href="#一个完整的http请求过程" class="headerlink" title="一个完整的http请求过程:"></a>一个完整的http请求过程:</h2><ol>
<li>建立TCP连接</li>
<li>Web浏览器向Web服务器发送请求命令</li>
<li>Web浏览器发送请求头信息</li>
<li>Web服务器应答</li>
<li>Web服务器发送应答头信息</li>
<li>Web服务器向浏览器发送数据</li>
<li>Web服务器关闭TCP连接</li>
</ol>
<h2 id="http请求的4部分"><a href="#http请求的4部分" class="headerlink" title="http请求的4部分"></a>http请求的4部分</h2><ol>
<li>请求方法（post、get之类）</li>
<li>请求的url</li>
<li>请求头（环境信息、身份安全信息等）</li>
<li>请求体（提交的表单、数据等）</li>
</ol>
<h2 id="http响应的组成"><a href="#http响应的组成" class="headerlink" title="http响应的组成"></a>http响应的组成</h2><ol>
<li>一个由数字和文字组成的状态码 用于显示请求成功或失败</li>
<li>响应头（服务器相关信息，类型、日期、名称之类）</li>
<li>响应体</li>
</ol>
<h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><ul>
<li>1开头的：信息类表示手打搜web浏览器请求，正在进一步处理中</li>
<li>2开头的：成功，表示用户请求被正确接受，理解和处理，如 200</li>
<li>3开头的：重定向，表示请求没有成功，客户必须采取进一步的动作</li>
<li>4开头的：客户端错误，表示客户端提交的请求有错误404</li>
<li>5开头的：服务器错误，表示服务器不能完成对请求的处理500</li>
</ul>
<h1 id="xhr发送请求"><a href="#xhr发送请求" class="headerlink" title="xhr发送请求"></a>xhr发送请求</h1><h2 id="open方法"><a href="#open方法" class="headerlink" title="open方法"></a>open方法</h2><ol>
<li>参数：</li>
</ol>
<ul>
<li>method：发送请求方法，get方式还是post方式，不区分大小写，一般使用大写。</li>
<li>url：请求地址，可以使用相对地址，也就是相对文档的地址，也可以使用绝对地址。</li>
<li>async：请求同步/异步，一般使用异步请求，这个参数就是true，如要使用同步的话，就是false。默认的是true(异步)，所以，如果是异步请求的话，这个参数可以不写。</li>
</ul>
<h2 id="send方法"><a href="#send方法" class="headerlink" title="send方法"></a>send方法</h2><ol>
<li>send方法将请求发送到服务器上</li>
<li>参数：</li>
</ol>
<ul>
<li>string:<br>①使用get请求时，实际是没有主体的，所有的参数都拼在url中，所以send参数可以不填，或者填写null。<br>②post请求时，send请求一定要有参数。</li>
</ul>
<h2 id="setRequestHeader方法"><a href="#setRequestHeader方法" class="headerlink" title="setRequestHeader方法"></a>setRequestHeader方法</h2><ol>
<li>设置http的头信息，告诉web服务器要发送一个表单的话，设置Content-type为application/x-www-form-urlencoded。</li>
<li>Content-type有2种，一般用application/x-www-form-urlencoded，一般如果不发送文件，都采用这种方式。</li>
<li>request.setRequestHeader()要写在open()和send（）中间，否则会抛出异常。</li>
</ol>
<h1 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h1><h2 id="服务器响应成功时得到通知"><a href="#服务器响应成功时得到通知" class="headerlink" title="服务器响应成功时得到通知"></a>服务器响应成功时得到通知</h2><p>readyState属性</p>
<ul>
<li>0：请求还未初始化，open还没有调用</li>
<li>1：服务器连接已建立，open已经调用了</li>
<li>2：请求已接收，也就是接收到头信息了</li>
<li>3：请求处理中，也就是接收到响应主体了</li>
<li>4：请求已完成，且响应已就绪，也就是响应完成了</li>
</ul>
<h2 id="获取响应值："><a href="#获取响应值：" class="headerlink" title="获取响应值："></a>获取响应值：</h2><ul>
<li>responseText  获取字符串形式的响应数据</li>
<li>responseXML   获得XML形式的响应数据  （一般用JSON）</li>
<li>status和statusText   以数字和文本形式返回HTTP状态码</li>
<li>getAllResponseHeader()   获取所有的响应报头</li>
<li>getResponseHeader()   查询响应中的某个字段的值</li>
</ul>
<h1 id="总结-完整使用步骤"><a href="#总结-完整使用步骤" class="headerlink" title="总结 完整使用步骤"></a>总结 完整使用步骤</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步</span></span><br><span class="line">    <span class="keyword">var</span> request=<span class="keyword">new</span> XMLHttpRequest();   <span class="comment">//new一个XHR对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request.open(<span class="string">'GET'</span>,<span class="string">'get.php'</span>,<span class="literal">true</span>);  <span class="comment">//open一个方法</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request.send();   <span class="comment">//发送数据</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.readyState===<span class="number">4</span>&amp;&amp;request.status===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">//做一些事情 </span></span><br><span class="line">        <span class="comment">//对响应进行监听：判断响应结果</span></span><br><span class="line">        request.responseText&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><blockquote>
<p><a href="jsonlint.com">jsonlint.com 一个很好的校验json格式的网站</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式&amp;外观模式</title>
    <url>/2019/05/19/adapter-facade_pattern/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>什么是适配器?</p>
<p>可以理解成插头转换器</p>
<p>现实中的插头转换器可以把你的插头转换成另一种规格的插头,比如你的标准交流电插口在欧式插座中不能使用,但是只需要加一个转换器,就可以完美匹配.</p>
<p>OO适配器也是一样的作用:将一个接口转换成另一个接口.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>拿一开始的策略模式时使用的Duck例子</p>
<p>Duck接口:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>绿头鸭实例:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm flying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Turkey接口:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;<span class="comment">// 与Duck的quack叫声不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>WildTurkey实例:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Gobble gobble"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm flying a short distance"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们想用火鸡对象来冒充鸭子, 简单来说就是当做鸭子来用,这时候 因为各自的接口不同,我们不能直接使用.</p>
<p>这时候写一个适配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    Turkey turkey;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            turkey.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候我们就可以使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Duck TurkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(<span class="keyword">new</span> WildTurkey());</span><br></pre></td></tr></table></figure></p>
<p>写一个TestCase:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">DuckTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">    </span><br><span class="line">    WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">    Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The turkey says..."</span>)</span><br><span class="line">    turkey.gobble();</span><br><span class="line">    turkey.fly();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The Duck says..."</span>);</span><br><span class="line">    duck.quack();</span><br><span class="line">    duck.fly();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The TurkeyAdapter says..."</span>);</span><br><span class="line">    turkeyAdapter.quack();</span><br><span class="line">    turkeyAdapter.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="拓展实现"><a href="#拓展实现" class="headerlink" title="拓展实现"></a>拓展实现</h3><p>参考org.apache.commons的EnumerationIterator</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>客户—-&gt;request()—-&gt;Adapter—-&gt;translateRequest()—-&gt;被适配者</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>适配器模式将一个类的接口,转换成客户期望的另一个接口.适配器让原本接口不兼容的类可以合作无间.</p>
</blockquote>
<p>uml 类图:</p>
<html><br><!--在这里插入内容--><br><iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:100%; height:500px;" src="https://www.processon.com/embed/5d469bcae4b02c6fb7828752"></iframe><br></html>

<h2 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h2><p>与前面的装饰者模式有何区别?</p>
<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>当我们需要组装一个家庭影院并播放电影,我们需要做哪些事情呢?</p>
<ol>
<li>打开爆米花机</li>
<li>开始爆米花</li>
<li>将灯光调暗</li>
<li>放下屏幕</li>
<li>打开投影机</li>
<li>将投影机输入切换到DVD</li>
<li>设置宽屏</li>
<li>打开功放</li>
<li>功放输入设置为DVD</li>
<li>将功放设置为环绕立体声</li>
<li>设置功放音量</li>
<li>打开DVD播放器</li>
<li>开始播放DVD</li>
</ol>
<p>想一下转换成类和方法的调用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">popper.on();</span><br><span class="line">popper.pop();</span><br><span class="line"></span><br><span class="line">lights.dim(10);</span><br><span class="line"></span><br><span class="line">screen.down();</span><br><span class="line"></span><br><span class="line">projector.on();</span><br><span class="line">projector.setInput(dvd);</span><br><span class="line">projector.wideScreenMode();</span><br><span class="line"></span><br><span class="line">amp.on();</span><br><span class="line">amp.setDvd(dvd);</span><br><span class="line">amp.setSurroundSound();</span><br><span class="line">amp.setVolumn(5);</span><br><span class="line"></span><br><span class="line">dvd.on();</span><br><span class="line">dvd.play(movie);</span><br></pre></td></tr></table></figure>
<p>是不是很多、很混乱而且不优雅 ? </p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line">    Amplifier amp;</span><br><span class="line">    Tuner tuner;</span><br><span class="line">    DvdPlayer dvd;</span><br><span class="line">    CdPlayer cd;</span><br><span class="line">    Projector projector;</span><br><span class="line">    Lights lights;</span><br><span class="line">    Screen screen;</span><br><span class="line">    PopcornPopper popper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">(Amplifier amp,</span></span></span><br><span class="line"><span class="function"><span class="params">            Tuner tuner,</span></span></span><br><span class="line"><span class="function"><span class="params">            DvdPlayer dvd,</span></span></span><br><span class="line"><span class="function"><span class="params">            CdPlayer cd,</span></span></span><br><span class="line"><span class="function"><span class="params">            Projector projector,</span></span></span><br><span class="line"><span class="function"><span class="params">            Lights lights,</span></span></span><br><span class="line"><span class="function"><span class="params">            Screen screen,</span></span></span><br><span class="line"><span class="function"><span class="params">            PopcornPopper popper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amp = amp;</span><br><span class="line">        <span class="keyword">this</span>.tuner = tuner;</span><br><span class="line">        <span class="keyword">this</span>.dvd = dvd;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">        <span class="keyword">this</span>.projector = projector;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.lights = lights;</span><br><span class="line">        <span class="keyword">this</span>.popper = popper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">(String movie)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get ready 2 watch a movie.."</span>);</span><br><span class="line">        popper.on();</span><br><span class="line">        popper.pop();</span><br><span class="line"></span><br><span class="line">        lights.dim(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        screen.down();</span><br><span class="line"></span><br><span class="line">        projector.on();</span><br><span class="line">        projector.setInput(dvd);</span><br><span class="line">        projector.wideScreenMode();</span><br><span class="line"></span><br><span class="line">        amp.on();</span><br><span class="line">        amp.setDvd(dvd);</span><br><span class="line">        amp.setSurroundSound();</span><br><span class="line">        amp.setVolumn(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        dvd.on();</span><br><span class="line">        dvd.play(movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shutting movie theater down..."</span>);</span><br><span class="line">        popper.off();</span><br><span class="line">        lights.on();</span><br><span class="line">        screen.up();</span><br><span class="line">        projector.off();</span><br><span class="line">        amp.off();</span><br><span class="line">        dvd.stop();</span><br><span class="line">        dvd.eject();</span><br><span class="line">        dvd.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在可以轻松调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化组件 略</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        HomeTheaterFacade homeTheater = <span class="keyword">new</span> HomeTheaterFacade(amp, tuner, dvd, cd, projector, screen, lights, popper);</span><br><span class="line">        homeTheater.watchMovie(<span class="string">"The Avengers"</span>);</span><br><span class="line">        homeTheater.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>外观模式提供了一个统一的接口, 用来访问子系统中的一群接口. 外观定义了一个高层接口, 让子系统更容易使用.</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>外观的意图是要提供一个简单的接口好让一个子系统更加易于使用, 使得客户(调用者)和子系统之间避免紧耦合.</p>
<h1 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h1><p>ps:这是一个新的OO原则</p>
<h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>最少知识原则:只和你的密友谈话</p>
</blockquote>
<p>怎么理解呢?</p>
<p>我们要减少对象之间的交互, 只留下几个”密友”. </p>
<p>在我们的设计中, 不要让太多的类耦合在一起, 免得修改系统中的一部分, 会影响到其他部分. </p>
<p>如果许多类之间相互依赖,那么这个系统就会变成一个易碎的系统,它需要花许多成本维护,也会因为太复杂而不易被其他人了解</p>
<h2 id="原则方针"><a href="#原则方针" class="headerlink" title="原则方针"></a>原则方针</h2><p>对于任何对象, 在该对象方法内, 我们只应该调用属于以下范围的方法:</p>
<ul>
<li>该对象本身的方法</li>
<li><p>被当做方法的参数而传递进来的对象 的方法(好像有点绕, 其实很简单, 举个例子就是:)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Boy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Mp3 mp3)</span> </span>&#123;<span class="comment">// 传递进来的mp3 -&gt; 被当做方法的参数而传递进来的对象</span></span><br><span class="line">        mp3.boot();<span class="comment">// boot() -&gt; 被当做方法的参数而传递进来的对象的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此方法所创建或实例化的任何对象的方法</p>
</li>
<li>对象的任何组件(可以理解为该对象所在类所持有的属性或对另一类的引用)</li>
</ul>
<p>看一个例子:</p>
<p>不采用该原则的写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thermometer thermometer = station.getThermometer(); <span class="comment">// 从气象站取得温度计</span></span><br><span class="line">    <span class="keyword">return</span> thermometer.getTemperature();<span class="comment">// 从温度计取得温度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>采用该原则的写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> station.getTemperature();<span class="comment">// 我们在气象站中加入一个向温度计请求温度的方法, 然后直接调用该方法即可, 这样可以减少所依赖的类的数目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个清晰的Car类来描述:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    Engine engine;<span class="comment">// 这是类的其中一个组件, 该原则允许调用它的方法</span></span><br><span class="line">    <span class="comment">// 其他实例变量 略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Doors doors = <span class="keyword">new</span> Doors(); <span class="comment">// 这里构建的新对象, 该原则允许调用它的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> authorized = key.turns(); <span class="comment">// key这里作为参数传进来的对象, 该原则允许调用它的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(authorized) &#123;</span><br><span class="line">            engine.start();</span><br><span class="line">            updateDashboardDisplay();<span class="comment">//可以调用同一个对象内的本地方法</span></span><br><span class="line">            doors.lock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDashboardDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点:</p>
<ul>
<li>减少对象间的依赖,减少软件的维护成本</li>
</ul>
<p>缺点:</p>
<ul>
<li>导致更多的”包装”类被制造出来以处理和其他组件的沟通, 可能会导致复杂度和开发时间的增加.</li>
</ul>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2019/05/19/factory-pattern/</url>
    <content><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>针对实现编程</p>
<p>当使用new实例化一个具体类时, 使用的确实是实现,不是接口. 但代码绑定了具体的实现类导致代码缺乏弹性.</p>
<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pizza pizza = <span class="keyword">new</span> CheesePizza();</span><br></pre></td></tr></table></figure>
<p>前面的Pizza为抽象类型,具有弹性. 但是后面new的时候还是需要把具体的实现类规定出来.</p>
<p>因此,在类型变多时,就会有以下的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pizza pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cheese) &#123;</span><br><span class="line">    pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pepper) &#123;</span><br><span class="line">    pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(veggle) &#123;</span><br><span class="line">    pizza = <span class="keyword">new</span> vegglePizza();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设你是一个披萨店的老板,你的业务代码可能会这样写</p>
<p>伪代码如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pizza orderPizza(type) &#123;</span><br><span class="line">    Pizza pizza;</span><br><span class="line"></span><br><span class="line">    // 可能会改变的部分</span><br><span class="line">    // 不符合 对修改关闭原则</span><br><span class="line">    // 需要将这一块抽离出来</span><br><span class="line">    if(cheese) &#123;</span><br><span class="line">        pizza = new CheesePizza();</span><br><span class="line">    &#125; else if(pepper) &#123;</span><br><span class="line">        pizza = new PepperPizza();</span><br><span class="line">    &#125; else if(veggle) &#123;</span><br><span class="line">        pizza = new vegglePizza();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 不需要改变的部分</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line">    </span><br><span class="line">    return pizza;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候我们应当将实例化具体类的代码从实际的业务中抽离.或者封装起来.</p>
<p>此时我们就需要用到”工厂模式”了.</p>
<h2 id="简单工厂对象"><a href="#简单工厂对象" class="headerlink" title="简单工厂对象"></a>简单工厂对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> CLAM:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClamPizza();</span><br><span class="line">      <span class="keyword">case</span> CHEESE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">      <span class="keyword">case</span> VEGGLE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VegglePizza();</span><br><span class="line">      <span class="keyword">case</span> PEPPERONI:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样 不同的业务代码都可以通过这样的工厂取出Pizza对象.总而言之,可以理解为该工厂可以有许多的客户.以后修改实现的时候只需要修改该类即可.</p>
<p>思考:为什么不用静态工厂(工厂类的方法为静态方法)?</p>
<h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>Pizza类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别创建多个pizza子类<br>CheesePizza、ClamPizza等等<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cheese bake"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cheese prepare"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cheese cut"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cheese box"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简单工厂类SimplePizzaFactory</p>
<p>此处我用了一个Enum类型PizzaType来区分不同的Pizza</p>
<p>也可以使用String来区分<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">createPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> CLAM:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClamPizza();</span><br><span class="line">      <span class="keyword">case</span> CHEESE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">      <span class="keyword">case</span> VEGGLE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VegglePizza();</span><br><span class="line">      <span class="keyword">case</span> PEPPERONI:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>业务代码(此处以Pizza店提供pizza订购服务为例)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> SimplePizzaFactory factory;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory factory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.factory = factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = factory.createPizza(type);</span><br><span class="line"></span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展简单工厂-思考"><a href="#扩展简单工厂-思考" class="headerlink" title="扩展简单工厂 思考"></a>扩展简单工厂 思考</h3><p>如果想要扩大生意,开不同的加盟店,想要在不同的地区提供风味的披萨.(纽约 芝加哥等不同地区的口味)该怎么做呢?</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>原: </p>
<p>PizzaStore  -&gt;   SimplePizzaFactory</p>
<p>现:</p>
<p>PizzaStore -&gt; NYPizzaFactory</p>
<p>PizzaStore -&gt; ChicagoPizzaFactory</p>
<p>没错 就是在各地加盟店都有各自适合的工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Factory nyFactory = <span class="keyword">new</span> NYPizzaFactory();</span><br><span class="line">PizzaStore nyStore = <span class="keyword">new</span> PizzaStore(factory);</span><br><span class="line">nyStore.orderPizza(PizzaType.CHEESE);</span><br><span class="line"></span><br><span class="line">Factory chicagoFactory = <span class="keyword">new</span> ChicagoPizzaFactory();</span><br><span class="line">PizzaStore chicagoStore = <span class="keyword">new</span> PizzaStore(factory);</span><br><span class="line">chicagoStore.orderPizza(PizzaType.CHEESE);</span><br></pre></td></tr></table></figure>
<p>但是问题来了,我们制作pizza的代码绑定在PizzaStore里,即使工厂变了但是最终的烹调方式还是由PizzaStore里决定.</p>
<p>“一个好的加盟店,你不需要管他在披萨中放了什么东西.”</p>
<p>因此我们可以把PizzaStore变成抽象的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = createPizza(type);</span><br><span class="line"></span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(PizzaType type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们现在要做到就是每个子类去实现不同的createPizza()方法,即工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 面团类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> String dough;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> String sauce;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 佐料</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> List&lt;String&gt; toppings = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">    System.out.println(<span class="string">"Tossing dough..."</span>);</span><br><span class="line">    System.out.println(<span class="string">"Adding source..."</span>);</span><br><span class="line">    <span class="keyword">for</span> (String str: toppings) &#123;</span><br><span class="line">      System.out.println(<span class="string">"    "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"ChicagoStyleCheesePizza"</span>;</span><br><span class="line">    dough = <span class="string">"Extra Thick Crust Dough"</span>;</span><br><span class="line">    sauce = <span class="string">"Plum Tomato Sauce"</span>;</span><br><span class="line"></span><br><span class="line">    toppings.add(<span class="string">"Shredded Mozzarella Cheese"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Chicago Cheese bake"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Chicago Cheese cut"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Chicago Cheese box"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title">AbstractPizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> PEPPERONI:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStylePepperoniPizza();</span><br><span class="line">      <span class="keyword">case</span> VEGGLE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleVegglePizza();</span><br><span class="line">      <span class="keyword">case</span> CHEESE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">      <span class="keyword">case</span> CLAM:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleClamPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候我们就可以在不同地区的加盟店买到不同口味的pizza了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractPizzaStore nyPizzaStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">    Pizza nyCheesePizza = nyPizzaStore.orderPizza(PizzaType.CHEESE);</span><br><span class="line"></span><br><span class="line">    AbstractPizzaStore chicagoPizzaStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line">    Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza(PizzaType.CHEESE);</span><br></pre></td></tr></table></figure>
<h3 id="工厂方法模式定义"><a href="#工厂方法模式定义" class="headerlink" title="工厂方法模式定义"></a>工厂方法模式定义</h3><blockquote>
<p>工厂方法模式定义了一个创建对象的接口,但由子类决定要实例化的类是哪一个.工厂方法让类把实例化推迟到子类.</p>
</blockquote>
<ul>
<li>简单工厂与工厂方法的区别</li>
</ul>
<p>简单工厂把全部的事情都在一个地方处理完了.</p>
<p>工厂方法是创建了一个框架,并让子类决定如何实现.</p>
<p>简单工厂的做法可以将对象的创建封装起来,但是简单工厂不具备工厂方法的弹性,因为简单工厂不能变更正在创建的产品.</p>
<h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><p>此前我们的pizza有着相同的产品家族(面团 酱料 芝士 蔬菜等原料家族), 但根据不同的制作方式根据区域的不同而可能有差异.举个例子 在chicago, 芝士披萨采用的是普通的番茄酱料, 而纽约的加盟店, 采用的则是加工过得大蒜番茄酱料, 像这样不同的酱料也有着不同的做法.</p>
<p>如果在原本的pizza店的基础上, 想更加灵活地处理大批的’原料家族’, 该如何做呢?</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>定义一个接口 负责创建所有的原料</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里定义了很多原料的新类</span></span><br><span class="line"><span class="comment">//每一个基础原料都是一个独立的类</span></span><br><span class="line"></span><br><span class="line">  <span class="function">Dough <span class="title">createDough</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Cheese <span class="title">createCheese</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  Veggies[] createViggies();</span><br><span class="line"></span><br><span class="line">  <span class="function">Pepperoni <span class="title">createPepperoni</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Clams <span class="title">createClams</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来要做的, 就是</p>
<ol>
<li>为每一个区域建造一个工厂, 并实现PizzaIngredientFactory接口</li>
<li>实现一组原料的子类供工厂使用, 如RedPappers ReggianoCheese等</li>
<li>把新的原料工厂整合到PizzaStore</li>
</ol>
<p>创建纽约原料工厂<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustDough();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Veggies[] createViggies() &#123;</span><br><span class="line">    Veggies[] veggies = <span class="keyword">new</span> Veggies[] &#123;<span class="keyword">new</span> Gralic(), <span class="keyword">new</span> Onion()&#125;;</span><br><span class="line">    <span class="keyword">return</span> veggies;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FreshClams();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>类似的 也可以写一个ChicagoPizzaIngredientFactory</p>
<p>此处略</p>
<p>接下来是重做Pizza类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 面团类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> Dough dough;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Sauce sauce;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> Veggies veggies[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Cheese cheese;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> Pepperoni pepperoni;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Clams clams;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 佐料</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> List&lt;String&gt; toppings = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Bake for 25 mins at 350"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cutting the pizza into diagonal slices"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Place pizza in the offical PizzaStore box"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getters &amp; setters ...</span></span><br></pre></td></tr></table></figure></p>
<p>此前我们有工厂方法的代码,采用NYCheesePizza和ChicagoCheesePizza类, 如今我们只需要让原料工厂来处理这些区域差异(原料差异)就可以了.所以现在只需要CheesePizza就可以了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory pizzaIngredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">    dough = pizzaIngredientFactory.createDough();</span><br><span class="line">    sauce = pizzaIngredientFactory.createSauce();</span><br><span class="line">    cheese = pizzaIngredientFactory.createCheese();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>同样的,蛤蜊pizza也类似<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span><span class="params">(PizzaIngredientFactory pizzaIngredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">    dough = pizzaIngredientFactory.createDough();</span><br><span class="line">    sauce = pizzaIngredientFactory.createSauce();</span><br><span class="line">    cheese = pizzaIngredientFactory.createCheese();</span><br><span class="line">    clams = pizzaIngredientFactory.createClams();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>最后, 回归到PizzaStore 以纽约加盟店为例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">AbstractPizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">  PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> NYPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(PizzaType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> PEPPERONI:</span><br><span class="line">        pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">        pizza.setName(<span class="string">"NY Style Pepperoni Pizza"</span>);</span><br><span class="line">      <span class="keyword">case</span> VEGGIE:</span><br><span class="line">        pizza =  <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">        pizza.setName(<span class="string">"NY Style Veggie Pizza"</span>);</span><br><span class="line">      <span class="keyword">case</span> CHEESE:</span><br><span class="line">        pizza =  <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">        pizza.setName(<span class="string">"NY Style Cheese pizza"</span>);</span><br><span class="line">      <span class="keyword">case</span> CLAM:</span><br><span class="line">        pizza =  <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">        pizza.setName(<span class="string">"NY Style Clam Pizza"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此, 一个抽象工厂模式例子就完成了</p>
<h3 id="抽象工厂模式定义"><a href="#抽象工厂模式定义" class="headerlink" title="抽象工厂模式定义"></a>抽象工厂模式定义</h3><blockquote>
<p>抽象工厂模式提供一个接口,用于创建相关或依赖对象的家族,而不需要明确指定具体类.</p>
</blockquote>
<p>思考:</p>
<p>抽象工厂的每个方法看起来都是工厂方法.到底工厂方法与抽象工厂的最根本区别在与哪里呢?</p>
<ul>
<li>工厂方法模式：</li>
</ul>
<p>一个抽象产品类，可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。</p>
<p>每个具体工厂类只能创建一个具体产品类的实例。</p>
<ul>
<li>抽象工厂模式：</li>
</ul>
<p>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。</p>
<p>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类可以创建多个具体产品类的实例。</p>
<ul>
<li>区别：<br>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</li>
</ul>
<p>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</p>
<p>查资料时看到一个比较形象的比喻:</p>
<blockquote>
<p>抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线</p>
</blockquote>
<p>除此以外, 抽象工厂在拓展一组产品时, 必须改变接口.这也是它的缺点所在,因此,在选择模式时需要根据实际需求考虑清楚是否适用.</p>
<h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><blockquote>
<p>要依赖抽象, 不要依赖具体类</p>
</blockquote>
<p>以工厂方法模式中用到的例子为例.</p>
<p>在不采用工厂的情况下:</p>
<p>PizzaStore是一种”高层组件”,Pizza的实现是一种”低层组件” PizzaStore依赖这些具体Pizza类</p>
<p>应用工厂就可以满足这一设计原则.改进之后也就成了PizzaStore这个”高层组件”依赖Pizza这个抽象类.低层组件(各种Pizza)都依赖Pizza抽象.</p>
<p>思考:依赖有了, 什么是”倒置”?</p>
<p>我们一般思考时,会先从顶端开始思考,然后往下思考到具体类.依赖正置就是类间的依赖是实实在在的实现类间的依赖，也就是面向实现编程，这也是正常人的思维方式，我要开奔驰车就依赖奔驰车，我要使用笔记本电脑就直接依赖笔记本电脑.</p>
<p>而编写程序需要的是对现实世界的事物进行抽象，抽象的结果就是有了抽象类和接口，然后我们根据系统设计的需要产生了抽象间的依赖，代替了人们传统思维中的事物间的依赖，“倒置”就是从这里产生的。</p>
<p>因此,我们要”倒置”我们的想法,从Pizza开始.看能抽象化些什么.</p>
<p>尽量遵循以下的几个方针:</p>
<ul>
<li>变量不可以持有具体类的引用(不采用new 可采用工厂)</li>
<li>不要让类派生自具体类(派生自一个抽象)</li>
<li>不要覆盖基类中已经实现的方法</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>所有工厂都是用来封装对象的创建</li>
<li>简单工厂虽然不是真正的设计模式,但仍不失为一个简单的方法,可以将客户程序从具体类解耦</li>
<li>工厂方法使用继承:把对象的创建委托给子类,子类实现工厂方法创建对象</li>
<li>抽象工厂使用对象组合:对象的创建被实现在工厂接口暴露出来的方法中</li>
<li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合</li>
<li>工厂方法允许类将实例化延迟到子类进行</li>
<li>抽象工厂创建相关的对象家族,而不需要依赖他们的具体类</li>
<li>依赖倒置原则, 指导我们避免依赖具体类型,而要尽量以来抽象</li>
<li>工厂是很有威力的技巧,帮助我们针对抽象变成,而不要针对具体类编程.</li>
</ol>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS服务器部署参考笔记</title>
    <url>/2017/07/24/centos%20server/</url>
    <content><![CDATA[<h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><blockquote>
<p><a href="http://www.cnblogs.com/shanheyongmu/p/6110580.html" target="_blank" rel="noopener">http://www.cnblogs.com/shanheyongmu/p/6110580.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.cnblogs.com/xdp-gacl/p/4097608.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/4097608.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.cnblogs.com/allenblogs/archive/2010/08/12/1798247.html" target="_blank" rel="noopener">http://www.cnblogs.com/allenblogs/archive/2010/08/12/1798247.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.cnblogs.com/Lam7/p/5454163.html" target="_blank" rel="noopener">http://www.cnblogs.com/Lam7/p/5454163.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>在后台运行 docker 容器会自动退出解决方案</title>
    <url>/2018/11/02/docker-background-run/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>由于 docker 启动容器后，一旦命令完成就会自动退出容器</p>
<p>比如我想在后台运行nginx之类的某个服务，执行下面这句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name xxx -d xxx</span><br></pre></td></tr></table></figure>
<p>然后再执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>发现并没有刚启动的服务</p>
<p>于是执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p>查看所有 docker 容器</p>
<p>发现刚启动的服务xxx 已经Exit</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>查了下资料</p>
<p>发现</p>
<blockquote>
<p>docker run指定的命令如果不是那些一直挂起的命令（比如运行top，不断echo），就是会自动退出的。-d命令是设置detach为true，根据官方的文档，意思是让这个命令在后台运行，但并不是一直运行，Docker容器后台运行,就必须有一个前台进程。主线程结束，容器会退出。</p>
</blockquote>
<p>启动服务时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name alpine -d alpine tail -f /dev/null</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>VAST 3.0文档梳理</title>
    <url>/2018/07/27/VAST/</url>
    <content><![CDATA[<h1 id="VAST-3-0-概述"><a href="#VAST-3-0-概述" class="headerlink" title="VAST 3.0  概述"></a>VAST 3.0  概述</h1><h2 id="几个专业术语"><a href="#几个专业术语" class="headerlink" title="几个专业术语"></a>几个专业术语</h2><ul>
<li>Companion Ad ：<strong>伴随广告</strong>，通常包含视频体验的文字广告，展示广告，<strong>rich media</strong>富媒体或皮肤。这些广告有多种尺寸和形状，它出现在视频播放器之外，<strong>一般是横幅广告或者富媒体广告</strong>。</li>
</ul>
<blockquote>
<p>Rich Media并不是一种具体的互联网媒体形式，而是指具有动画、声音、视频或交互性的信息传播方法，包含下列常见的形式之一或者几种的组合：流媒体、声音、Flash、以及Java、Javascript、DHTML等程序设计语言</p>
</blockquote>
<ul>
<li><p>InLine Ad：<strong>线内广告</strong>，包含显示广告视觉体验所需的<strong>所有元素</strong>的VAST文档。( 当VAST的线内广告收到响应后，无需调用其他所需要的广告服务器 )</p>
</li>
<li><p>Linear Video Ad:<strong>线性视频广告</strong>，广告在用户使用视频内容之前，之中或之后呈现，其方式与电视广告在所选节目之前，期间或之后可以播放的方式非常相似。</p>
</li>
<li><p>Non-linear Video Ad：<strong>非线性视频广告</strong>，这种广告会与视频内容同时运行因此用户会在观看内容的同时也在看广告。Non-linear Video Ad可以作为文字广告，图形广告或视频叠加层投放。</p>
</li>
<li><p>Primary Ad Server:<strong>主广告服务器</strong>，由<strong>视频播放器</strong>或<strong>其他框架</strong>调用的第一个广告投放系统。假设在大多数情况下，publisher将通过其主广告服务器（无论是自行开发还是第三方）发出所有初始广告请求，然后根据需要重定向到其他广告服务器。( 从主广告服务器返回的数据不一定是我们所需的广告视频，还有可能是另一个广告服务器的地址，也就是下面介绍的二级广告服务器 。)</p>
</li>
<li><p>Secondary Ad Server：<strong>次广告服务器</strong>或<strong>二级广告服务器</strong>，该广告服务器被广告网络或广告买方用于投放广告素材，跟踪结果和优化广告素材的广告服务器。(如果主广告服务器返回的不是视频广告的内容，而是一个重定向，指向另一个广告服务器，而这一级的广告服务器也不一定是最后一跳，也就是说还有可能有三级广告服务器、四级广告服务器，以此类推。但是最后一跳的广告服务器一定会提供包含视频广告信息的VAST响应。)</p>
</li>
<li><p>VAST (Video Ad Serving Template)：<strong>XML文档格式</strong>，<strong>描述</strong>要在视频播放器或指向要请求的<strong>下游</strong>VAST文档的包装器中，上方或周围显示的广告。</p>
</li>
<li><p>Video Player：<strong>播放插播视频内容的环境</strong>。视频播放器可以由publisher或由vendor(供应商)提供。</p>
</li>
<li><p>Wrapper Ad : <strong>封装广告</strong>。VAST文档，指向来自其他服务器的另一个VAST文档。++意味着我们需要访问Wrapper中提供的URI访问下一级广告服务器。</p>
</li>
<li><p>Ad Pod： <strong>广告荚</strong>，包含一系列的线性视频广告。</p>
<h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2></li>
</ul>
<h3 id="直接从主广告服务器获取"><a href="#直接从主广告服务器获取" class="headerlink" title="直接从主广告服务器获取"></a>直接从主广告服务器获取</h3><ol>
<li>videoplayer–&gt;发出VAST Request–&gt;PrimaryAdServer(publisher)</li>
<li>PrimaryAdServer(publisher)–&gt;返回VAST Response–&gt;video player</li>
<li>video player–&gt;Tracking URIs pinged(跟踪uri)–&gt;PrimaryAdServer(publisher)</li>
</ol>
<h3 id="从多级广告服务器上获取广告信息"><a href="#从多级广告服务器上获取广告信息" class="headerlink" title="从多级广告服务器上获取广告信息"></a>从多级广告服务器上获取广告信息</h3><ol>
<li>videoplayer–&gt;发出VAST Request–&gt;PrimaryAdServer(publisher)</li>
<li>PrimaryAdServer(publisher)–&gt;返回VAST Redirect(Wrapper)–&gt;videoplayer</li>
<li>videoplayer-&gt;发出VAST Request–&gt;SecondaryAdServer</li>
<li>SecondaryAdServer–&gt;返回VAST Inline Response–&gt;videoplayer</li>
<li>videoplayer–&gt;Tracking URIs pinged(跟踪uri)–&gt;各级Ad Server</li>
</ol>
<hr>
<p>一些解释</p>
<ul>
<li><p>VAST Request: video player 发送一个 request 给 primary ad server。</p>
</li>
<li><p>VAST Redirect：广告方(可能是代理商或网盟) 发送一个VAST Wrapper response识别Secondary Ad Server中的资源。<br>写法举个栗子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VAST</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span><br><span class="line">            …</span><br><span class="line">            <span class="tag">&lt;<span class="name">VASTAdTagURI</span>&gt;</span></span><br><span class="line">                http://SecondaryAdServer.vast.tag</span><br><span class="line">            <span class="tag">&lt;/<span class="name">VASTAdTagURI</span>&gt;</span></span><br><span class="line">            …</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VAST</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>VAST Request: video player解析了VAST response后会使用 Primary Ad Server 的VAST response提供的URI向 Secondary Ad Server  发送请求。</p>
</li>
<li><p>VAST Inline Response：Secondary Ad Server发送VAST响应，其中包含要显示的广告的所有必要详细信息。</p>
</li>
</ul>
<ul>
<li>Tracking URIs Pinged：video player在触发广告的指定事件后，将使用提供的跟踪URI通知每个广告服务器。</li>
</ul>
<h2 id="VAST-3-0支持的广告类型"><a href="#VAST-3-0支持的广告类型" class="headerlink" title="VAST 3.0支持的广告类型"></a>VAST 3.0支持的广告类型</h2><blockquote>
<p>线性广告<br>非线性的广告<br>可跳过线性广告<br>伴随线性广告<br>广告荚</p>
</blockquote>
<p>其中，可跳过的线性广告以及广告荚是3.0新增的两种格式。</p>
<h1 id="VAST-实现细节"><a href="#VAST-实现细节" class="headerlink" title="VAST 实现细节"></a>VAST 实现细节</h1><h2 id="最低限度要求"><a href="#最低限度要求" class="headerlink" title="最低限度要求"></a>最低限度要求</h2><ol>
<li>Inline和Wrapper Ads</li>
<li>Tracking Events</li>
<li>Error Reporting</li>
<li>Industry Icons (such as for in-ads notice supporting OBA self-regulation)</li>
</ol>
<p>使用任何符合VAST标准的技术时，公司应该能够期望支持所有上述一般功能。</p>
<h2 id="跨域安全信任问题"><a href="#跨域安全信任问题" class="headerlink" title="跨域安全信任问题"></a>跨域安全信任问题</h2><h3 id="crossdomain-xml-for-Flash"><a href="#crossdomain-xml-for-Flash" class="headerlink" title="crossdomain.xml for Flash"></a>crossdomain.xml for Flash</h3><p>ad servers必须提供一个crossdomain.xml 文件在他们的域名根目录下</p>
<p>举个栗子</p>
<p>adserver.com 需要提供文件：</p>
<pre><code>http://adserver.ccom/crossdomain.xml
</code></pre><p>该xml是一个简单的文件 其结构如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cross-domain-policy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-access-from</span> <span class="attr">domain</span>=<span class="string">”*”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Cross-Origin-Resource-Sharing-CORS-for-JavaScript"><a href="#Cross-Origin-Resource-Sharing-CORS-for-JavaScript" class="headerlink" title="Cross Origin Resource Sharing (CORS) for JavaScript"></a>Cross Origin Resource Sharing (CORS) for JavaScript</h3><p>要使JavaScript video players 能够接收VAST response,ad servers必须在封装了VAST response的文件中包含一个 CORS header<br>其结构如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &lt;origin header value&gt;</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure></p>
<p>Access-Control-Allow-Origin 的值对应的是随着广告请求一起发送的Origin的header</p>
<p>Access-Control-Allow-Credentials 设置为true将确保cookies会被正确发送和接收</p>
<h2 id="构建VAST文档结构"><a href="#构建VAST文档结构" class="headerlink" title="构建VAST文档结构"></a>构建VAST文档结构</h2><h3 id="声明-VAST-response"><a href="#声明-VAST-response" class="headerlink" title="声明 VAST response"></a>声明 VAST response</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VAST</span> <span class="attr">version</span>=<span class="string">”3.0”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ad details go here--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VAST</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>各类广告需要的结点如下：</p>
<table>
<thead>
<tr>
<th>VAST Ad 标签</th>
<th>Linear Ads</th>
<th>Companion Ads</th>
<th>Skippable Ad</th>
<th>NonLinear Ads</th>
<th>Ad pods</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;Ad&gt;(no sequence)</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;Ad sequence=”n”&gt;</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>&lt;Linear&gt;(no skipoffset)</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>&lt;Linear skipoffset=”HH:MM:SS”&gt;</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;NonLinearAds&gt;</td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;CompanionAds&gt;</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="Ad节点"><a href="#Ad节点" class="headerlink" title="Ad节点"></a>Ad节点</h3><p>一个&lt;VAST&gt;内可以有一个或多个&lt;Ad&gt;元素，&lt;Ad&gt;元素包含视频播放器显示和跟踪广告素材所需的所有信息， VAST响应可能会提供多个广告。</p>
<p>单个&lt;Ad&gt;元素是最常见的，代表视频播放器只显示一个广告的情况。</p>
<p>在VAST 3.0之前只考虑了单个广告案例，现在有多个广告的可能。</p>
<p>结构：每个Ad节点包含<strong>InLine</strong>或者<strong>Wrapper</strong>结点，但仅会是<strong>其中一个</strong>。</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>该广告的广告服务器定义的标识符字符串</td>
</tr>
<tr>
<td>sequence</td>
<td>一个大于0的数字，用于标识广告应播放的顺序,所有具有序列值的&lt;Ad&gt;元素是Ad pods荚的一部分，并且是按顺序播放的</td>
</tr>
</tbody>
</table>
<h3 id="Wrapper节点"><a href="#Wrapper节点" class="headerlink" title="Wrapper节点"></a>Wrapper节点</h3><p>结构：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Wrapper&gt;</span><br><span class="line">    …</span><br><span class="line">    &lt;VASTAdTagURI&gt;</span><br><span class="line">        http://SecondaryAdServer.vast.tag</span><br><span class="line">    &lt;/VASTAdTagURI&gt;</span><br><span class="line">    …</span><br><span class="line">&lt;/Wrapper&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="InLine节点"><a href="#InLine节点" class="headerlink" title="InLine节点"></a>InLine节点</h3><p>&lt;InLine&gt;元素是广告供应链中的最后一个广告服务器提供&lt;InLine&gt;元素。 在&lt;InLine&gt;元素中，是显示广告所需的所有内容。</p>
<p>元素：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;AdSystem&gt;</td>
<td>返回广告的广告服务器的名称</td>
<td>是</td>
</tr>
<tr>
<td>&lt;AdTitle&gt;</td>
<td>广告标题</td>
<td>是</td>
</tr>
<tr>
<td>&lt;Impression&gt;</td>
<td>当视频播放器在显示广告的第一帧时应请求的URI</td>
<td>是</td>
</tr>
<tr>
<td>&lt;Creatives&gt;</td>
<td>一个或多个<creative>元素</creative></td>
<td>是</td>
</tr>
<tr>
<td>&lt;Description&gt;</td>
<td>广告描述</td>
<td>否</td>
</tr>
<tr>
<td>&lt;Advertiser&gt;</td>
<td>广告主定义的广告客户名称， 此元素可用于防止与广告客户竞争对手展示广告</td>
<td>否 </td>
</tr>
<tr>
<td>&lt;Survey&gt;</td>
<td>测量Url，例如类型属性可用于指定MIME类型，可设置为type =“text/javascript”</td>
<td>否</td>
</tr>
<tr>
<td>&lt;Error&gt;</td>
<td>错误Url</td>
<td>否</td>
</tr>
<tr>
<td>&lt;Pricing&gt;</td>
<td>提供一个代表实时出价（RTB）系统可以使用的价格的值。</td>
<td>否</td>
</tr>
<tr>
<td>&lt;Extensions&gt;</td>
<td>自定义节点，如：&lt;Extensions&gt; &lt;CustomXML&gt;…&lt;/CustomXML&gt;&lt;/Extensions&gt;</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>VAST虽然不是为了处理RTB而设计的，但可能存在其他用法，如果需要价格，这个元素可以提供解决方案。 如果使用，必须识别以下两个属性：</p>
</blockquote>
<blockquote>
<p>1、model：将定价模型标识为“CPM”，“CPC”，“CPE”或“CPV”之一。</p>
</blockquote>
<blockquote>
<p>2、currency：标识所提供价值货币（即美元，英镑等）的3个字母的ISO-4217货币符号。当作为广告链中的VAST Wrapper的一部分时，只需要考虑第一个Wrapper中提供的值</p>
</blockquote>
<h3 id="VAST-Tracking"><a href="#VAST-Tracking" class="headerlink" title="VAST Tracking"></a>VAST Tracking</h3><p>视频播放器必须向跟踪元素中提供的URI进行监测，这些跟踪元素均包含发送VAST response的广告服务器上的资源文件或位置的URI。视频播放器不需要对返回的响应做任何事情。此响应通常为200，响应主体中具有1x1像素图像（也可能是其他类型）。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VAST</span>&gt;</span> Tracking Elements：</span><br><span class="line">  <span class="tag">&lt;<span class="name">Error</span>&gt;</span>视频播放器在收到“无广告”响应时应请求监测URI </span><br><span class="line"><span class="tag">&lt;<span class="name">InLine</span>&gt;</span> and <span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span> Tracking Elements：</span><br><span class="line">   <span class="tag">&lt;<span class="name">Error</span>&gt;</span> 视频播放器在服务器因为某些原因无法提供InLine广告时应该请求的监测URI  </span><br><span class="line">   <span class="tag">&lt;<span class="name">Impression</span>&gt;</span> 视频播放器通常在将InLine广告的第一帧显示时请求的监测URI，通常作为计算广告“展示次数”指标。</span><br><span class="line"><span class="tag">&lt;<span class="name">Linear</span>&gt;</span> Tracking Elements ：</span><br><span class="line">  <span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span> 包含以下元素：   </span><br><span class="line">       <span class="tag">&lt;<span class="name">Tracking</span>&gt;</span> 视频播放器在播放线性广告素材期间发生特定的命名事件时请求（事件名称作为该元素的属性传递）的监测URI。  </span><br><span class="line">  <span class="tag">&lt;<span class="name">VideoClicks</span>&gt;</span>包含以下元素:   </span><br><span class="line">      <span class="tag">&lt;<span class="name">ClickThrough</span>&gt;</span> 当用户在线性广告播放期间点击视频帧时，在浏览器上打开的网页URI（落地页）; 服务器可以使用此URI的请求来跟踪“点击率”指标                                                    </span><br><span class="line">      <span class="tag">&lt;<span class="name">ClickTracking</span>&gt;</span>  当用户在线性广告播放期间点击视频帧时应该请求的URI; 服务器可以使用此URI的请求来跟踪“点击率”指标</span><br><span class="line">      <span class="tag">&lt;<span class="name">CustomClick</span>&gt;</span> 当用户点击特定按钮，链接或其他与线性广告相关联的其他呼叫行为时请求的URI，但不会在Web中打开新的页面; 不应同时请求ClickThrough和CustomClick网址（即同一次点击）</span><br><span class="line">  <span class="tag">&lt;<span class="name">IconClicks</span>&gt;</span>包含以下元素: </span><br><span class="line">      <span class="tag">&lt;<span class="name">IconClickThrough</span>&gt;</span>当用户点击与广告相关联的图标广告素材时，视频播放器应在Web浏览器窗口中打开的网页的URI; 也可以用来跟踪点击。</span><br><span class="line">      <span class="tag">&lt;<span class="name">IconClickTracking</span>&gt;</span> 当用户点击图标广告素材时视频播放器应该请求的监测URI。</span><br><span class="line">  <span class="tag">&lt;<span class="name">IconViewTracking</span>&gt;</span> 当向用户显示图标/图标广告素材时视频播放器应该请求的监测URI。</span><br><span class="line"><span class="tag">&lt;<span class="name">Companion</span>&gt;</span> Tracking Elements：</span><br><span class="line">  <span class="tag">&lt;<span class="name">CompanionClickThrough</span>&gt;</span> 当用户点击伴随广告素材时视频播放器应在Web浏览器窗口中打开的网页URI; URI也可以用于跟踪点击 </span><br><span class="line">  <span class="tag">&lt;<span class="name">CompanionClickTracking</span>&gt;</span> 当用户点击伴随广告素材时视频播放器应该请求的监测URI; 用于在广告素材处理点击时跟踪InLine广告素材的点击次数; 在Wrapper广告中，URI用于跟踪Wrapper之后产生的InLine响应的点击</span><br><span class="line"><span class="tag">&lt;<span class="name">NonLinearAds</span>&gt;</span> Tracking Elements：</span><br><span class="line">  <span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span>包含以下元素:                 </span><br><span class="line">      <span class="tag">&lt;<span class="name">Tracking</span>&gt;</span> 视频播放器在播放非线性广告素材期间发生特定的命名事件时请求（事件名称作为该元素的属性传递）的监测URI。</span><br><span class="line"><span class="tag">&lt;<span class="name">NonLinear</span>&gt;</span> Tracking Elements：</span><br><span class="line">  <span class="tag">&lt;<span class="name">NonLinearClickThrough</span>&gt;</span> 当用户点击非线性广告素材时，视频播放器应在Web浏览器窗口中打开的网页的URI </span><br><span class="line">  <span class="tag">&lt;<span class="name">NonLinearClickTracking</span>&gt;</span> 当用户点击非线性广告素材时视频播放器应该请求的监测URI; 用于在广告素材处理点击时跟踪InLine点击; 在Wrapper广告中，URI用于跟踪Wrapper之后产生的InLine响应的点击</span><br></pre></td></tr></table></figure></p>
<h3 id="impression节点"><a href="#impression节点" class="headerlink" title="impression节点"></a>impression节点</h3><p>VAST响应中的&lt;InLine&gt;元素包含一个或多个&lt;Impression&gt;元素。 每个&lt;Impression&gt;元素只包含一个子CDATA Ad wrapped URI。 如果广告素材需要多个展示资源文件（例如，当多个系统希望被通知展示时），则必须为每个展示资源都包含一个&lt;Impression&gt;元素，每个展示资源都具有唯一的URI。 可能包含潜在危险字符的VAST URI应包装在CDATA块中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Impression</span> <span class="attr">id</span>=<span class="string">”myserver”</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">[CDATA[</span>  <span class="attr">http:</span>//<span class="attr">ad.server.com</span>/<span class="attr">impression</span>/<span class="attr">dot.gif</span> ]]&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Impression</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Impression URI应用于广告的第一帧显示时发送。但是，广告可能由多个广告素材组成。如果广告主除追踪广告展示外，还想跟踪何时启动个别广告素材，则VAST响应应在要跟踪广告素材的&lt;TrackingEvents&gt;元素下包含一个’Start’事件。</p>
<blockquote>
<p>Multiple Impressions,多重印象，使用多个印象URI可让广告服务器与其他广告投放系统（例如广告客户使用的供应商广告服务器）共享展示监测信息。当VAST响应中包含多个展示元素时，视频播放器需要在同一时间请求全部印象。展示请求之间的任何重大延迟可能导致广告投放系统之间的计数差异。如果提供了多个&lt;Impression&gt;元素，则必须在同一时间或尽可能接近的时间请求它们。特别是对于包含&lt;Linear&gt;元素的VAST响应视频播放器，要求在向用户显示线性广告素材的第一帧时请求所有的展示URI。如果任何请求被显著延迟，则可能导致参与广告投放系统计数差异。</p>
</blockquote>
<h3 id="Creatives节点"><a href="#Creatives节点" class="headerlink" title="Creatives节点"></a>Creatives节点</h3><p>在&lt;InLine&gt;元素中有一个&lt;Creatives&gt;元素。 &lt;Creatives&gt;元素提供有关要作为广告体验一部分的每个<strong>广告素材</strong>的文件的详细信息，每个嵌套的&lt;Creative&gt;元素包含以下之一：&lt;Linear&gt;，&lt;NonLinear&gt;或&lt;CompanionAds&gt;。</p>
<p>其属性<strong>均为可选</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>广告素材的广告服务器定义的标识符</td>
</tr>
<tr>
<td>sequence</td>
<td>每个广告素材应显示的数字顺序（不要与用于定义广告投放位置的Ad序列属性混淆）</td>
</tr>
<tr>
<td>adId</td>
<td>标识广告素材所属广告Id</td>
</tr>
<tr>
<td>apiFramework</td>
<td>标识API</td>
</tr>
</tbody>
</table>
<p>举个栗子：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">**此响应表示具有随播广告的线性广告**</span><br><span class="line"><span class="tag">&lt;<span class="name">VAST</span> <span class="attr">version</span>=<span class="string">”3.0”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Ad</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">InLine</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AdSystem</span>&gt;</span>My Ad Server<span class="tag">&lt;/<span class="name">AdSystem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AdTitle</span>&gt;</span>XX Company<span class="tag">&lt;/<span class="name">AdTitle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Impression</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Impression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Creatives</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Creative</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Linear</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Linear</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Creative</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">CompanionAds</span>&gt;</span>...<span class="tag">&lt;/<span class="name">CompanionAds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Creatives</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">InLine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VAST</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>Creative Extensions扩展</li>
</ul>
<p>当需要特定API框架来执行广告素材时，可以在&lt;Creative&gt;下添加&lt;CreativeExtensions&gt;元素</p>
<p>此扩展可用于加载无论是不是媒体文件的可执行广告素材。</p>
<p>一个&lt;CreativeExtension&gt;元素嵌套在&lt;CreativeExtensions&gt;元素下，此外，此扩展中使用的任何xml标识避免应与VAST元素名称混淆。</p>
<p>&lt;CreativeExtension&gt;具有两个属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>指定了执行扩展所需的MIME类型</td>
</tr>
<tr>
<td>apiFramework</td>
<td>标识执行广告素材所需的API。若未指定，则播放器忽略广告素材。若无法执行，则忽略，并使用&lt;error&gt;元素(在&lt;Ad&gt;元素下方通知广告服务器该广告无法显示。)</td>
</tr>
</tbody>
</table>
<h2 id="Linear-Ad"><a href="#Linear-Ad" class="headerlink" title="Linear Ad"></a>Linear Ad</h2><p>&lt;Linear&gt;元素具有两个 <strong>必需</strong> 的子元素，<strong>&lt;Duration&gt;</strong> 和 <strong>&lt;MediaFiles&gt;</strong> 元素</p>
<p>以及四个 <strong>可选</strong> 的子元素，<strong>&lt;VideoClicks&gt;</strong>，<strong>&lt;AdParameters&gt;</strong>，<strong>&lt;TrackingEvents&gt;</strong>和<strong>&lt;Icons&gt;</strong>。</p>
<h3 id="The-Duration-Element（必须）"><a href="#The-Duration-Element（必须）" class="headerlink" title="The Duration Element（必须）"></a>The Duration Element（必须）</h3><p>线性广告素材的广告持续时间在&lt;Duration&gt;元素中表示，持续时间以“HH：MM：SS.mmm”格式表示（.mmm表示毫秒，可选）。 </p>
<p>举个栗子，30s的视频表示方法：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Duration</span>&gt;</span> 00:00:30 <span class="tag">&lt;/<span class="name">Duration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Duration</span>&gt;</span> 00：00：30.000 <span class="tag">&lt;/<span class="name">Duration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>尽可能使用毫秒的.mmm扩展 以避免过早停掉Creative。 &lt;MediaFiles&gt;元素可以包含多个&lt;MediaFile&gt;元素，每个元素必须是在线性元素中定义的持续时间。</p>
<h3 id="The-MediaFiles-Element（必须）"><a href="#The-MediaFiles-Element（必须）" class="headerlink" title="The MediaFiles Element（必须）"></a>The MediaFiles Element（必须）</h3><p>&lt;MediaFiles&gt;元素是一个包含了一个或多个&lt;MediaFile&gt;元素的容器，每个&lt;MediaFile&gt;元素 <strong>都包含</strong> 要为Linear Creative下载或流式传输的媒体文件的CDATA-wrapped URI。</p>
<p>Linear Creative线性广告素材通常是视频文件，但也可以使用静态图像。</p>
<p>&lt;MediaFiles&gt;元素可能包含多个&lt;MediaFile&gt;元素，每个元素最适合于不同的技术或设备。</p>
<blockquote>
<p>　当广告可以被投放到多个视频平台时，为了适配不同的设备的编码和比特率的视频文件，VAST文档通常包含多个替代的&lt;MediaFile&gt;元素，每个元素具有不同的containerd-codec版本，并具有几种不同的比特率，每个媒体文件的广告内容应该相同，应该只显示与视频播放器系统最匹配的媒体文件。</p>
</blockquote>
<p>&lt;MediaFile&gt;元素具有多个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>delivery</td>
<td>传输协议，progressive（如HTTP）或者streaming</td>
<td>是</td>
</tr>
<tr>
<td>type</td>
<td>文件MIME类型。 流行的MIME类型包括但不限于Flash视频的“video/ x-flv”和MP4的“video/mp4”</td>
<td>是</td>
</tr>
<tr>
<td>width</td>
<td>视频文件的宽度，单位：px(若为音频，则可为0)</td>
<td>是</td>
</tr>
<tr>
<td>height</td>
<td>视频文件的高度，单位：px(若为音频，则可为0)</td>
<td>是</td>
</tr>
<tr>
<td>codec</td>
<td>用于对符合RFC-4281规定的文件进行编码</td>
<td>否</td>
</tr>
<tr>
<td>id</td>
<td>媒体文件的标识符</td>
<td>否</td>
</tr>
<tr>
<td>bitrate/minBitrate/maxBitrate</td>
<td>否 使用文件的确定比特率值或者平均比特率或者可以使用minBitrate和maxBitrate来指定流式视频的最小和最大比特率来加载视频</td>
<td>否</td>
</tr>
<tr>
<td>scalable</td>
<td>标识文件可以放大的最大比例</td>
<td>否</td>
</tr>
<tr>
<td>maintainAspectRatio</td>
<td>一个布尔值，标识是否可以将媒体文件进行等比例缩放</td>
<td>否</td>
</tr>
<tr>
<td>apiFramework</td>
<td>标识执行交互式媒体文件所需的API</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>MediaFiles通常包含多个媒体文件，视频播放器仅需要选择一个最适合的&lt;MediaFile&gt;元素来显示，视频播放器应该在选择一个显示之前遍历所有媒体文件。</p>
</blockquote>
<ul>
<li>Linear Creative中使用静态图片Media文件 </li>
</ul>
<blockquote>
<p>为获得最佳效果，线性广告点中使用的静态图像应转码为视频媒体文件。 但是，当静态图像作为媒体文件提供，视频播放器应该是只需要Duration元素来显示图像。 视频播放器应该向用户指示图像正在展示中，以避免用户在广告播放期间冻结视频播放器。 如果静态图像无法显示，则视频播放器应使用error事件URI发送事件错误（error405可能是最合适的）</p>
</blockquote>
<h3 id="可选Element"><a href="#可选Element" class="headerlink" title="可选Element"></a>可选Element</h3><ul>
<li>VideoClicks Element（可选）</li>
</ul>
<p>当用户点击视频播放器时，如果提供了&lt;VideoClicks&gt;元素，它<strong>必须</strong>包含<strong>一个</strong>单独的&lt;ClickThrough&gt;元素，并且<strong>可以包含一个或多个</strong>&lt;ClickTracking&gt;和&lt;CustomClick&gt;元素。<br>&lt;VideoClicks&gt;的嵌套元素：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;ClickThrough&gt;</td>
<td>点击时视频播放器在web浏览器窗口中打开此 URI</td>
</tr>
<tr>
<td>&lt;ClickTracking&gt;</td>
<td>用于在广告素材文件处理点击时跟踪点击</td>
</tr>
<tr>
<td>&lt;CustomClick&gt;</td>
<td>元素用于跟踪线性广告素材中的其他非点击点击次数</td>
</tr>
</tbody>
</table>
<ul>
<li>TrackingEvents Element（可选）</li>
</ul>
<p>&lt;TrackingEvents&gt;元素可能包含多个&lt;Tracking&gt;元素，&lt;Tracking&gt;元素的<strong>event</strong>属性标识需跟踪的事件类型。<br>在VAST response中的示例如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Tracking</span> <span class="attr">event</span> =<span class="string">"firstQuartile"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">[CDATA</span> [<span class="attr">http:</span>//<span class="attr">adserver.com</span>/<span class="attr">firstQuartilePixel.gif</span>]&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Tracking</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">TrackingEvents</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>若Tracking事件存在，当在线性广告素材的播放中发生相应的事件时，视频播放器发送对应的请求URI。</p>
<p>Tracking事件类型 event可取的值如下：</p>
<table>
<thead>
<tr>
<th>event value</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>creativeView</td>
<td>不要与展示混淆，此事件表示已查看广告的单个广告素材部分。展示指示广告的第一帧显示；然而，广告可能由多个广告素材或广告素材组成，这些广告素材并不是在所有平台上都能展示。</td>
</tr>
<tr>
<td>start</td>
<td>此事件用于指示广告中的单个广告素材已加载，开始播放。与creativeView一样，此事件是跟踪广告素材回放的另一种方式。</td>
</tr>
<tr>
<td>firstQuartile</td>
<td>素材至少播放了25%</td>
</tr>
<tr>
<td>midpoint</td>
<td>素材至少播放了50%</td>
</tr>
<tr>
<td>thirdQuartile</td>
<td>素材至少播放了75%</td>
</tr>
<tr>
<td>complete</td>
<td>素材以正常速度播放完毕</td>
</tr>
<tr>
<td>mute</td>
<td>用户对素材静音</td>
</tr>
<tr>
<td>unmute</td>
<td>用户对素材取消静音</td>
</tr>
<tr>
<td>pause</td>
<td>用户暂停了素材的播放</td>
</tr>
<tr>
<td>rewind</td>
<td>用户回放了素材</td>
</tr>
<tr>
<td>resume</td>
<td>用户停止或暂停素材后，又重新开始播放素材</td>
</tr>
<tr>
<td>fullscreen</td>
<td>用户点击了全屏播放按钮</td>
</tr>
<tr>
<td>exitFullscreen</td>
<td>用户退出全屏播放，回到初始大小</td>
</tr>
<tr>
<td>expand</td>
<td>用户点击某个按钮展开素材</td>
</tr>
<tr>
<td>collapse</td>
<td>用户点击某个按钮将素材缩小到初始大小</td>
</tr>
<tr>
<td>acceptInvitationLinear</td>
<td>用户激活启动了素材的附加部分，此事件用于线性广告。</td>
</tr>
<tr>
<td>closeLinear</td>
<td>用户点击了素材上的关闭按钮，此事件用于线性广告</td>
</tr>
<tr>
<td>skip</td>
<td>用户点击了跳过按钮以跳过广告素材，这与用于关闭按钮不同。</td>
</tr>
<tr>
<td>progress</td>
<td>广告素材以正常速度播放持续时间等于或大于属性中的offset值。offset可以是格式为HH:MM:SS或HH:MM:SS.mmm或格式为n％的百分比值。可以使用多个不同的值来跟踪线性广告素材时间轴上的多个进度点。</td>
</tr>
</tbody>
</table>
<ul>
<li><p>AdParameters Element（可选）</p>
<p>一些广告投放系统可能希望在首次初始化时将一些数据发送到媒体文件。例如，媒体文件可以使用这些数据识别展示哪个素材，请求哪个服务器等。</p>
</li>
</ul>
<p>Linear Ad素材的可选&lt;AdParameters&gt;元素可启用此数据交换，属性xmlEncoded可用于标识&lt;AdParameters&gt;参数是否为xmldencoded。如果为true，则视频播放器必须使用xml来解码数据。</p>
<p>VAST中的&lt;AdParameters&gt;值应该包装在CDATA块中。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>xmlEncoded</td>
<td>布尔值，用于标识&lt;AdParameters&gt;参数是否为xmldencoded </td>
</tr>
</tbody>
</table>
<h2 id="Skippable-Linear-Creative"><a href="#Skippable-Linear-Creative" class="headerlink" title="Skippable Linear Creative"></a>Skippable Linear Creative</h2><p>广告服务器必须在&lt;Linear&gt;元素中包含skipoffset属性，skipoffset值的格式为HH:MM:SS或HH:MM:SS.mmm或格式为n％的百分比的时间值。skipoffset中的.mmm值表示毫秒，是可选的。此skipoffset值表示在广告素材开始播放后应该提供跳过控件的时间。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">**Time skipoffset：以下示例提供了一个skipoffset：05秒。** </span><br><span class="line"><span class="tag">&lt;<span class="name">Creative</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Linear</span> <span class="attr">skipoffset</span>=<span class="string">“00:00:05”</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">Linear</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br><span class="line"></span><br><span class="line">**百分比skipoffset：以下示例提供10％的skipoffset。** </span><br><span class="line"><span class="tag">&lt;<span class="name">Creative</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Linear</span> <span class="attr">skipoffset</span>=<span class="string">“10％”</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">Linear</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>广告的视频播放器必须在可接受的skipoffset值指示的时间内在界面中提供“跳过”按钮。</p>
<h3 id="skip-event"><a href="#skip-event" class="headerlink" title="skip event"></a>skip event</h3><p>若用户跳过素材，发送此事件跟踪URI</p>
<p>示例：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tracking</span> <span class="attr">event</span> =<span class="string">“skip”</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">[CDATA</span> [<span class="attr">http:</span>//<span class="attr">ad.server.com</span>/<span class="attr">skip</span>/<span class="attr">dot.gif</span>]]&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Tracking</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">TrackingEvents</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>skip事件不应该与close事件混淆，只有当用户采取行动关闭播放器或窗口时，才会触发close事件。 而skip事件在点击跳过控件时被触发。</p>
</blockquote>
<h3 id="progress-event"><a href="#progress-event" class="headerlink" title="progress event"></a>progress event</h3><p>进度事件包括提供时间值（HH：MM：SS或HH：MM：SS.mmm）或百分比（n％）值的偏移属性，表示记录视图的时间。</p>
<p>以下示例提供了在线性广告素材播放至少30秒后触发的进度事件的跟踪URI。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Tracking</span> <span class="attr">event</span> = <span class="string">"progress"</span> <span class="attr">offset</span> =<span class="string">"00:00:30.000"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">[CDATA</span> [<span class="attr">http:</span>//<span class="attr">ad.server.com</span>/<span class="attr">view.gif</span>]]&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Tracking</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">TrackingEvents</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>视频播放器可以使用具有不同offset值的多个进度事件来跟踪线性广告素材时间轴中的不同时间点。</p>
<p>当进度offset设置为25％，50％，75％和100％时虽然与四分位数跟踪事件（即25%，50%，75%，100%）相同的时间点，但是四分位数跟踪事件仍需要单独支持。</p>
<h2 id="Companion-Ad"><a href="#Companion-Ad" class="headerlink" title="Companion Ad"></a>Companion Ad</h2><p>一般结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">…</span><br><span class="line">    <span class="tag">&lt;<span class="name">InLine</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Creatives</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Creative</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Linear</span>&gt;</span></span><br><span class="line">                    …</span><br><span class="line">                <span class="tag">&lt;/<span class="name">Linear</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Creative</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">CompanionAds</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Companion</span>&gt;</span></span><br><span class="line">                        …</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Companion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">CompanionAds</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Creatives</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">InLine</span>&gt;</span></span><br><span class="line">…</span><br></pre></td></tr></table></figure>
<h3 id="CompanionAds-element"><a href="#CompanionAds-element" class="headerlink" title="CompanionAds element"></a>CompanionAds element</h3><p>&lt;CompanionAds&gt;元素可能包含一个或多个Companion ad伴随广告，每个Companion都在其自己的&lt;Companion&gt;元素中。</p>
<h4 id="CompanionAds的属性"><a href="#CompanionAds的属性" class="headerlink" title="CompanionAds的属性"></a>CompanionAds的属性</h4><p>require属性决定了在提供多个Companions时要显示哪个Companion广告素材的信息，以及是否可以在没有其Companion广告素材的情况下显示广告。</p>
<p>require属性具有三个value:</p>
<table>
<thead>
<tr>
<th>value</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>all</td>
<td>视频播放器必须尝试显示所提供的所有&lt;Companion&gt;元素的内容;如果无法显示所有Companion广告素材，则应忽略广告，并使用&lt;Error&gt;元素通知广告服务器</td>
</tr>
<tr>
<td>any</td>
<td>视频播放器必须尝试显示来自至少一个所提供的&lt;Companion&gt;元素的内容（即显示具有最适合页面的尺寸的元素）;如果无法显示任何Companion广告素材，则应忽略广告，并使用&lt;Error&gt;元素通知广告服务器</td>
</tr>
<tr>
<td>none</td>
<td>视频播放器可能选择不显示任何Companion广告素材，但不限制这样做;当广告客户更喜欢使用或不使用Companion广告素材显示主广告时，广告服务器可以使用此选项</td>
</tr>
</tbody>
</table>
<h3 id="Companion-Element"><a href="#Companion-Element" class="headerlink" title="Companion Element"></a>Companion Element</h3><h4 id="Companion的属性"><a href="#Companion的属性" class="headerlink" title="Companion的属性"></a>Companion的属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>广告素材所对应的的展示位置广告位的像素宽度</td>
<td>是</td>
</tr>
<tr>
<td>height</td>
<td>广告素材所针对的展示位置广告位的像素高度</td>
<td>是</td>
</tr>
<tr>
<td>id</td>
<td>一个可选择的广告素材的标识符</td>
<td>否</td>
</tr>
<tr>
<td>assetWidth</td>
<td>广告素材的像素宽度</td>
<td>否</td>
</tr>
<tr>
<td>assetHeight</td>
<td>广告素材的像素高度</td>
<td>否</td>
</tr>
<tr>
<td>expandedWidth</td>
<td>广告素材在可拓展条件下的最大像素宽度</td>
<td>否</td>
</tr>
<tr>
<td>expandedHeight</td>
<td>广告素材在可拓展条件下的最大像素高度</td>
<td>否</td>
</tr>
<tr>
<td>apiFramework</td>
<td>与广告素材进行通信所需的API（如果有）</td>
<td>否</td>
</tr>
<tr>
<td>adSlotID</td>
<td>用于在发布商的页面上标识所需的展示位置;应在发布商和广告商之间讨论要使用的值</td>
<td>否</td>
</tr>
<tr>
<td>required</td>
<td>“all,” “any,” or “none”用于标识广告中是否应显示（以及多少）随播广告素材</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>每个&lt;Companion&gt;元素必须使用width和height属性以像素为单位指定预期的显示放置尺寸。这些尺寸应反映目标网页上展示位置的尺寸，以便视频播放器可以使用它们将Companion与页面上正确的广告位相匹配。</p>
</blockquote>
<h4 id="Companion-Resource-Elements"><a href="#Companion-Resource-Elements" class="headerlink" title="Companion Resource Elements"></a>Companion Resource Elements</h4><p>每个&lt;Companion&gt;元素 <strong>必须至少指定一个</strong> 资源文件，该文件可以是以下之一：&lt;StaticResource&gt;，&lt;IFrameResource&gt;或&lt;HTMLResource&gt;。</p>
<p>使用的资源标识广告素材文件的格式，并为文件提供CDATA-wrapped URI</p>
<p>&lt;Companion&gt;下有三个标签 <strong>&lt;StaticResource&gt;，&lt;IFrameResource&gt;，&lt;HTMLResource&gt;</strong></p>
<table>
<thead>
<tr>
<th>标签</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;StaticResource&gt;*</td>
<td>描述非html广告素材，其中creativeType的属性用于标识广告素材资源平台</td>
</tr>
<tr>
<td>&lt;IFrameResource&gt;</td>
<td>描述可以在发布者页面上的Iframe中显示的HTML页面的资源</td>
</tr>
<tr>
<td>&lt;HTMLResource&gt;</td>
<td>描述要直接插入发布者的HTML页面代码中的HTML代码的“片段”</td>
</tr>
</tbody>
</table>
<ul>
<li>&lt;StaticResource&gt; 具有 <strong>type</strong> 的属性，其属性值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>value</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Image/gif, image/jpeg, image/png</td>
<td>使用HTML标记&lt;img&gt;和资源URI作为src属性显示。</td>
</tr>
<tr>
<td>Application/x-javascript</td>
<td>使用HTML标记&lt;script&gt;和资源URI作为src属性显示</td>
</tr>
<tr>
<td>application/x-shockwave-flash</td>
<td>使用flash播放器显示</td>
</tr>
</tbody>
</table>
<blockquote>
<p>VAST 3.0允许在一个&lt;Companion&gt;元素中使用多个资源文件。视频播放器应轮询每个&lt;Companion&gt;元素中的资源文件，以找到要显示的最合适的文件。</p>
</blockquote>
<p>多个resource files 的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CompanionAds</span> <span class="attr">required</span>=<span class="string">”all”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Companion</span> <span class="attr">id</span>=<span class="string">1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StaticResource</span> <span class="attr">type</span>=<span class="string">”image/jpg”</span>&gt;</span></span><br><span class="line">            &lt;![CDATA[http://AdServer.com/companion1.jpg]&gt;</span><br><span class="line">        &lt;/StaticResource&gt;</span><br><span class="line">        &lt;HTMLResource&gt;</span><br><span class="line">            &lt;!CDATA[http://AdServer.com/companion1.html]&gt;</span><br><span class="line">        &lt;/HTMLResource&gt;</span><br><span class="line">    &lt;/Companion&gt;</span><br><span class="line">    &lt;Companion id=2&gt;</span><br><span class="line">        &lt;StaticResource type=”image/jpg”&gt;</span><br><span class="line">            &lt;![CDATA[http://AdServer.com/companion2.jpg]&gt;</span><br><span class="line">        &lt;/StaticResource&gt;</span><br><span class="line">        &lt;HTMLResource&gt;</span><br><span class="line">            &lt;!CDATA[http://AdServer.com/companion2.html]&gt;</span><br><span class="line">        &lt;/HTMLResource&gt;</span><br><span class="line">    &lt;/Companion&gt;</span><br><span class="line">&lt;/CompanionAds&gt;</span><br></pre></td></tr></table></figure>
<h4 id="其他-Companion-Elements"><a href="#其他-Companion-Elements" class="headerlink" title="其他 Companion Elements"></a>其他 Companion Elements</h4><table>
<thead>
<tr>
<th>标签</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;AltText&gt;</td>
<td>用于提供当用户将鼠标悬停在Companion广告素材上时显示的图像说明</td>
<td>否</td>
</tr>
<tr>
<td>&lt;CompanionClickThrough&gt;</td>
<td>当用户点击广告时，为与广告客户相关的网页提供网址;仅对缺少提供点击的技术的静态资源文件来说是所必需的</td>
<td>否</td>
</tr>
<tr>
<td>&lt;CompanionClickTracking&gt;</td>
<td>用于跟踪Companion点击次数</td>
<td>否</td>
</tr>
<tr>
<td>&lt;TrackingEvents&gt;</td>
<td><tracking>元素的容器，用于跟踪由event属性定义的已定义指标</tracking></td>
<td>否</td>
</tr>
<tr>
<td>&lt;AdParameters&gt;</td>
<td>用于将信息传递给广告素材单元;包括属性xmlEncoded，该属性是一个布尔值，用于标识<adparameters>值是否为xml编码</adparameters></td>
<td>否</td>
</tr>
</tbody>
</table>
<h2 id="NonLinear-Ad"><a href="#NonLinear-Ad" class="headerlink" title="NonLinear Ad"></a>NonLinear Ad</h2><p>非线性广告（也称为“叠加”）不会中断视频内容;它<br>在视频内容播放时显示，通常沿视频内容显示区域的底部。一个或多个&lt;NonLinear&gt;广告可以包含在&lt;NonLinearAds&gt;元素中</p>
<h3 id="NonLinearAds-element"><a href="#NonLinearAds-element" class="headerlink" title="NonLinearAds element"></a>NonLinearAds element</h3><p>&lt;NonLinearAds&gt;下有&lt;NonLinear&gt;和&lt;TrackingEvents&gt;</p>
<h4 id="NonLinear-element"><a href="#NonLinear-element" class="headerlink" title="NonLinear element"></a>NonLinear element</h4><h5 id="NonLinear-属性"><a href="#NonLinear-属性" class="headerlink" title="NonLinear 属性"></a>NonLinear 属性</h5><table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>广告素材所对应的的展示位置广告位的像素宽度</td>
<td>是</td>
</tr>
<tr>
<td>height</td>
<td>广告素材所针对的展示位置广告位的像素高度</td>
<td>是</td>
</tr>
<tr>
<td>id</td>
<td>一个可选择的广告素材的标识符</td>
<td>否</td>
</tr>
<tr>
<td>expandedWidth</td>
<td>广告素材在可拓展条件下的最大像素宽度</td>
<td>否</td>
</tr>
<tr>
<td>expandedHeight</td>
<td>广告素材在可拓展条件下的最大像素高度</td>
<td>否</td>
</tr>
<tr>
<td>scalable</td>
<td>一个布尔值，用于标识在调整视频播放器大小时，广告素材是否可以相对于视频播放器缩放到新维度</td>
<td>否</td>
</tr>
<tr>
<td>maintainAspectRatio</td>
<td>一个布尔值，用于标识在调整视频播放器大小时将广告缩放到新维度时是否应保留广告素材的宽高比</td>
<td>否</td>
</tr>
<tr>
<td>minSuggestedDuration</td>
<td>应显示广告素材的最短建议持续时间，duration的格式为HH：MM：SS.mmm（其中.mmm以毫秒为单位，是可选的）</td>
<td>否</td>
</tr>
<tr>
<td>apiFramework</td>
<td>与广告素材进行通信所需的API（如果有）</td>
<td>否</td>
</tr>
</tbody>
</table>
<h5 id="NonLinear-Resource-Elements"><a href="#NonLinear-Resource-Elements" class="headerlink" title="NonLinear Resource Elements"></a>NonLinear Resource Elements</h5><p>和&lt;Companion&gt;类似，一个&lt;NonLinear&gt;可以有<strong>一个或多个</strong>resource element</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;StaticResource&gt;*</td>
<td>描述非html广告素材，其中creativeType的属性用于标识广告素材资源平台</td>
</tr>
<tr>
<td>&lt;IFrameResource&gt;</td>
<td>描述可以在发布者页面上的Iframe中显示的HTML页面的资源</td>
</tr>
<tr>
<td>&lt;HTMLResource&gt;</td>
<td>描述要直接插入发布者的HTML页面代码中的HTML代码的“片段”</td>
</tr>
</tbody>
</table>
<ul>
<li>&lt;StaticResource&gt; 具有 <strong>type</strong> 的属性，其属性值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>value</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Image/gif, image/jpeg, image/png</td>
<td>使用HTML标记&lt;img&gt;和资源URI作为src属性显示。</td>
</tr>
<tr>
<td>Application/x-javascript</td>
<td>使用HTML标记&lt;script&gt;和资源URI作为src属性显示</td>
</tr>
<tr>
<td>application/x-shockwave-flash</td>
<td>使用flash播放器显示</td>
</tr>
</tbody>
</table>
<h5 id="其他-NonLinear-Elements"><a href="#其他-NonLinear-Elements" class="headerlink" title="其他 NonLinear Elements"></a>其他 NonLinear Elements</h5><table>
<thead>
<tr>
<th>标签</th>
<th>意义</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;NonLinearClickThrough&gt;</td>
<td>当用户点击广告时，为与广告客户相关的网页提供网址;仅对缺少提供点击的技术的静态资源文件来说是所必需的</td>
<td>否</td>
</tr>
<tr>
<td>&lt;NonLinearClickTracking&gt;</td>
<td>NonLinear广告素材中，此元素用于在广告素材处理点击的情况下跟踪非线性点击，例如在使用类似VPAID的API时</td>
<td>否</td>
</tr>
<tr>
<td>&lt;AdParameters&gt;</td>
<td>用于将信息传递给Creative广告素材单元;包括属性xmlEncoded，该属性是一个布尔值，用于标识&lt;AdParameters&gt;值是否为xml编码</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意，&lt;TrackingEvents&gt;与&lt;NonLinear&gt;元素处于同一级别。此结构意味着跟踪元素可能应用于多个&lt;NonLinear&gt;元素。通常，视频播放器仅选择一个&lt;NonLinear&gt;元素来显示。可以提供其他&lt;NonLinear&gt;元素以提供多种格式供视频播放器选择。但是，如果显示多个&lt;NonLinear&gt;广告素材，则必须在NonLinear广告素材中的一个或两个中发生关联事件时触发跟踪事件</p>
</blockquote>
<h3 id="NonLinear-Tracking-Events"><a href="#NonLinear-Tracking-Events" class="headerlink" title="NonLinear Tracking Events"></a>NonLinear Tracking Events</h3><p>示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TrackingEvents</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tracking</span> <span class="attr">event</span>=<span class="string">”firstQuartile”</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[http://adserver.com/firstQuartilePixel.gif]&gt;</span><br><span class="line">    &lt;/Tracking&gt;</span><br><span class="line">&lt;/TrackingEvents&gt;</span><br></pre></td></tr></table></figure>
<p>Tracking事件类型 event可取的值如下：</p>
<table>
<thead>
<tr>
<th>event value</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>creativeView</td>
<td>不要与展示混淆，此事件表示已查看广告的单个广告素材部分。impression指示广告的第一帧显示；然而，广告可能由多个广告素材或广告素材组成，这些广告素材并不是在所有平台上都能展示。</td>
</tr>
<tr>
<td>start</td>
<td>此事件用于指示广告中的单个广告素材已加载，开始播放。与creativeView一样，此事件是跟踪广告素材回放的另一种方式。</td>
</tr>
<tr>
<td>firstQuartile</td>
<td>素材至少播放了25%</td>
</tr>
<tr>
<td>midpoint</td>
<td>素材至少播放了50%</td>
</tr>
<tr>
<td>thirdQuartile</td>
<td>素材至少播放了75%</td>
</tr>
<tr>
<td>complete</td>
<td>素材以正常速度播放完毕</td>
</tr>
<tr>
<td>mute</td>
<td>用户对素材静音</td>
</tr>
<tr>
<td>unmute</td>
<td>用户对素材取消静音</td>
</tr>
<tr>
<td>pause</td>
<td>用户暂停了素材的播放</td>
</tr>
<tr>
<td>rewind</td>
<td>用户回放了素材</td>
</tr>
<tr>
<td>resume</td>
<td>用户停止或暂停素材后，又重新开始播放素材</td>
</tr>
<tr>
<td>fullscreen</td>
<td>用户点击了全屏播放按钮</td>
</tr>
<tr>
<td>exitFullscreen</td>
<td>用户退出全屏播放，回到初始大小</td>
</tr>
<tr>
<td>expand</td>
<td>用户点击某个按钮展开素材</td>
</tr>
<tr>
<td>collapse</td>
<td>用户点击某个按钮将素材缩小到初始大小</td>
</tr>
<tr>
<td>acceptInvitation</td>
<td>用户激活了一个控件，该控件启动了广告素材的其他部分。</td>
</tr>
<tr>
<td>close</td>
<td>用户点击了素材上的关闭按钮</td>
</tr>
<tr>
<td>progress</td>
<td>在正常速度下播放的广告素材等于或大于偏移量的附加属性中提供的值。偏移值可以是格式为HH：MM：SS或HH：MM：SS.mmm的时间或格式为n％的百分比值。具有不同值的多个进度事件可用于跟踪线性广告素材时间轴中的多个进度点。</td>
</tr>
</tbody>
</table>
<h2 id="Ad-Pods"><a href="#Ad-Pods" class="headerlink" title="Ad Pods"></a>Ad Pods</h2><p>视频播放器必须在显示 <strong>几个Ad Pod</strong>或 <strong>一个或多个独立广告</strong>之间进行选择。在VAST响应中，Pod的三个元素不需要以正确的顺序或背靠背显示，但视频播放器必须按顺序查找和显示Pod广告。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VAST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span> <span class="attr">sequence</span>=<span class="string">1</span>&gt;</span>…<span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span> <span class="attr">sequence</span>=<span class="string">2</span>&gt;</span>…<span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span> <span class="attr">sequence</span>=<span class="string">3</span>&gt;</span>…<span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ad</span>&gt;</span>…<span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Ad</span>&gt;</span>…<span class="tag">&lt;/<span class="name">Ad</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VAST</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果Ad Pod是跟随VAST &lt;Wrapper&gt;的结果，则会在Pod中播放每个广告时调用VAST &lt;Wrapper&gt;中的相同impression和tracking URIs。</p>
<p>如果来自Sercondary Ad Server的“no ad”响应后，Pod中的广告无法播放，则视频播放器应替换响应中未播放的独立广告</p>
<h2 id="VAST的一般要求"><a href="#VAST的一般要求" class="headerlink" title="VAST的一般要求"></a>VAST的一般要求</h2><p>在VAST 3.0中，无论支持哪种VAST广告格式，都必须支持VAST技术的三个常规领域。 这三个技术领域是：</p>
<ul>
<li>VAST Wrapper Ads（广告服务器重定向）：在涉及多个广告服务系统时实现跨平台互操作性。</li>
<li>Error Reporting：可以改善整个行业的诊断，减少错误并改善用户和相关系统的整体视频广告体验</li>
<li>Industry Icon Support：支持OBA自我监管和其他需要使用图标的计划。</li>
</ul>
<h3 id="为广告服务器重定向使用VAST-Wrapper-Ads"><a href="#为广告服务器重定向使用VAST-Wrapper-Ads" class="headerlink" title="为广告服务器重定向使用VAST Wrapper Ads"></a>为广告服务器重定向使用VAST Wrapper Ads</h3><h4 id="Wrapper结构"><a href="#Wrapper结构" class="headerlink" title="Wrapper结构"></a>Wrapper结构</h4><p>&lt;Wrapper&gt;下的标签</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;AdSystem&gt;</td>
<td>为VAST Wrapper响应提供服务的系统的名称;  属性version可用于标识系统使用的VAST版本</td>
<td>是</td>
</tr>
<tr>
<td>&lt;Impression&gt;</td>
<td>包含显示内联广告时请求的跟踪资源的URI</td>
<td>是</td>
</tr>
<tr>
<td>&lt;VASTAdTagURI&gt;</td>
<td>将URI重定向到下一个VAST响应</td>
<td>是</td>
</tr>
<tr>
<td>&lt;Creatives&gt;</td>
<td>包含描述包装广告素材的广告素材元素</td>
<td>否</td>
</tr>
<tr>
<td>&lt;Error&gt;</td>
<td>在Wrapper本身，任何后续Wrappers或最终内联广告中发生错误时请求的跟踪资源的URI</td>
</tr>
<tr>
<td>&lt;Extentions&gt;</td>
<td>自定义XML扩展;  使用时，自定义元素应嵌套在&lt;Extensions&gt;，用于帮助将自定义XML元素与VAST元素分开</td>
<td>否</td>
</tr>
</tbody>
</table>
<p><extentions>示例：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Extensions</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomXML</span>&gt;</span>…<span class="tag">&lt;/<span class="name">CustomXML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Extensions</span>&gt;</span></span><br></pre></td></tr></table></figure></extentions></p>
<h4 id="Wrapper属性-包装链和多广告管理"><a href="#Wrapper属性-包装链和多广告管理" class="headerlink" title="Wrapper属性 包装链和多广告管理"></a>Wrapper属性 包装链和多广告管理</h4><p>&lt;Wrapper&gt;属性 ：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>followAdditonalWrappers</td>
<td>一个布尔值，用于标识在请求的VAST响应之后是否允许后续包装。如果为false，则应忽略任何接收的Wrappers（即不是Inline VAST响应）。 否则，应接受收到的VAST Wrappers</td>
</tr>
<tr>
<td>allowMultipleAds</td>
<td>一个布尔值，用于标识在请求的VAST响应中是否允许多个广告。如果为true，则允许使用Pod和独立广告。如果为假，则仅允许所请求的VAST响应中的第一个独立Ad（即，Ad没有序列值）。</td>
</tr>
<tr>
<td>fallbackOnNoAd</td>
<td>一个布尔值，提供在请求的VAST响应未返回广告时使用可用广告的说明。如果为true，则视频播放器应从可用的任何独立广告中进行选择。如果为false且Wrapper表示Pod中的广告，则视频播放器应移至Pod中的下一个广告; 否则，视频播放器可以自行决定是否进行无广告回复。</td>
</tr>
</tbody>
</table>
<ul>
<li>无限循环<blockquote>
<p>当服务广告涉及一系列Wrappers时，无限循环是可能的，其中一系列Wrappers永远不会导致最终的InLine VAST响应。 可以对视频播放器进行编程以检测这些循环并做出相应的反应。</p>
</blockquote>
</li>
</ul>
<h4 id="Wrapper下的Creative"><a href="#Wrapper下的Creative" class="headerlink" title="Wrapper下的Creative"></a>Wrapper下的Creative</h4><p>Wrapper中的创意元素通常用于收集在Wrapper之后提供的InLine广告素材的跟踪信息。</p>
<p>如果&lt;Creatives&gt;元素包含在Wrapper中，则可能包含一个或多个&lt;Creative&gt;元素（<strong>但不是必需的;可以使用空的&lt;Creatives&gt;元素</strong>）。</p>
<p>每个&lt;Creative&gt;元素<strong>最多可包含以下一个</strong>：&lt;Linear&gt;，&lt;NonLinearAds&gt;或&lt;CompanionAds&gt;。Wrapper Ad与InLine Ad 的Creative是不同的。</p>
<h5 id="Wrapper下的Linear-Creative"><a href="#Wrapper下的Linear-Creative" class="headerlink" title="Wrapper下的Linear Creative"></a>Wrapper下的Linear Creative</h5><p>Wrapper Linear广告素材与Inline广告素材之间最重要的区别在于，<strong>Wrapper Linear广告素材不存在任何媒体文件</strong></p>
<p>包装线性广告素材中允许的唯一元素是 <strong>&lt;VideoClicks&gt;</strong> 和 <strong>&lt;TrackingEvents&gt;</strong> 。</p>
<p>这些跟踪元素可以在包装器中收集跟踪数据，以便在包装器之后提供的内联线性广告素材中发生的任何事件。</p>
<h4 id="Wrapper下的NonLinear-Creative"><a href="#Wrapper下的NonLinear-Creative" class="headerlink" title="Wrapper下的NonLinear Creative"></a>Wrapper下的NonLinear Creative</h4><p>每个&lt;NonLinear&gt; Wrapper元素可以用于跟踪目的，用于跟踪Wrapper之后服务的Inline NonLinear响应。</p>
<p>Wrapper &lt;Creative&gt;元素最多可包含一个&lt;NonLinearAds&gt;元素。 可以包括<strong>一个或多个可选</strong>的 <strong>&lt;NonLinear&gt;</strong> 和 <strong>&lt;TrackingEvents&gt;</strong> 元素。</p>
<p>在Wrapper中，&lt;NonLinear&gt;下不包含&lt;NonLinearClickthrough&gt;元素，因为只能在Inline响应中打开指定的网页。 </p>
<p>Wrapper中的&lt;NonLinearClickTracking&gt;元素用于跟踪Inline NonLinear广告素材中的点击活动。</p>
<blockquote>
<p>VAST 3.0中的Wrapper格式中已经删除NonLinear资源元素。</p>
</blockquote>
<h4 id="Wrapper下的Companion-Creative"><a href="#Wrapper下的Companion-Creative" class="headerlink" title="Wrapper下的Companion Creative"></a>Wrapper下的Companion Creative</h4><p>与Linear和NonLinear广告素材不同，Companion广告素材可以直接在VAST Wrapper响应中提供，但也可用于跟踪目的。</p>
<p>当Companion广告素材未包含在Wrapper响应中时，只需要提供Companion Tracking Events（可选）。用于跟踪目的的Wrapper响应中的Companion的结构包括&lt;CompanionClickThrough&gt;,&lt;CompanionClickTracking&gt;,&lt;TrackingEvents&gt;</p>
<p>直接在Wrapper中为Companion广告素材提供服务的VAST Wrapper响应的结构与Inline VAST响应的结构相同</p>
<p>当视频播放器显示直接在&lt;Wrapper&gt;元素中提供的广告素材的伴随广告时，视频播放器应跟踪伴随广告，就像跟踪&lt;InLine&gt;元素中提供的广告一样。</p>
<ul>
<li>Wrapper冲突管理和优先级</li>
</ul>
<p>当Companion广告素材直接包含在Wrapper响应中时，可能会发生冲突。在VAST广告中，无论是使用多个Wrappers还是在一个Inline响应中，所有提供的广告素材都应该是同一个广告素材概念的一部分，并且视频播放器应该尝试显示响应中呈现的所有广告素材（或响应）。但是，当发生冲突时，视频播放器应该支持<strong>最接近Inline响应的广告素材</strong>。</p>
<p>例如，如果Wrapper包含Companion广告素材而Inline响应也包含Companion广告素材，则应选择Inline响应中的Companion广告素材（除非可以显示两个广告素材而不会发生冲突）。</p>
<p>如果任何Companion广告素材没有Inline响应，但两个或多个Wrappers包含Companion广告素材，则应该优先选择最接近Inline响应的Wrapper广告素材。</p>
<h3 id="Error-Reporting"><a href="#Error-Reporting" class="headerlink" title="Error Reporting"></a>Error Reporting</h3><p>&lt;Error&gt;元素使视频播放器能够在无法投放广告时向广告服务器提供反馈。 </p>
<p>在VAST 3.0中，提供了详细的错误代码和格式规范，以便为更好的广告服务诊断启用详细的错误记录。</p>
<p>提供更详细的错误代码可以实现更强大的诊断功能。如果广告服务器可以收集有关无法提供广告或特定广告素材的详细信息，则可以改进其系统以减少错误。</p>
<p>&lt;Error&gt;元素是嵌套在&lt;InLine&gt;或&lt;Wrapper&gt;元素中的<strong>可选元素</strong>。 它用于跟踪广告的错误。 作为包装广告链一部分的内联广告的错误将为用于投放内联广告的每个包装器产生错误。</p>
<p>在根VAST级别也提供&lt;Error&gt;元素，主要用于报告“no Ad”响应。</p>
<h4 id="Error-element"><a href="#Error-element" class="headerlink" title="Error element"></a>Error element</h4><p>&lt;Error&gt;元素包含一个为错误提供跟踪资源的URI。 当视频播放器无法显示广告时，将会调用该error‐tracking resource</p>
<p>示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">InLine</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line">    <span class="tag">&lt;<span class="name">Error</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[http://adserver.com/error.gif]&gt;</span><br><span class="line">    &lt;/Error&gt;</span><br><span class="line">    …</span><br><span class="line">&lt;/InLine&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Video-Player-相关细节"><a href="#Video-Player-相关细节" class="headerlink" title="Video Player 相关细节"></a>Video Player 相关细节</h3><p>如果在尝试加载广告时发生错误并且提供了&lt;Error&gt;元素，则视频播放器必须：</p>
<ul>
<li>使用提供的URI请求错误源文件。</li>
<li>将[ERRORCODE]宏（如果提供）替换为下表中列出的相应错误代码。至少可以使用错误代码900（未识别的错误），但更具体的错误代码有益于所有相关方。如果广告是在一系列包装广告响应之后投放的，则视频播放器还必须返回错误详细信息。</li>
</ul>
<table>
<thead>
<tr>
<th>code</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>XML解析错误。</td>
</tr>
<tr>
<td>101</td>
<td>VAST架构验证错误。</td>
</tr>
<tr>
<td>102</td>
<td>不支持的VAST版本的响应。</td>
</tr>
<tr>
<td>200</td>
<td>Trafficking错误。 视频播放器收到了一种不期望和/或无法显示的广告类型。</td>
</tr>
<tr>
<td>201</td>
<td>视频播放器期望不同的线性度。</td>
</tr>
<tr>
<td>202</td>
<td>视频播放器期望持续时间不同。</td>
</tr>
<tr>
<td>203</td>
<td>视频播放器需要不同的尺寸。</td>
</tr>
<tr>
<td>300</td>
<td>General Wrapper错误。</td>
</tr>
<tr>
<td>301</td>
<td>Wrapper元素中提供的VAST URI超时，或后续Wrapper元素中提供的VAST URI。（URI无法使用或达到视频播放器定义的超时。）</td>
</tr>
<tr>
<td>302</td>
<td>达到了Wrapper限制，由视频播放器定义。 收到的Wrapper响应太多而没有InLine响应。</td>
</tr>
<tr>
<td>303</td>
<td>在一个或多个Wrappers之后没有广告VAST响应。</td>
</tr>
<tr>
<td>400</td>
<td>一般线性错误。 视频播放器无法显示Linear Ad。</td>
</tr>
<tr>
<td>401</td>
<td>文件未找到。 无法从URI中找到Linear / MediaFile。</td>
</tr>
<tr>
<td>402</td>
<td>MediaFile URI超时。</td>
</tr>
<tr>
<td>403</td>
<td>根据MediaFile元素的属性，无法找到此视频播放器支持的MediaFile。</td>
</tr>
<tr>
<td>405</td>
<td>显示MediaFile时出现问题。视频播放器找到了支持类型但无法显示的MediaFile。MediaFile可能包括：不支持的编解码器，与MediaFile @ type不同的MIME类型，不支持的传送方法等。</td>
</tr>
<tr>
<td>500</td>
<td>一般的 NonLinearAds错误。</td>
</tr>
<tr>
<td>501</td>
<td>无法显示NonLinear广告，因为广告素材尺寸与广告素材展示区域不对齐（即广告素材尺寸过大）。</td>
</tr>
<tr>
<td>502</td>
<td>无法获取NonLinearAds / NonLinear资源。</td>
</tr>
<tr>
<td>503</td>
<td>无法找到支持类型的NonLinear资源。</td>
</tr>
<tr>
<td>600</td>
<td>一般的 CompanionAds错误。</td>
</tr>
<tr>
<td>601</td>
<td>无法显示Companion，因为Creative尺寸不适合Companion显示区域（即没有可用空间）。</td>
</tr>
<tr>
<td>602</td>
<td>无法显示Required Companion。</td>
</tr>
<tr>
<td>603</td>
<td>无法获取CompanionAds / Companion资源。</td>
</tr>
<tr>
<td>604</td>
<td>找不到支持类型的Companion资源。</td>
</tr>
<tr>
<td>900</td>
<td>未定义错误。</td>
</tr>
<tr>
<td>901</td>
<td>一般VPAID错误。</td>
</tr>
</tbody>
</table>
<h4 id="no-Ad-response"><a href="#no-Ad-response" class="headerlink" title="no Ad response"></a>no Ad response</h4><p>当广告服务器没有或无法返回广告时，VAST响应应仅包含root</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VAST</span> <span class="attr">version</span>=<span class="string">”3.0”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Error</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[http://adserver.com/noad.gif]&gt;</span><br><span class="line">    &lt;/Error&gt;</span><br><span class="line">&lt;/VAST&gt;</span><br></pre></td></tr></table></figure>
<p>VAST &lt;Error&gt;元素是<strong>可选的</strong>，但如果包含，则视频播放器必须向VAST响应在一个或多个包装广告链后返回空InLine响应时提供的URI发送请求。</p>
<p>如果包含[ERRORCODE]宏，则视频播放器应替换为错误代码303。</p>
<p>除了VAST级别&lt;Error&gt;资源文件之外，在Inline Ad 或任何Wrapper ads中的no Ad response中，视频播放器不需要其他跟踪资源请求。</p>
<h3 id="行业图标支持"><a href="#行业图标支持" class="headerlink" title="行业图标支持"></a>行业图标支持</h3><h4 id="lt-Icons-gt-元素"><a href="#lt-Icons-gt-元素" class="headerlink" title="&lt;Icons&gt;元素"></a>&lt;Icons&gt;元素</h4><p>&lt;Icons&gt;元素在Inline和Wrapper Ad的&lt;Linear&gt;Creative元素下提供。</p>
<p>在VAST响应中表示&lt;Icons&gt;元素的一般过程:</p>
<ol>
<li>video player–&gt;VAST Request–&gt;Ad SErver</li>
<li>Ad Server–&gt;VAST Response–&gt;video player</li>
<li>video player–&gt;Icon Request–&gt;Icon Provider Server</li>
<li>Icon Provider Server–&gt;Icon Response–&gt;video player</li>
</ol>
<h5 id="Icon元素的属性"><a href="#Icon元素的属性" class="headerlink" title="Icon元素的属性"></a>Icon元素的属性</h5><p>&lt;Icons&gt;元素可能包含多个&lt;Icon&gt;元素。 每<br>&lt;Icon&gt;元素包括告诉视频播放器在包含多个图标时如何显示图标的属性，以及当同一个节目的多个图标与广告一起提供时要做什么。</p>
<p>&lt;Icon&gt;属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>program</td>
<td>标识图标支持的行业计划。当多个节目的图标元素在Wrapper广告链中提供时，视频播放器使用此信息仅显示每个节目中的一个图标。</td>
<td>是</td>
</tr>
<tr>
<td>height</td>
<td>要覆盖在广告上的图标的高度（以像素为单位）。</td>
<td>是</td>
</tr>
<tr>
<td>width</td>
<td>要覆盖在广告上的图标的宽度（以像素为单位）。</td>
<td>是</td>
</tr>
<tr>
<td>xPosition</td>
<td>视频播放器用于将图标的左上角相对于广告显示区域（不一定是视频播放器显示区域）放置的水平对齐位置（以像素为单位）。接受的值为“left”，“right”或数值（以像素为单位）。值“0”（零）是广告显示区域的最左侧点。</td>
<td>是</td>
</tr>
<tr>
<td>yPosition</td>
<td>视频播放器用于将图标的左上角相对于广告显示区域（不一定是视频播放器显示区域）放置的垂直对齐位置（以像素为单位）。可接受的值为“top”，“bottom”或数值（以像素为单位）。值“0”（零）是广告显示区域的最高点。</td>
<td>是</td>
</tr>
<tr>
<td>apiFramework</td>
<td>执行Icon广告素材所需的API（如果适用）。</td>
<td>否</td>
</tr>
<tr>
<td>offset</td>
<td>视频播放器应显示图标的开始时间（以HH：MM：SS或HH：MM：SS.mmm格式）。指示的时间偏离首次向用户显示图标的关联&lt;Linear&gt;广告素材时的时间。</td>
<td>否</td>
</tr>
<tr>
<td>duration</td>
<td>视频播放器应显示图标的时间量（以HH：MM：SS或HH：MM：SS.mmm格式）。如果不存在，视频播放器应在广告显示时显示图标，或者直到用户与广告或图标进行互动。</td>
<td>否</td>
</tr>
</tbody>
</table>
<h5 id="Icon元素的构造"><a href="#Icon元素的构造" class="headerlink" title="Icon元素的构造"></a>Icon元素的构造</h5><p>&lt;Icons&gt;元素是一个或多个&lt;Icon&gt;元素的容器。 每个&lt;Icon&gt;元素<strong>必须</strong>包含以下资源元素：&lt;StaticResource&gt;，&lt;IFrameResource&gt;或<br>&lt;HTMLResource&gt;。 resource元素必须包含CDATA元素，该元素包含图标资源文件的URI。 还提供了可选的跟踪元素，以便图标提供者可以跟踪视图和点击。</p>
<p>除此之外，&lt;Icon&gt;元素包括一个<strong>可选</strong>的 <strong>&lt;IconClicks&gt;</strong>，但如果提供，则<strong>必须</strong>包含一个&lt;IconClickThrough&gt;元素，该元素包含信息页面的CDATA包装URI。当用户单击图标时，视频播放器必须在新窗口中加载此页面。如果Icon资源是脚本文件，例如Flash，则资源文件可以处理点击细节，可能不需要使用&lt;IconClicks&gt;元素。</p>
<p>&lt;IconClicks&gt;元素还可以包括用于跟踪点击的一个或多个&lt;IconClickTracking&gt;元素，每个元素具有其自己的CDATA包裹的URI到跟踪资源。当用户单击该图标时，视频播放器会同时在新窗口中加载&lt;IconClickThrough&gt; URI以及任何&lt;IconClickTracking&gt;元素的跟踪资源。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Icon</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line">    <span class="tag">&lt;<span class="name">IconClicks</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">IconClickThrough</span>&gt;</span></span><br><span class="line">            &lt;![CDATA[http://iconprovider.com/info]&gt;</span><br><span class="line">        &lt;/IconClickThrough&gt;</span><br><span class="line">        &lt;IconClickTracking&gt;</span><br><span class="line">            &lt;![CDATA[http://iconprovider.com/click.gif]&gt;</span><br><span class="line">        &lt;/IconClickTracking&gt;</span><br><span class="line">    &lt;/IconClicks&gt;</span><br><span class="line">&lt;/Icon&gt;</span><br></pre></td></tr></table></figure>
<p>要跟踪图标视图（类似于跟踪广告的展示次数），&lt;Icon&gt;元素会提供<strong>可选</strong>的&lt;IconViewTracking&gt;元素。 此元素应包含CDATA包装的URI到跟踪资源，视频播放器必须在图标对用户可见后才能加载。 如果使用&lt;Icon&gt;元素中的offset属性指示时间偏移值，则视频播放器必须暂停加载跟踪资源，直到指示的时间。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Icon</span> [<span class="attr">required</span> <span class="attr">attributes</span>] <span class="attr">offset</span>=<span class="string">”00:00:05”</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line">    <span class="tag">&lt;<span class="name">IconViewTracking</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[http://iconprovider.com/view.gif]&gt;</span><br><span class="line">    &lt;/IconViewTracking&gt;</span><br><span class="line">&lt;/Icon&gt;</span><br></pre></td></tr></table></figure>
<p>上述示例中&lt;IconViewTracking&gt;元素的跟踪资源不应在用户可见带有图标的广告素材发布后5秒内加载。</p>
<h4 id="NonLinear-and-Companion-Ads下的Icons"><a href="#NonLinear-and-Companion-Ads下的Icons" class="headerlink" title="NonLinear and Companion Ads下的Icons"></a>NonLinear and Companion Ads下的Icons</h4><p>&lt;NonLinearAds&gt;和&lt;CompanionAds&gt;的现有VAST元素可以分别包含多个&lt;NonLinear&gt;或&lt;Companion&gt;元素，这使得广告服务器可以在不使用&lt;Icon&gt;元素的情况下包含具有这些广告素材类型的图标。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Creative</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NonLinearAds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NonLinear</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--link to NonLinear creative--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">NonLinear</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NonLinear</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--link to industry icon--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">NonLinear</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NonLinearAds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Creative</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h3><p>有时，广告服务器希望在访问跟踪事件URI时从视频播放器收集元数据。</p>
<p>以下宏使视频播放器能够在访问跟踪URI时向广告服务器提供某些详细信息:</p>
<table>
<thead>
<tr>
<th>Macros</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>[ERRORCODE]</td>
<td>当发生相关错误时，替换为第2.4.2.3节中列出的错误代码之一;保留用于错误跟踪URI。</td>
</tr>
<tr>
<td>[CONTENTPLAYHEAD]</td>
<td>替换为视频内容的当前时间偏移“HH：MM：SS.mmm”。</td>
</tr>
<tr>
<td>[CACHEBUSTING]</td>
<td>替换为随机的8位数字。</td>
</tr>
<tr>
<td>[ASSETURI]</td>
<td>替换为正在播放的广告资源的URI。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>替换宏时，视频播放器必须正确地对RFC 3986定义的任何字符进行百分比编码。<br>VAST不提供有关URI格式的任何指导，但使用[CACHEBUSTING]宏可简化广告投放管理，从而使广告服务器可以轻松搜索并替换相应的宏以进行缓存清除。</p>
</blockquote>
<h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="/2018/07/27/VAST/1.jpg" alt="image"></p>
<p><img src="/2018/07/27/VAST/2.jpg" alt="image"></p>
<p><img src="/2018/07/27/VAST/3.jpg" alt="image"></p>
]]></content>
      <tags>
        <tag>VAST</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos中运行jar包的几种方法</title>
    <url>/2018/01/08/centos-java-run/</url>
    <content><![CDATA[<h1 id="Centos中运行jar包的几种方法"><a href="#Centos中运行jar包的几种方法" class="headerlink" title="Centos中运行jar包的几种方法"></a>Centos中运行jar包的几种方法</h1><p>1.直接运行<br>2.后台运行</p>
<p>以Centos 6.5 为例  </p>
<p>先通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /xxx/xxx</span><br></pre></td></tr></table></figure>
<p>命令 进入jar包项目所在目录</p>
<p>运行通过maven打包好的jar包 </p>
<p>该项目运行在服务器的443端口</p>
<p>demo-0.0.1-SNAPSHOT.jar</p>
<h2 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>当前ssh窗口被锁定 这个期间无法对服务器执行其他命令</p>
<p>若想终止进程 则按下Ctrl+C<br>或者关闭ssh窗口</p>
<h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>后台运行分几种情况</p>
<h3 id="普通后台运行"><a href="#普通后台运行" class="headerlink" title="普通后台运行"></a>普通后台运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar demo-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<p>&amp;代表后台运行 </p>
<p>当前ssh窗口不被锁定</p>
<p>关闭ssh窗口则程序终止</p>
<h3 id="nohup方式"><a href="#nohup方式" class="headerlink" title="nohup方式"></a>nohup方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nohup java -jar demo-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<p>nohup方式会不挂断运行命令</p>
<p>当账户退出或终端关闭时,程序仍在后台运行</p>
<p>当用 nohup 命令执行作业时，该作业的所有输出会默认被重定向到nohup.out的文件中，除非另外指定了输出文件。</p>
<p>若想重新制定输出文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -jar shareniu.jar &gt;temp.txt &amp;</span><br></pre></td></tr></table></figure>
<p>这样输出内容不打印到屏幕上，而是输出到temp.txt文件中。</p>
<p>可通过jobs命令查看后台运行任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jobs</span><br></pre></td></tr></table></figure>
<p>此时会列出所有后台执行的作业</p>
<p>且每个作业前面都有个编号。</p>
<p>[1] xxxx<br>[2] xxxx</p>
<p>若想将某个作业调回前台控制，只需要 fg + 编号即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fg 1</span><br></pre></td></tr></table></figure>
<p>若关闭了ssh窗口 下次重新连接服务器时</p>
<p>可通过查询项目所在端口查询进程PID</p>
<p>再用kill命令杀死进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:443</span><br><span class="line"></span><br><span class="line">kill -9  PID</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>centos</tag>
        <tag>linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo部署后 CNAME文件被自动删除解决方案</title>
    <url>/2017/07/02/hexo-cname/</url>
    <content><![CDATA[<p>把CNAME文件放在source文件里</p>
<p>然后再执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>可发现该文件会自动生成</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Bean生命周期</title>
    <url>/2018/06/23/interview-about-SpringBean-s-lifecycle/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Bean 的生命周期在整个 Spring 中占有很重要的位置，掌握这些可以加深对 Spring 的理解。</p>
<p><img src="/2018/06/23/interview-about-SpringBean-s-lifecycle/1.jpg" alt="image"></p>
<p>Spring上下文Bean的生命周期步骤如下</p>
<p>1、实例化一个Bean－－也就是我们常说的new；</p>
<p>2、按照Spring上下文对实例化的Bean进行配置－－也就是IOC注入；</p>
<p>3、如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是Spring配置文件中Bean的id值</p>
<p>4、如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它Bean，只需在Spring配置文件中配置一个普通的Bean就可以）；</p>
<p>5、如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）；</p>
<p>6、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p>
<p>7、如果Bean实现了InitializingBean接口，Spring将调用他们的after-PropertiesSet()方法。类似地，如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</p>
<p>Bean定义文件中定义init-method<br>  在Bean定义文件中使用“init-method”属性设定方法名称，如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoBean"</span> <span class="attr">class</span>=<span class="string">"com.yangsq.bean.DemoBean"</span> <span class="attr">init-method</span>=<span class="string">"initMethod"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  .......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这时会执行 <strong>initMethod()</strong> 方法，注意，这个方法是不带参数的。</p>
<p>8、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法、；</p>
<p>注：以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。</p>
<p>9、当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用那个其实现的destroy()方法；</p>
<p>10、最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p>
<p>以上10步骤可以作为面试或者笔试的模板，另外我们这里描述的是应用Spring上下文Bean的生命周期，如果应用Spring的工厂也就是BeanFactory的话去掉第5步就Ok了。</p>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>ssm</tag>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>java后端开发实习面经</title>
    <url>/2018/07/21/interview-experience/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>快要大四了，所以趁着暑假赶集找了个java后端开发的实习，面试官非常注重基础，所以把这次面经记录下来以便之后可以补充下缺失的知识。</p>
<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>面试一共4轮 挺久的 几乎聊了一个半小时 </p>
<h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol>
<li>介绍自己</li>
<li>说出三种排序</li>
<li>说一说快排.插排是怎样的</li>
<li>从输入url按回车到获取到页面中间发生了什么</li>
<li>从上个问题我的回答延伸到三次握手的流程</li>
</ol>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol>
<li>介绍自己</li>
<li>写一下二分查找</li>
<li>懂不懂二叉树遍历 然后画了个二叉树让我中序排列</li>
<li>画了一个单项链表怎么快速把链表顺序倒过来</li>
</ol>
<h3 id="三面-cto面"><a href="#三面-cto面" class="headerlink" title="三面 cto面"></a>三面 cto面</h3><ol>
<li>介绍自己</li>
<li>介绍下你简历上的两个项目</li>
<li>挑一个项目来详细说</li>
<li>我在项目里负责什么</li>
<li>又问了一遍二分查找</li>
<li>说说集合类</li>
<li>hashmap的底层结构</li>
<li>知道什么设计模式</li>
<li>然后补充问了下工厂模式</li>
<li>说一下面向对象是个什么东西</li>
<li>面向对象的特点</li>
<li>懂不懂uml</li>
<li>有什么想问他的</li>
</ol>
<h3 id="终面-hr面"><a href="#终面-hr面" class="headerlink" title="终面 hr面"></a>终面 hr面</h3><p>谈一下公司的状况薪资福利什么时候可以入职blabla 等等一些常规问题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过面试发现面试官问的最多的还是基础的知识以及算法数据结构方面的问题。有一些学过的数据结构还有排序算法我都学的不够好所以在面试的时候有点蒙混过关，虽然大体上答出来但总的来说还是比较惭愧当初没有学好。平时玩的广所以自己的广度够深但是深度还远远不够，这次面试甚至都不看你会什么框架，框架的一些实现原理，基本就是盯着你的算法数据结构还有面向对象的思想下手。</p>
<p>总之，革命尚未成功，同志任需努力。</p>
]]></content>
      <tags>
        <tag>TCP</tag>
        <tag>计算机网络</tag>
        <tag>java</tag>
        <tag>面经</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】知名互联网公司Java开发岗面试知识点解析</title>
    <url>/2018/05/22/java-Q-A/</url>
    <content><![CDATA[<blockquote>
<p>内容转载自公众号 Gitchat技术杂谈 <a href="https://mp.weixin.qq.com/s/sca3lbMMqqEuR10Pd5bcDw" target="_blank" rel="noopener">知名互联网公司 Java 开发岗面试知识点解析</a></p>
</blockquote>
<blockquote>
<p>作者：最强青铜杨小强</p>
</blockquote>
<p>天之道，<br>损有余而补不足，<br>是故虚胜实，<br>不足胜有余。</p>
<p>如背景中介绍，作者在一年之内参加过多场面试，应聘岗位均为 Java 开发方向。</p>
<p>在不断的面试中，分类总结了 Java 开发岗位面试中的一些知识点。</p>
<p>主要包括以下几个部分：</p>
<ul>
<li><a href="#Java-基础知识">Java 基础知识</a></li>
<li><a href="#Java-中常见集合">Java 常见集合</a></li>
<li><a href="#高并发编程">高并发编程（JUC 包）</a></li>
<li><a href="#JVM-内存管理">JVM 内存管理</a></li>
<li><a href="#Java-8-相关知识">Java 8 知识点</a></li>
<li><a href="#网络协议相关">网络协议相关</a></li>
<li><a href="#数据库知识点">数据库相关</a></li>
<li><a href="#框架相关知识">MVC 框架相关</a></li>
<li><a href="#大数据相关知识">大数据相关</a></li>
<li><a href="#Linux-常见命令">Linux 命令相关</a><br>面试，是大家从学校走向社会的第一步。</li>
</ul>
<p>互联网公司的校园招聘，从形式上说，面试一般分为 2-3 轮技术面试 +1 轮 HR 面试。</p>
<p>但是一些公司确实是没有 HR 面试的，直接就是三轮技术面。</p>
<p>技术面试中，面试官一般会先就你所应聘的岗位进行相关知识的考察，也叫基础知识和业务逻辑面试。</p>
<p>只要你回答的不是特别差，面试官通常会说：“咱们写个代码吧”，这个时候就开始了算法面试。</p>
<p>也就是说，一轮技术面试 = 基础知识和业务逻辑面试 + 算法面试。</p>
<p>关于算法面试的总结，各位可以查阅我先前交流的 Chat：“知名互联网公司校招中常见的算法题”。</p>
<p>本文我们主要从技术面试聊起。技术面试包括：业务逻辑和基础知识面试。</p>
<p>首先是业务逻辑面试 ，也就是讲项目。</p>
<p>面试官会对你简历上写的若干个项目其中之一拿出来和你聊聊。在期间，会针对你所做的东西进行深度挖掘。</p>
<p> 包括：为什么要这么做？优缺点分析，假如重新让你做一次，你打算怎么做？ 等等。这个环节主要考察我们对自己做过的项目（实习项目或者校内项目）是否有一个清晰的认识。</p>
<p>关于业务逻辑面试的准备，建议在平时多多思考总结，对项目的数据来源、整体运行框架都应该熟悉掌握。</p>
<p>比如说你在某公司实习过程中，就可以进行总结，而不必等到快离职的时候慌慌张张的去总结该项目。</p>
<p>接下来是基础知识面试。</p>
<p>Java 开发属于后台开发方向，有人说后台开发很坑，因为需要学习的东西太多了。没错，这个岗位就是需要学习好多东西。</p>
<p>包括：本语言（Java/C++/PHP）基础、数据库、网络协议、Linux 系统、计算机原理甚至前端相关知识都可以考察你，而且，并不超纲 。</p>
<p>有时候，你报的是后台开发岗，并且熟悉的是 Java 语言，但是面试官却是 C++ 开发方向的，就是这么无奈~</p>
<p>好了，闲话少说，让我们开始分类讲解常见面试知识点。</p>
<h1 id="Java-基础知识"><a href="#Java-基础知识" class="headerlink" title="Java 基础知识"></a>Java 基础知识</h1><h2 id="Java-中常见基础知识点"><a href="#Java-中常见基础知识点" class="headerlink" title="Java 中常见基础知识点"></a>Java 中常见基础知识点</h2><ol>
<li>面向对象的特性有哪些？</li>
</ol>
<p><strong>答：</strong>封装、继承和多态。</p>
<p>【面向对象编程的正确姿势】</p>
<ol start="2">
<li>Java 中覆盖和重载是什么意思？</li>
</ol>
<p>解析：覆盖和重载是比较重要的基础知识点，并且容易混淆，所以面试中常见。</p>
<p><strong>答：</strong>覆盖（Override）是指子类对父类方法的一种重写，只能比父类抛出更少的异常，访问权限不能比父类的小。</p>
<p>被覆盖的方法不能是 private 的，否则只是在子类中重新定义了一个方法；重载（Overload）表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同。</p>
<p>面试官： 那么构成重载的条件有哪些？</p>
<p><strong>答：</strong>参数类型不同、参数个数不同、参数顺序不同。</p>
<p>面试官： 函数的返回值不同可以构成重载吗？为什么？</p>
<p><strong>答：</strong>不可以，因为 Java 中调用函数并不需要强制赋值。举例如下：</p>
<p>如下两个方法：</p>
<p>　　　　void f(){}　　　　int f(){ return 1;}<br>只要编译器可以根据语境明确判断出语义，比如在 int x = f();中，那么的确可以据此区分重载方法。</p>
<p>不过， 有时你并不关心方法的返回值，你想要的是方法调用的其他效果 （这常被称为 “为了副作用而调用”），这时你可能会调用方法而忽略其返回值，所以如果像下面的调用：</p>
<p>　　　　fun();<br>此时 Java 如何才能判断调用的是哪一个 f( ) 呢？别人如何理解这种代码呢？所以，根据方法返回值来区分重载方法是行不通的。</p>
<ol start="3">
<li>抽象类和接口的区别有哪些？</li>
</ol>
<p>【Java 抽象类与接口】</p>
<p><strong>答：</strong></p>
<p>抽象类中可以没有抽象方法；接口中的方法必须是抽象方法；</p>
<p>抽象类中可以有普通的成员变量；接口中的变量必须是 static final 类型的，必须被初始化 , 接口中只有常量，没有变量。</p>
<p>抽象类只能单继承，接口可以继承多个父接口；</p>
<p>Java8 中接口中会有 default 方法，即方法可以被实现。</p>
<p>面试官：抽象类和接口如何选择？</p>
<p><strong>答：</strong></p>
<p>如果要创建不带任何方法定义和成员变量的基类，那么就应该选择接口而不是抽象类。</p>
<p>如果知道某个类应该是基类，那么第一个选择的应该是让它成为一个接口，只有在必须要有方法定义和成员变量的时候，才应该选择抽象类。</p>
<p>因为抽象类中允许存在一个或多个被具体实现的方法，只要方法没有被全部实现该类就仍是抽象类。</p>
<ol start="4">
<li>Java 和 C++ 的区别：</li>
</ol>
<p>解析：虽然我们不太懂 C++，但是就是会这么问，尤其是三面（总监级别）面试中。</p>
<p><strong>答：</strong></p>
<p>都是面向对象的语言，都支持封装、继承和多态；</p>
<p>指针：Java 不提供指针来直接访问内存，程序更加安全；</p>
<p>继承： Java 的类是单继承的，C++ 支持多重继承； Java 通过一个类实现多个接口来实现 C++ 中的多重继承； Java 中类不可以多继承，但是！！！接口可以多继承；</p>
<p>内存： Java 有自动内存管理机制，不需要程序员手动释放无用内存。</p>
<ol start="5">
<li>Java 中的值传递和引用传递</li>
</ol>
<p><strong>答：</strong></p>
<p>值传递是指对象被值传递，意味着传递了对象的一个副本，即使副本被改变，也不会影响源对象。引用传递是指对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。</p>
<p>因此，外部对引用对象的改变会反映到所有的对象上。</p>
<ol start="6">
<li>JDK 中常用的包有哪些？</li>
</ol>
<p><strong>答：</strong>java.lang、java.util、java.io、java.net、java.sql。</p>
<ol start="7">
<li>JDK，JRE 和 JVM 的联系和区别：</li>
</ol>
<p><strong>答：</strong></p>
<p>JDK 是 java 开发工具包，是 java 开发环境的核心组件，并提供编译、调试和运行一个 java 程序所需要的所有工具，可执行文件和二进制文件，是一个平台特定的软件。</p>
<p>JRE 是 java 运行时环境，是 JVM 的实施实现，提供了运行 java 程序的平台。JRE 包含了 JVM，但是不包含 java 编译器 / 调试器之类的开发工具。</p>
<p>JVM 是 java 虚拟机，当我们运行一个程序时，JVM 负责将字节码转换为特定机器代码，JVM 提供了内存管理 / 垃圾回收和安全机制等。</p>
<p>【JVM 垃圾回收机制】</p>
<p>这种独立于硬件和操作系统，正是 java 程序可以一次编写多处执行的原因。</p>
<p>区别：</p>
<p>JDK 用于开发，JRE 用于运行 java 程序；</p>
<p>JDK 和 JRE 中都包含 JVM；</p>
<p>JVM 是 java 编程语言的核心并且具有平台独立性。</p>
<p>小结：本节主要阐述了 Java 基础知识点，这些问题主要是一面面试官在考察，难度不大，适当复习下，应该没什么问题。</p>
<hr>
<h1 id="Java-中常见集合"><a href="#Java-中常见集合" class="headerlink" title="Java 中常见集合"></a>Java 中常见集合</h1><p>集合这方面的考察相当多，这部分是面试中必考的知识点。</p>
<ol>
<li>说说常见的集合有哪些吧？</li>
</ol>
<p><strong>答：</strong></p>
<p>Map 接口和 Collection 接口是所有集合框架的父接口：</p>
<ol>
<li><p>Collection 接口的子接口包括：Set 接口和 List 接口；</p>
</li>
<li><p>Map 接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap 以及 Properties 等；</p>
</li>
<li><p>Set 接口的实现类主要有：HashSet、TreeSet、LinkedHashSet 等；</p>
</li>
<li><p>List 接口的实现类主要有：ArrayList、LinkedList、Stack 以及 Vector 等。</p>
</li>
<li><p>HashMap 和 Hashtable 的区别有哪些？（必问）</p>
</li>
</ol>
<p><strong>答：</strong></p>
<p>HashMap 没有考虑同步，是线程不安全的；Hashtable 使用了 synchronized 关键字，是线程安全的；</p>
<p>前者允许 null 作为 Key；后者不允许 null 作为 Key。</p>
<ol start="3">
<li>HashMap 的底层实现你知道吗？</li>
</ol>
<p><strong>答：</strong></p>
<p>在 Java8 之前，其底层实现是数组 + 链表实现，Java8 使用了数组 + 链表 + 红黑树实现。此时你可以简单的在纸上画图分析：</p>
<p><img src="/2018/05/22/java-Q-A/1.jpg" alt="image"></p>
<ol start="4">
<li>ConcurrentHashMap 和 Hashtable 的区别？ （必问）</li>
</ol>
<p><strong>答：</strong></p>
<p>ConcurrentHashMap 结合了 HashMap 和 HashTable 二者的优势。</p>
<p>HashMap 没有考虑同步，hashtable 考虑了同步的问题。但是 hashtable 在每次同步执行时都要锁住整个结构。</p>
<p>ConcurrentHashMap 锁的方式是稍微细粒度的。 ConcurrentHashMap 将 hash 表分为 16 个桶（默认值），诸如 get,put,remove 等常用操作只锁当前需要用到的桶。</p>
<p>面试官：ConcurrentHashMap 的具体实现知道吗？</p>
<p><strong>答：</strong></p>
<p>该类包含两个静态内部类 HashEntry 和 Segment；前者用来封装映射表的键值对，后者用来充当锁的角色；</p>
<p>Segment 是一种可重入的锁 ReentrantLock，每个 Segment 守护一个 HashEntry 数组里得元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 锁。</p>
<ol start="5">
<li>HashMap 的长度为什么是 2 的幂次方？</li>
</ol>
<p><strong>答：</strong></p>
<p>通过将 Key 的 hash 值与 length-1 进行 &amp; 运算，实现了当前 Key 的定位，2 的幂次方可以减少冲突（碰撞）的次数，提高 HashMap 查询效率；</p>
<p>如果 length 为 2 的次幂  则 length-1 转化为二进制必定是 11111……的形式，在于 h 的二进制与操作效率会非常的快，而且空间不浪费；</p>
<p>如果 length 不是 2 的次幂，比如 length 为 15，则 length-1 为 14，对应的二进制为 1110，在于 h 与操作，最后一位都为 0，而 0001，0011，0101，1001，1011，0111，1101 这几个位置永远都不能存放元素了，空间浪费相当大。</p>
<p>更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！这样就会造成空间的浪费。</p>
<ol start="6">
<li>List 和 Set 的区别是啥？</li>
</ol>
<p><strong>答：</strong>List 元素是有序的，可以重复；Set 元素是无序的，不可以重复。</p>
<ol start="7">
<li>List、Set 和 Map 的初始容量和加载因子</li>
</ol>
<p><strong>答：</strong></p>
<ol>
<li>List</li>
</ol>
<p>ArrayList 的初始容量是 10；加载因子为 0.5； 扩容增量：原容量的 0.5 倍 +1；一次扩容后长度为 16。</p>
<p>Vector 初始容量为 10，加载因子是 1。扩容增量：原容量的 1 倍，如 Vector 的容量为 10，一次扩容后是容量为 20。</p>
<ol start="2">
<li>Set</li>
</ol>
<p>HashSet，初始容量为 16，加载因子为 0.75； 扩容增量：原容量的 1 倍； 如 HashSet 的容量为 16，一次扩容后容量为 32</p>
<ol start="3">
<li>Map</li>
</ol>
<p>HashMap，初始容量 16，加载因子为 0.75； 扩容增量：原容量的 1 倍； 如 HashMap 的容量为 16，一次扩容后容量为 32</p>
<ol start="8">
<li>Comparable 接口和 Comparator 接口有什么区别？</li>
</ol>
<p><strong>答：</strong></p>
<p>前者简单，但是如果需要重新定义比较类型时，需要修改源代码。</p>
<p>后者不需要修改源代码，自定义一个比较器，实现自定义的比较方法。</p>
<ol start="9">
<li>Java 集合的快速失败机制 “fail-fast”</li>
</ol>
<p><strong>答：</strong></p>
<p>它是 java 集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。</p>
<p>例如 ：假设存在两个线程（线程 1、线程 2），线程 1 通过 Iterator 在遍历集合 A 中的元素，在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>
<p>原因： 迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变 modCount 的值。</p>
<p>每当迭代器使用 hashNext()/next() 遍历下一个元素之前，都会检测 modCount 变量是否为 expectedmodCount 值，是的话就返回遍历；否则抛出异常，终止遍历。</p>
<p>解决办法：</p>
<p>在遍历过程中，所有涉及到改变 modCount 值得地方全部加上 synchronized；</p>
<p>使用 CopyOnWriteArrayList 来替换 ArrayList。</p>
<p>小结：本小节是 Java 中关于集合的考察，是 Java 岗位面试中必考的知识点，除了应该掌握以上的问题，包括各个集合的底层实现也建议各位同学阅读，加深理解。</p>
<hr>
<h1 id="高并发编程"><a href="#高并发编程" class="headerlink" title="高并发编程"></a>高并发编程</h1><p>在 Java 5.0 提供了 java.util.concurrent（简称 JUC ）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。</p>
<ol>
<li>多线程和单线程的区别和联系：</li>
</ol>
<p><strong>答：</strong></p>
<p>在单核 CPU 中，将 CPU 分为很小的时间片，在每一时刻只能有一个线程在执行，是一种微观上轮流占用 CPU 的机制。</p>
<p>多线程会存在线程上下文切换，会导致程序执行速度变慢，即采用一个拥有两个线程的进程执行所需要的时间比一个线程的进程执行两次所需要的时间要多一些。</p>
<p>结论：即采用多线程不会提高程序的执行速度，反而会降低速度，但是对于用户来说，可以减少用户的响应时间。</p>
<ol start="2">
<li>如何指定多个线程的执行顺序？</li>
</ol>
<p>解析：面试官会给你举个例子，如何让 10 个线程按照顺序打印 0123456789？（写代码实现）</p>
<p><strong>答：</strong></p>
<p>设定一个 orderNum，每个线程执行结束之后，更新 orderNum，指明下一个要执行的线程。并且唤醒所有的等待线程。</p>
<p>在每一个线程的开始，要 while 判断 orderNum 是否等于自己的要求值！！不是，则 wait，是则执行本线程。</p>
<ol start="3">
<li>线程和进程的区别（必考）</li>
</ol>
<p><strong>答：</strong></p>
<p>进程是一个 “执行中的程序”，是系统进行资源分配和调度的一个独立单位；</p>
<p>线程是进程的一个实体，一个进程中拥有多个线程，线程之间共享地址空间和其它资源（所以通信和同步等操作线程比进程更加容易）；</p>
<p>线程上下文的切换比进程上下文切换要快很多。</p>
<p>（1）进程切换时，涉及到当前进程的 CPU 环境的保存和新被调度运行进程的 CPU 环境的设置。</p>
<p>（2）线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。</p>
<ol start="4">
<li>多线程产生死锁的 4 个必要条件？</li>
</ol>
<p><strong>答：</strong></p>
<p>互斥条件：一个资源每次只能被一个线程使用；</p>
<p>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</p>
<p>不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺；</p>
<p>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</p>
<p>面试官：如何避免死锁？（经常接着问这个问题哦~）</p>
<p><strong>答：</strong>指定获取锁的顺序，举例如下：</p>
<p>比如某个线程只有获得 A 锁和 B 锁才能对某资源进行操作，在多线程条件下，如何避免死锁？</p>
<p>获得锁的顺序是一定的，比如规定，只有获得 A 锁的线程才有资格获取 B 锁，按顺序获取锁就可以避免死锁！！！</p>
<ol start="5">
<li>sleep( ) 和 wait( n)、wait( ) 的区别：</li>
</ol>
<p><strong>答：</strong></p>
<p>sleep 方法：是 Thread 类的静态方法，当前线程将睡眠 n 毫秒，线程进入阻塞状态。当睡眠时间到了，会解除阻塞，进行可运行状态，等待 CPU 的到来。睡眠不释放锁（如果有的话）；</p>
<p>wait 方法：是 Object 的方法，必须与 synchronized 关键字一起使用，线程进入阻塞状态，当 notify 或者 notifyall 被调用后，会解除阻塞。但是，只有重新占用互斥锁之后才会进入可运行状态。睡眠时，释放互斥锁。</p>
<ol start="6">
<li>synchronized 关键字：</li>
</ol>
<p><strong>答：</strong></p>
<p>底层实现：</p>
<p>进入时，执行 monitorenter，将计数器 +1，释放锁 monitorexit 时，计数器-1；</p>
<p>当一个线程判断到计数器为 0 时，则当前锁空闲，可以占用；反之，当前线程进入等待状态。</p>
<p>含义：（monitor 机制）</p>
<p>Synchronized 是在加锁，加对象锁。对象锁是一种重量锁（monitor），synchronized 的锁机制会根据线程竞争情况在运行时会有偏向锁（单一线程）、轻量锁（多个线程访问 synchronized 区域）、对象锁（重量锁，多个线程存在竞争的情况）、自旋锁等。</p>
<p>该关键字是一个几种锁的封装。</p>
<ol start="7">
<li>volatile 关键字</li>
</ol>
<p>解析：关于指令重排序的问题，可以查阅 DCL 双检锁失效相关资料。</p>
<p><strong>答：</strong></p>
<p>该关键字可以保证可见性不保证原子性。</p>
<p>功能：</p>
<p>主内存和工作内存，直接与主内存产生交互，进行读写操作，保证可见性；</p>
<p>禁止 JVM 进行的指令重排序。</p>
<ol start="8">
<li>ThreadLocal（线程局部变量）关键字：</li>
</ol>
<p><strong>答：</strong></p>
<p>当使用 ThreadLocal 维护变量时，其为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不会影响其他线程对应的副本。</p>
<p>ThreadLocal 内部实现机制：</p>
<p>每个线程内部都会维护一个类似 HashMap 的对象，称为 ThreadLocalMap，里边会包含若干了 Entry（K-V 键值对），相应的线程被称为这些 Entry 的属主线程；</p>
<p>Entry 的 Key 是一个 ThreadLocal 实例，Value 是一个线程特有对象。Entry 的作用即是：为其属主线程建立起一个 ThreadLocal 实例与一个线程特有对象之间的对应关系；</p>
<p>Entry 对 Key 的引用是弱引用；Entry 对 Value 的引用是强引用。</p>
<p><img src="/2018/05/22/java-Q-A/2.jpg" alt="image"></p>
<ol start="9">
<li>Atomic 关键字：</li>
</ol>
<p><strong>答：</strong>可以使基本数据类型以原子的方式实现自增自减等操作。</p>
<ol start="10">
<li>线程池有了解吗？（必考）</li>
</ol>
<p><strong>答：</strong><br>java.util.concurrent.ThreadPoolExecutor 类就是一个线程池。客户端调用 ThreadPoolExecutor.submit(Runnable task) 提交任务，线程池内部维护的工作者线程的数量就是该线程池的线程池大小，有 3 种形态：</p>
<ul>
<li><p>当前线程池大小 ：表示线程池中实际工作者线程的数量；</p>
</li>
<li><p>最大线程池大小 （maxinumPoolSize）：表示线程池中允许存在的工作者线程的数量上限；</p>
</li>
<li><p>核心线程大小 （corePoolSize ）：表示一个不大于最大线程池大小的工作者线程数量上限。</p>
</li>
</ul>
<p>如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队；</p>
<p>如果运行的线程等于或者多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不是添加新线程；</p>
<p>如果无法将请求加入队列，即队列已经满了，则创建新的线程，除非创建此线程超出 maxinumPoolSize， 在这种情况下，任务将被拒绝。</p>
<p>限于篇幅有限，更多高并发编程中的问题，请参考：</p>
<ol>
<li><p>Java 多线程编程核心技术</p>
</li>
<li><p>Java多线程与并发编程</p>
</li>
</ol>
<p>小结：本小节内容涉及到 Java 中多线程编程，线程安全等知识，是面试中的重点和难点。</p>
<hr>
<h1 id="JVM-内存管理"><a href="#JVM-内存管理" class="headerlink" title="JVM 内存管理"></a>JVM 内存管理</h1><p>既然是 Java 开发面试，那么对 JVM 的考察当然也是必须的，面试官一般会问你对 JVM 有了解吗？</p>
<p>我通常都会把我所了解的都说一遍，包括：JVM 内存划分、JVM 垃圾回收的含义，有哪些 GC 算法，年轻代和老年代各自的特点统统阐述一遍。</p>
<p>【JVM 垃圾回收机制】</p>
<ol>
<li>JVM 内存划分：</li>
</ol>
<p>方法区（线程共享）：常量、静态变量、JIT(即时编译器) 编译后的代码也都在方法区；</p>
<p>堆内存（线程共享）：垃圾回收的主要场所；</p>
<p>程序计数器： 当前线程执行的字节码的位置指示器；</p>
<p>虚拟机栈（栈内存）：保存局部变量、基本数据类型变量以及堆内存中某个对象的引用变量；</p>
<p>本地方法栈 ：为 JVM 提供使用 native 方法的服务。</p>
<ol start="2">
<li>类似-Xms、-Xmn 这些参数的含义：</li>
</ol>
<p><strong>答：</strong></p>
<p>堆内存分配：</p>
<p>JVM 初始分配的内存由-Xms 指定，默认是物理内存的 1/64；</p>
<p>JVM 最大分配的内存由-Xmx 指定，默认是物理内存的 1/4；</p>
<p>默认空余堆内存小于 40% 时，JVM 就会增大堆直到-Xmx 的最大限制；空余堆内存大于 70% 时，JVM 会减少堆直到 -Xms 的最小限制；</p>
<p>因此服务器一般设置-Xms、-Xmx 相等以避免在每次 GC 后调整堆的大小。对象的堆内存由称为垃圾回收器的自动内存管理系统回收。</p>
<p>非堆内存分配：</p>
<p>JVM 使用-XX:PermSize 设置非堆内存初始值，默认是物理内存的 1/64；</p>
<p>由 XX:MaxPermSize 设置最大非堆内存的大小，默认是物理内存的 1/4；</p>
<p>-Xmn2G：设置年轻代大小为 2G；</p>
<p>-XX:SurvivorRatio，设置年轻代中 Eden 区与 Survivor 区的比值。</p>
<ol start="3">
<li>垃圾回收算法有哪些？</li>
</ol>
<p><strong>答：</strong></p>
<p>引用计数 ：原理是此对象有一个引用，即增加一个计数，删除一个引用则减少一个计数。垃圾回收时，只用收集计数为 0 的对象。此算法最致命的是无法处理循环引用的问题；</p>
<p>标记-清除 ：此算法执行分两阶段。第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除；</p>
<p>此算法需要暂停整个应用，同时，会产生内存碎片；</p>
<p>复制算法 ：此算法把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中；</p>
<p>此算法每次只处理正在使用中的对象，因此复制成本比较小，同时复制过去以后还能进行相应的内存整理，不会出现 “碎片” 问题。当然，此算法的缺点也是很明显的，就是需要两倍内存空间；</p>
<p>标记-整理 ：此算法结合了 “标记-清除” 和 “复制” 两个算法的优点。也是分两阶段，第一阶段从根节点开始标记所有被引用对象，第二阶段遍历整个堆，把清除未标记对象并且把存活对象 “压缩” 到堆的其中一块，按顺序排放。</p>
<p>此算法避免了 “标记-清除” 的碎片问题，同时也避免了 “复制” 算法的空间问题。</p>
<ol start="4">
<li>root 搜索算法中，哪些可以作为 root？</li>
</ol>
<p><strong>答：</strong></p>
<p>被启动类（bootstrap 加载器）加载的类和创建的对象；</p>
<p>JavaStack 中的引用的对象 (栈内存中引用的对象)；</p>
<p>方法区中静态引用指向的对象；</p>
<p>方法区中常量引用指向的对象；</p>
<p>Native 方法中 JNI 引用的对象。</p>
<ol start="5">
<li>GC 什么时候开始？</li>
</ol>
<p><strong>答：</strong></p>
<p>GC 经常发生的区域是堆区，堆区还可以细分为新生代、老年代，新生代还分为一个 Eden 区和两个 Survivor 区。</p>
<p>对象优先在 Eden 中分配，当 Eden 中没有足够空间时，虚拟机将发生一次 Minor GC，因为 Java 大多数对象都是朝生夕灭，所以 Minor GC 非常频繁，而且速度也很快；</p>
<p>Full GC，发生在老年代的 GC，当老年代没有足够的空间时即发生 Full GC，发生 Full GC 一般都会有一次 Minor GC。</p>
<p>大对象直接进入老年代，如很长的字符串数组，虚拟机提供一个；XX:PretenureSizeThreadhold 参数，令大于这个参数值的对象直接在老年代中分配，避免在 Eden 区和两个 Survivor 区发生大量的内存拷贝；</p>
<p>发生 Minor GC 时，虚拟机会检测之前每次晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则进行一次 Full GC，如果小于，则查看 HandlePromotionFailure 设置是否允许担保失败，如果允许，那只会进行一次 Minor GC，如果不允许，则改为进行一次 Full GC。</p>
<ol start="6">
<li>内存泄漏和内存溢出</li>
</ol>
<p><strong>答：</strong></p>
<p>概念：</p>
<p>内存溢出指的是内存不够用了；</p>
<p>内存泄漏是指对象可达，但是没用了。即本该被 GC 回收的对象并没有被回收；</p>
<p>内存泄露是导致内存溢出的原因之一；内存泄露积累起来将导致内存溢出。</p>
<p>内存泄漏的原因分析：</p>
<p>长生命周期的对象引用短生命周期的对象；</p>
<p>没有将无用对象置为 null。</p>
<p>小结：本小节涉及到 JVM 虚拟机，包括对内存的管理等知识，相对较深。除了以上问题，面试官会继续问你一些比较深的问题，可能也是为了看看你的极限在哪里吧。</p>
<p>比如：内存调优、内存管理，是否遇到过内存泄漏的实际案例、是否真正关心过内存等。由于本人实际项目经验不足，这些深层次问题并没有接触过，各位有需要可以上网查阅。</p>
<hr>
<h1 id="Java-8-相关知识"><a href="#Java-8-相关知识" class="headerlink" title="Java 8 相关知识"></a>Java 8 相关知识</h1><p>关于 Java8 中新知识点，面试官会让你说说 Java8 你了解多少，下边主要阐述我所了解，并且在面试中回答的 Java8 新增知识点。</p>
<p>0.1 HashMap 的底层实现有变化：HashMap 是数组 + 链表 + 红黑树（JDK1.8 增加了红黑树部分）实现。</p>
<ol start="2">
<li>JVM 内存管理方面，由元空间代替了永久代。</li>
</ol>
<p>区别：</p>
<ol>
<li><p>元空间并不在虚拟机中，而是使用本地内存；</p>
</li>
<li><p>默认情况下，元空间的大小仅受本地内存限制；</p>
</li>
<li><p>也可以通过 -XX：MetaspaceSize 指定元空间大小。</p>
</li>
<li><p>Lambda 表达式（也称为闭包），允许我们将函数当成参数传递给某个方法，或者把代码本身当做数据处理。</p>
</li>
<li><p>函数式接口：指的是只有一个函数的接口，java.lang.Runnable 和 java.util.concurrent.Callable 就是函数式接口的例子；java8 提供了一个特殊的注解 @Functionallnterface 来标明该接口是一个函数式接口。</p>
</li>
<li><p>引入重复注解：Java 8 中使用 @Repeatable 注解定义重复注解。</p>
</li>
<li><p>接口中可以实现方法 default 方法。</p>
</li>
<li><p>注解的使用场景拓宽： 注解几乎可以使用在任何元素上：局部变量、接口类型、超类和接口实现类，甚至可以用在函数的异常定义上。</p>
</li>
<li><p>新的包 java.time 包</p>
</li>
</ol>
<p>包含了所有关于日期、时间、时区、持续时间和时钟操作的类。（Java 8 的日期与时间问题解决方案）</p>
<p>这些类都是不可变的、线程安全的。</p>
<p>小结：Java8 的一些新特性，面试官一般情况下不要求你有多么精通，主要是看看你有没有一些了解。</p>
<p>点击图片 查看专题</p>
<hr>
<h1 id="网络协议相关"><a href="#网络协议相关" class="headerlink" title="网络协议相关"></a>网络协议相关</h1><p>网络协议方面，考察最多的包括服务器和客户端在三次握手、四次挥手过程中的状态变化；还有网络拥塞控制，及其解决办法等。</p>
<ol>
<li>三次握手、四次挥手示意图：</li>
</ol>
<p><img src="/2018/05/22/java-Q-A/3.jpg" alt="image"></p>
<p>总共有四种状态：主动建立连接、主动断开连接、被动建立连和被动断开连接</p>
<p>两两组合还是 4 种组合：</p>
<p>主动建立连接、主动断开连接会经历的状态：<br>SYNC_SENT——ESTABLISHED—-FIN_WAIT_1—-FIN_WAIT_2—-TIME_WAIT</p>
<p>主动建立连接、被动断开连接会经历的状态：<br>SYNC_SENT——ESTABLISHED—-CLOSE_WAIT—-LAST_ACK</p>
<p>被动建立连接、主动断开连接会经历的状态：<br>LISTEN—-SYN_RCVD—-ESTABLISHED—-FIN_WAIT_1—-FIN_WAIT_2—-TIME_WAIT</p>
<p>被动建立连接、被动断开连接会经历的状态：<br>LISTEN—-SYN_RCVD—-ESTABLISHED—-CLOSE_WAIT—-LAST_ACK</p>
<ol start="2">
<li>滑动窗口机制</li>
</ol>
<p>由发送方和接收方在三次握手阶段，互相将自己的最大可接收的数据量告诉对方。</p>
<p>也就是自己的数据接收缓冲池的大小。这样对方可以根据已发送的数据量来计算是否可以接着发送。</p>
<p>在处理过程中，当接收缓冲池的大小发生变化时，要给对方发送更新窗口大小的通知。</p>
<ol start="3">
<li>拥塞避免机制</li>
</ol>
<p>拥塞：对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降。</p>
<p>拥塞控制：防止过多的数据注入到网络中，使得网络中的路由器或链路不致过载。</p>
<p>拥塞控制方法：</p>
<p>慢开始 + 拥塞避免；</p>
<p>快重传 + 快恢复。</p>
<p><img src="/2018/05/22/java-Q-A/4.jpg" alt="image"></p>
<p><img src="/2018/05/22/java-Q-A/5.jpg" alt="image"></p>
<ol start="4">
<li>浏览器中输入：“<a href="http://www.xxx.com”" target="_blank" rel="noopener">www.xxx.com”</a> 之后都发生了什么？请详细阐述。</li>
</ol>
<p>解析：经典的网络协议问题。</p>
<p><strong>答：</strong></p>
<p>由域名→IP 地址<br>寻找 IP 地址的过程依次经过了浏览器缓存、系统缓存、hosts 文件、路由器缓存、 递归搜索根域名服务器。</p>
<p>建立 TCP/IP 连接（三次握手具体过程）</p>
<p>由浏览器发送一个 HTTP 请求</p>
<p>经过路由器的转发，通过服务器的防火墙，该 HTTP 请求到达了服务器</p>
<p>服务器处理该 HTTP 请求，返回一个 HTML 文件</p>
<p>浏览器解析该 HTML 文件，并且显示在浏览器端</p>
<p>这里需要注意：</p>
<p>HTTP 协议是一种基于 TCP/IP 的应用层协议，进行 HTTP 数据请求必须先建立 TCP/IP 连接</p>
<p>可以这样理解：HTTP 是轿车，提供了封装或者显示数据的具体形式；Socket 是发动机，提供了网络通信的能力。</p>
<p>两个计算机之间的交流无非是两个端口之间的数据通信 , 具体的数据会以什么样的形式展现是以不同的应用层协议来定义的。</p>
<ol start="5">
<li>常见 HTTP 状态码</li>
</ol>
<ul>
<li><p>1xx（临时响应）</p>
</li>
<li><p>2xx（成功）</p>
</li>
<li><p>3xx（重定向）：表示要完成请求需要进一步操作</p>
</li>
<li><p>4xx（错误）：表示请求可能出错，妨碍了服务器的处理</p>
</li>
<li><p>5xx（服务器错误）：表示服务器在尝试处理请求时发生内部错误</p>
</li>
</ul>
<p>常见状态码：</p>
<ul>
<li><p>200（成功）</p>
</li>
<li><p>304（未修改）：自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容</p>
</li>
<li><p>401（未授权）：请求要求身份验证</p>
</li>
<li><p>403（禁止）：服务器拒绝请求</p>
</li>
<li><p>404（未找到）：服务器找不到请求的网页</p>
</li>
</ul>
<ol start="6">
<li>TCP 和 UDP 的区别：</li>
</ol>
<p><strong>答：</strong></p>
<p>回答发送数据前是否存在建立连接的过程；</p>
<p>ＴＣＰ过确认机制，丢包可以重发，保证数据的正确性；ＵＤＰ不保证正确性，只是单纯的负责发送数据包；</p>
<p>UDP 是面向报文的。发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付给 IP 层。既不拆分，也不合并，而是保留这些报文的边界，因 此，应用程序需要选择合适的报文大小；</p>
<p>UDP 的头部，只有 8 个字节，相对于 TCP 头部的 20 个字节信息包的额外开销很小。</p>
<p>限于篇幅，更多网络协议相关知识参考：</p>
<ol>
<li><p>如何快速入门网络基础知识（TCP/IP 和 HTTP）</p>
</li>
<li><p>图解 HTTP</p>
</li>
</ol>
<p>小结：必须熟练掌握 TCP 和 UDP 的区别、三次握手和四次挥手的状态切换，必考。</p>
<h1 id="数据库知识点"><a href="#数据库知识点" class="headerlink" title="数据库知识点"></a>数据库知识点</h1><p>既然是后端开发，那么与数据库相关的知识点也是必不可少的。</p>
<ol>
<li><p>MySQL 和 MongoDB 的区别有哪些？如何选择？</p>
</li>
<li><p>MongoDB 的优缺点有哪些？</p>
</li>
</ol>
<p>（ps 本人对这一块不是很熟悉，就不附上参考答案了，请各位小伙伴自行学习哈~）</p>
<ol start="3">
<li>听说过事务吗？（必考）</li>
</ol>
<p><strong>答：</strong></p>
<p>作为单个逻辑工作单元执行的一系列操作，满足四大特性：</p>
<ul>
<li><p>原子性（Atomicity）：事务作为一个整体被执行 ，要么全部执行，要么全部不执行；</p>
</li>
<li><p>一致性（Consistency）：保证数据库状态从一个一致状态转变为另一个一致状态；</p>
</li>
<li><p>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行；</p>
</li>
<li><p>持久性（Durability）：一个事务一旦提交，对数据库的修改应该永久保存。</p>
</li>
</ul>
<ol start="4">
<li>事务的并发问题有哪几种？</li>
</ol>
<p><strong>答：</strong>丢失更新、脏读、不可重复读以及幻读。</p>
<ol start="5">
<li>数据库中的锁有哪几种？</li>
</ol>
<p><strong>答：</strong>独占锁、排他锁以及更新锁。</p>
<ol start="6">
<li>事务的隔离级别有哪几种？</li>
</ol>
<p><strong>答：</strong>读未提交、读已提交、可重复读和序列化。</p>
<p>扩展问题：MySQL 事务默认隔离级别是哪个？</p>
<p><strong>答：</strong>可重复读。</p>
<ol start="7">
<li>数据库的索引有什么作用？（必考） 底层数据结构是什么，为什么使用这种数据结构？</li>
</ol>
<p><strong>答：</strong></p>
<p>索引  是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息；</p>
<p>底层数据结构是 B+ 树；</p>
<p>使用 B+ 树的原因：查找速度快、效率高，在查找的过程中，每次都能抛弃掉一部分节点，减少遍历个数。（ 此时，你应该在白纸上画出什么是 B+ 树 ）</p>
<p>扩展问题：聚簇索引和非聚簇索引的区别？</p>
<ol start="8">
<li>MyISAM 和 InnoDB 的区别有哪些？</li>
</ol>
<p><strong>答：</strong></p>
<ul>
<li><p>MyISAM 不支持事务，InnoDB 是事务类型的存储引擎；</p>
</li>
<li><p>MyISAM 只支持表级锁，BDB 支持页级锁和表级锁，默认为页级锁；而 InnoDB 支持行级锁和表级锁，默认为行级锁；</p>
</li>
<li><p>MyISAM 引擎不支持外键，InnoDB 支持外键；</p>
</li>
<li><p>MyISAM 引擎的表在大量高并发的读写下会经常出现表损坏的情况；</p>
</li>
<li><p>对于 count( ) 查询来说 MyISAM 更有优势；</p>
</li>
<li><p>InnoDB 是为处理巨大数据量时的最大性能设计，它的 CPU 效率可能是任何其它基于磁盘的关系数据库引擎所不能匹敌的；</p>
</li>
<li><p>MyISAM 支持全文索引（FULLTEXT），InnoDB 不支持；</p>
</li>
<li><p>MyISAM 引擎的表的查询、更新、插入的效率要比 InnoDB 高。</p>
</li>
</ul>
<blockquote>
<p>最主要的区别是：MyISAM 表不支持事务、不支持行级锁、不支持外键。 InnoDB 表支持事务、支持行级锁、支持外键。（可直接回答这个）</p>
</blockquote>
<ol start="9">
<li>数据库中 Where、group by、having 关键字：</li>
</ol>
<p><strong>答：</strong>  </p>
<p>关键字作用：</p>
<p>where 子句用来筛选 from 子句中指定的操作所产生的的行；</p>
<p>group by 子句用来分组 where 子句的输出；</p>
<p>having 子句用来从分组的结果中筛选行；</p>
<p>having 和 where 的区别：</p>
<p>语法类似，where 搜索条件在进行分组操作之前应用；having 搜索条件在进行分组操作之后应用；</p>
<p>having 可以包含聚合函数 sum、avg、max 等；</p>
<p>having 子句限制的是组，而不是行。</p>
<p>当同时含有 where 子句、group by 子句 、having 子句及聚集函数时，执行顺序如下：</p>
<p>执行 where 子句查找符合条件的数据；</p>
<p>使用 group by 子句对数据进行分组；对 group by 子句形成的组运行聚集函数计算每一组的值；最后用 having 子句去掉不符合条件的组。</p>
<ol start="10">
<li>还有一些问题，如 MySQL 和 SQL Server 用法上的区别、limit 关键字的使用等问题。</li>
</ol>
<p>小结：数据库方面还是事务机制、隔离级别比较重要，当然了数据库索引是必考的问题。</p>
<p>偶尔也会给你几个表，让你现场写 SQL 语句，主要考察 group by 和 having 等关键字。</p>
<hr>
<h1 id="框架相关知识"><a href="#框架相关知识" class="headerlink" title="框架相关知识"></a>框架相关知识</h1><p>我在项目中使用的框架有 Spring MVC 和 MyBatis，所以在简历上只写了这两种框架，面试官主要针对这两种框架进行提问。以下问题供小伙伴们参考。</p>
<p>JavaWeb 开发经典的 3 层框架：Web 层、Service 层（业务逻辑层）和 Dao 层（数据访问层）</p>
<p>Web 层：包含 JSP 和 Servlet 等与 Web 相关的内容；</p>
<p>业务层：只关心业务逻辑；</p>
<p>数据层：封装了对数据库的访问细节。</p>
<p>Spring 知识点</p>
<p>快速学习 Spring Boot 技术栈</p>
<p>Spring / Spring Boot 原理与实践</p>
<ol>
<li>Spring 的 IOC 和 AOP 有了解吗？</li>
</ol>
<p><strong>答：</strong></p>
<p>IOC：控制反转，（解耦合）将对象间的依赖关系交给 Spring 容器，使用配置文件来创建所依赖的对象，由主动创建对象改为了被动方式；</p>
<p>AOP：面向切面编程，将功能代码从业务逻辑代码中分离出来。</p>
<ol start="2">
<li>AOP 的实现方式有哪几种？如何选择？（必考）</li>
</ol>
<p><strong>答：</strong></p>
<p>JDK 动态代理实现和 cglib 实现。</p>
<p>选择：</p>
<p>如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理实现 AOP，也可以强制使用 cglib 实现 AOP；</p>
<p>如果目标对象没有实现接口，必须采用 cglib 库，Spring 会自动在 JDK 动态代理和 cglib 之间转换。</p>
<p>扩展：JDK 动态代理如何实现？（加分点）</p>
<p><strong>答：</strong></p>
<p>JDK 动态代理，只能对实现了接口的类生成代理，而不是针对类，该目标类型实现的接口都将被代理。</p>
<p>原理是通过在运行期间创建一个接口的实现类来完成对目标对象的代理。</p>
<p>定义一个实现接口 InvocationHandler 的类；</p>
<p>通过构造函数，注入被代理类；</p>
<p>实现 invoke（ Object proxy, Method method, Object[] args）方法；</p>
<p>在主函数中获得被代理类的类加载器；</p>
<p>使用 Proxy.newProxyInstance( ) 产生一个代理对象；</p>
<p>通过代理对象调用各种方法。</p>
<ol start="3">
<li>Spring MVC 的核心控制器是什么？消息处理流程有哪些？</li>
</ol>
<p><strong>答：</strong></p>
<p>核心控制器为 DispatcherServlet。消息流程如下：</p>
<p><img src="/2018/05/22/java-Q-A/6.jpg" alt="image"></p>
<ol start="4">
<li>其他问题包括：重定向和转发的区别、动态代理和静态代理的区别等。</li>
</ol>
<p>Mybatis 知识点</p>
<p>关于 MyBatis 主要考察占位符#和 $ 的区别，区别如下：</p>
<p>符号将传入的数据都当做一个字符串，会对自动传入的数据加一个双引号；</p>
<p>$ 符号将传入的数据直接显示生成 SQL 中；</p>
<p>符号存在预编译的过程，，对问号赋值，防止 SQL 注入；</p>
<p>$ 符号是直译的方式，一般用在 order by ${列名}语句中；</p>
<p>能用#号就不要用 $ 符号。</p>
<p>小结：限于作者水平，MVC 框架方面了解不是太多，实战能力欠缺。面试官偶尔问框架底层实现原理等都知之甚少，有能力的小伙伴可以多加学习。</p>
<p>点击图片 查看专题</p>
<hr>
<h1 id="大数据相关知识"><a href="#大数据相关知识" class="headerlink" title="大数据相关知识"></a>大数据相关知识</h1><p>大数据相关是因为我的简历上写了 KafKa 相关项目，所以面试官会进行提问 KafKa 相关知识点，我也进行了一些简单概念总结，深层次的实现原理因为并没有特别多的实战经验，所以并不了解。</p>
<p>以下概念总结供小伙伴参考。</p>
<ol>
<li>KafKa 基本特性：</li>
</ol>
<p><strong>答：</strong></p>
<p>快速持久化、支持批量读写消息、支持消息分区，提高了并发能力、支持在线增加分区、支持为每个分区创建多个副本。</p>
<p>扩展：为什么可以实现快速持久化？</p>
<p><strong>答：</strong></p>
<p>KafKa 将消息保存在磁盘中，并且读写磁盘的方式是顺序读写，避免了随机读写磁盘（寻道时间过长）导致的性能瓶颈；磁盘的顺序读写速度超过内存随机读写。</p>
<p>【Kafka 入门与实践】</p>
<ol start="2">
<li>核心概念</li>
</ol>
<p><strong>答：</strong></p>
<p>生产者（Producer）： 生产消息，并且按照一定的规则推送到 Topic 的分区中。</p>
<p>消费者（Consumer）： 从 Topic 中拉去消息，并且进行消费。</p>
<p>主题（Topic）： 用于存储消息的逻辑概念，是一个消息集合。</p>
<p>分区（partition）：</p>
<p>每个 Topic 可以划分为多个分区，每个消息在分区中都会有一个唯一编号 offset</p>
<p>kafka 通过 offset 保证消息在分区中的顺序</p>
<p>同一 Topic 的不同分区可以分配在不同的 Broker 上</p>
<p>partition 以文件的形式存储在文件系统中。</p>
<p>副本（replica）：</p>
<p>KafKa 对消息进行了冗余备份，每个分区有多个副本，每个副本中包含的消息是 “一样” 的。</p>
<p>每个副本中都会选举出一个 Leader 副本，其余为 Follower 副本，Follower 副本仅仅将数据从 Leader 副本拉去到本地，然后同步到自己的 Log 中。</p>
<p>消费者组（Consumer Group）： 每个 consumer 都属于一个 consumer group，每条消息只能被 consumer group 中的一个 Consumer 消费，但可以被多个 consumer group 消费。</p>
<p>Broker：</p>
<p>一个单独的 server 就是一个 Broker；</p>
<p>主要工作：接收生产者发过来的消息，分配 offset，并且保存到磁盘中；</p>
<p>Cluster&amp;Controller：</p>
<p>多个 Broker 可以组成一个 Cluster，每个集群选举一个 Broker 来作为 Controller，充当指挥中心</p>
<p>Controller 负责管理分区的状态，管理每个分区的副本状态，监听 ZooKeeper 中数据的变化等工作</p>
<p>保留策略和日志压缩：</p>
<p>不管消费者是否已经消费了消息，KafKa 都会一直保存这些消息（持久化到磁盘）；</p>
<p>通过保留策略，定时删除陈旧的消息；</p>
<p>日志压缩，只保留最新的 Key-Value 对。</p>
<p>关于副本机制：（加分点）</p>
<p>ISR 集合 ：表示当前 “可用” 且消息量与 Leader 相差不多的副本集合。满足条件如下：</p>
<p>副本所在节点必须维持着与 ZooKeeper 的连接；</p>
<p>副本最后一条信息的 offset 与 Leader 副本的最后一条消息的 offset 之间的差值不能超过指定的阈值。</p>
<p>深入浅出理解基于 Kafka 和 ZooKeeper 的分布式消息队列</p>
<p>HW&amp;LEO：</p>
<ol>
<li><p>HW 标记了一个特殊的 offset，当消费者处理消息的时候，只能拉取到 HW 之前的消息；</p>
</li>
<li><p>HW 也是由 Leader 副本管理的；</p>
</li>
<li><p>LEO（Log End Offset）是所有副本都会有的一个 offset 标记。</p>
</li>
</ol>
<p>ISR、HW 和 LEO 的工作配合：</p>
<ol>
<li><p>producer 向此分区中推送消息；</p>
</li>
<li><p>Leader 副本将消息追加到 Log 中，并且递增其 LEO；</p>
</li>
<li><p>Follower 副本从 Leader 副本中拉取消息进行同步；</p>
</li>
<li><p>Follower 副本将消息更新到本地 Log 中，并且递增其 LEO；</p>
</li>
<li><p>当 ISR 集合中的所有副本都完成了对 offset 的消息同步，Leader 副本会递增其 HW</p>
</li>
</ol>
<p>KafKa 的容灾机制：通过分区的副本 Leader 副本和 Follower 副本来提高容灾能力。</p>
<p>小结：请小伙伴根据自己的简历自行准备学习大数据相关知识点。</p>
<h1 id="Linux-常见命令"><a href="#Linux-常见命令" class="headerlink" title="Linux 常见命令"></a>Linux 常见命令</h1><p>作者对这一方面不是很精通，知识点来源于网络总结以及面试官的提问，仅供小伙伴参考。</p>
<ol>
<li>grep、sed 以及 awk 命令</li>
</ol>
<p>解析：awk 命令如果可以掌握，是面试中的一个  加分点。</p>
<ol start="2">
<li>文件和目录：</li>
</ol>
<ul>
<li><p>pwd 显示当前目录</p>
</li>
<li><p>ls 显示当前目录下的文件和目录：</p>
</li>
<li><p>ls -F 可以区分文件和目录；</p>
</li>
<li><p>ls -a 可以把隐藏文件和普通文件一起显示出来；</p>
</li>
<li><p>ls -R 可以递归显示子目录中的文件和目录；</p>
</li>
<li><p>ls -l 显示长列表；</p>
</li>
<li><p>ls -l test 过滤器，查看某个特定文件信息。可以只查看 test 文件的信息。</p>
</li>
</ul>
<ol start="3">
<li><p>处理文件方面的命令有：touch、cp、 In、mv、rm、          </p>
</li>
<li><p>处理目录方面的命令：mkdir</p>
</li>
<li><p>查看文件内容：file、cat、more、less、tail、head</p>
</li>
<li><p>监测程序命令：ps、top</p>
</li>
</ol>
<ul>
<li><p>eg. 找出进程名中包括 java 的所有进程：ps -ef | grep java</p>
</li>
<li><p>top 命令 实时监测进程</p>
</li>
<li><p>top 命令输出的第一部分：显示系统的概括。</p>
<ol>
<li><p>第一行显示了当前时间、系统的运行时间、登录的用户数和系统的平均负载（平均负载有 3 个值：最近 1min 5min 15min）；</p>
</li>
<li><p>第二行显示了进程的概要信息，有多少进程处于运行、休眠、停止或者僵化状态；</p>
</li>
<li><p>第三行是 CPU 的概要信息；</p>
</li>
<li><p>第四行是系统内存的状态。</p>
</li>
</ol>
</li>
</ul>
<ol start="7">
<li>ps 和 top 命令的区别：</li>
</ol>
<ul>
<li><p>ps 看到的是命令执行瞬间的进程信息 , 而 top 可以持续的监视；</p>
</li>
<li><p>ps 只是查看进程 , 而 top 还可以监视系统性能 , 如平均负载 ,cpu 和内存的消耗；</p>
</li>
<li><p>另外 top 还可以操作进程 , 如改变优先级 (命令 r) 和关闭进程 (命令 k)；</p>
</li>
<li><p>ps 主要是查看进程的，关注点在于查看需要查看的进程；</p>
</li>
<li><p>top 主要看 cpu, 内存使用情况，及占用资源最多的进程由高到低排序，关注点在于资源占用情况。</p>
</li>
</ul>
<ol start="8">
<li>压缩数据</li>
</ol>
<ul>
<li><p>tar -xvf 文件名；</p>
</li>
<li><p>tar -zxvf 文件名；</p>
</li>
<li><p>tar -cvzf 文件名。</p>
</li>
</ul>
<ol start="9">
<li>结束进程：kill PID 或者 kill all</li>
</ol>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>至此，从十个不同的方面阐述了 Java 开发面试岗位中所涉及到的重要知识点。</p>
<p>加上【知名互联网公司校招中常见的算法题】，是我将最近一年的时间内的面试笔试经验给大家做了总结分享。</p>
]]></content>
      <tags>
        <tag>TCP</tag>
        <tag>计算机网络</tag>
        <tag>java</tag>
        <tag>linux</tag>
        <tag>服务器</tag>
        <tag>spring</tag>
        <tag>ssm</tag>
        <tag>面经</tag>
        <tag>springMVC</tag>
        <tag>Mybatis</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式取整</title>
    <url>/2017/11/16/jsp-jstl-el-numberformat/</url>
    <content><![CDATA[<p>今天在写页码的时候发现后台传来的数据直接在jsp的EL表达式中直接相除会出现小数点</p>
<p>所以找了下解决方法并且记下来</p>
<p>jsp加标签头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--头部加上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"fmt"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>%&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:formatNumber</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;8/7)&#125;"</span> <span class="attr">maxFractionDigits</span>=<span class="string">"0"</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--结果为1--&gt;</span></span><br></pre></td></tr></table></figure>
<p>如：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><a href="fmt:formatNumber" target="_blank" rel="noopener">fmt:formatNumber</a>参数解释：</p>
<p>此标签会根据区域定制的方式将数字格式化成数字，货币，百分比。</p>
<p>此标签的属性：</p>
<ul>
<li>value:要格式化的数字</li>
<li>type：按照什么类型格式化</li>
<li>pattern：自定义格式化样式</li>
<li>currencyCode:ISO-4721货币代码，只适用于按照货币格式化的数字</li>
<li>currencySymbol： 货币符号,如￥,只适用于按照货币格式化的数字</li>
<li>groupingUsed： 是否包含分隔符</li>
<li>maxIntegerDigits： 整数部分最多显示多少位</li>
<li>mixIntegerDigits： 整数部分最少显示多少位</li>
<li>maxFractionDigits： 小数部分最多显示多位位</li>
<li>minFractionDigits： 小数部分最少显示多位位</li>
<li>var:存储格式化后的结果</li>
<li>scope: 存储的范围</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据库写入Emoji表情的报错的解决方法</title>
    <url>/2018/12/12/jdbc-emoji-bug/</url>
    <content><![CDATA[<p>这两天写GooglePlay爬虫的时候发现入库数量与redis中的数量不一致, 翻看lockback日志发现部分插入语句报错，特此记录。</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在执行sql时， 控制台抛出异常<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.sql.SQLException: </span><br><span class="line">    Incorrect string value: &apos;\xF0\x9F\x92\x94&apos; for column &apos;name&apos; ...</span><br></pre></td></tr></table></figure></p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Emoji表情符号为4个字节的字符，而 utf8 字符集只支持1-3个字节的字符，导致无法写入数据库。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li>修改MySQL数据库字符集， 把数据库字符集从utf8 修改为支持1-4 个字节字符的utf8mb4.</li>
</ul>
<p>若采用java的jdbc来进行入库操作, 则需要额外地升级驱动的版本到5.1.13版本或更高.</p>
<p>以gradle为例(maven类似):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile(&quot;mysql:mysql-connector-java:5.1.13&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>jdbc</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA BIO和NIO</title>
    <url>/2018/12/26/java-bio-nio/</url>
    <content><![CDATA[<h1 id="同步、异步、阻塞、非阻塞"><a href="#同步、异步、阻塞、非阻塞" class="headerlink" title="同步、异步、阻塞、非阻塞"></a>同步、异步、阻塞、非阻塞</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>小明上传一个500m的视频，等待这个视频上传成功，返回结果。这个等待成功的通知就是同步。</p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>小明上传一个500m的视频，但是设置了一个上传成功提醒的功能，等到视频上传成功，系统会自动提醒，这样的就是异步。</p>
<h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>小明上传一个500m的视频，等待这个视频上传成功，返回结果，在上传视频的过程就只有在等待成功的通知，这个等待的过程就是阻塞</p>
<h2 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h2><p>小明上传一个500m的视频，等待这个视频上传成功，返回结果，但是在等待的过程中在做其他事情，这样的就是非阻塞</p>
<p>由前面四个例子，我们可以知道：同步就是需要自己去轮询（每隔一段时间看看视频上传成功了没），异步就是视频上传成功了，会自动通知你。 而阻塞就是在传视频途中你不可以做其他的事情，非阻塞则相反，你可以在执行的同事去干其他事情。</p>
<ul>
<li>同步与异步是相对操作结果来说，会不会等待结果返回。</li>
<li>阻塞与非阻塞是相对于线程是否被阻塞。</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实，这两者存在本质的区别，它们的<strong>修饰对象</strong>是不同的。阻塞和非阻塞是指进程访问的数据如果尚未就绪，进程是否需要等待，简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。</p>
<p>而同步和异步是指<strong>访问数据的机制</strong>,同步一般指主动请求并等待I/O操作完毕的方式,当数据就绪后在读写的时候必须阻塞,异步则指主动请求数据后便可以继续处理其它任务,随后等待I/O,操作完毕的通知,这可以使进程在数据读写时也不阻塞。</p>
<h1 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h1><blockquote>
<p>linux的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor(fd，文件描述符)</p>
</blockquote>
<h2 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h2><p>最常用的I/O模型就是阻塞I/O模型，缺省情况下，所有文件操作都是阻塞的。在进程空间recvfrom，其系统调用直到数据包到达且被复制到应用进程的缓冲区中或者发生错误时才返回，在此期间会一直等待，进程从调用recvfrom开始到它返回的整段时间都是被阻塞，因此被称为阻塞I/O模型。</p>
<p><img src="/2018/12/26/java-bio-nio/./blockedIOModel.png" alt="image"></p>
<h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><p>recvfrom从应用层到内核的时候，如果该缓冲区没有数据的话，就直接返回一个EWOULDBLOCK错误，一般都对非阻塞I/O模型进行轮询检查这个状态，看内核是不是有数据到来。</p>
<p><img src="/2018/12/26/java-bio-nio/./newIOModel.png" alt="image"></p>
<h2 id="IO-复用"><a href="#IO-复用" class="headerlink" title="IO 复用"></a>IO 复用</h2><p>linux提供select/poll，进程通过将一个或多个fd传递给select或者poll系统调用，阻塞在select操作上，这样select/poll可以帮我们监测多个fd是否处于就绪状态。select/poll是顺序扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些制约。linux还提供了一个epoll系统调用，epoll用于基于事件驱动方式代替顺序扫描，因此性能更高。当有fd就绪的时候，立即回调rollback.</p>
<p><img src="/2018/12/26/java-bio-nio/./多路复用IO.png" alt="image"></p>
<h2 id="IO-信号驱动"><a href="#IO-信号驱动" class="headerlink" title="IO 信号驱动"></a>IO 信号驱动</h2><p>首先开启套接口信号驱动I/O功能，并通过系统调用sigaction执行一个信号处理函数（此系统调用立即返回，进程继续工作，它是非阻塞的）。当数据准备就绪时，就为该进程生成一个SIGIO信号，通过信号回调通知应用程序调用recvfrom来读取数据，并通知主循环函数处理数据。</p>
<p><img src="/2018/12/26/java-bio-nio/./IO信号驱动.png" alt="image"></p>
<h2 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h2><p>告知内核启动某个操作，并让内核在整个操作完成后（包括将数据从内核复制到用户自己的缓冲区）通知我们。这种模型与信号驱动模型的主要区别是：信号驱动I/O由内核通知我们何时可以开始一个I/O操作；异步I/O模型由内核告诉我们I/O操作何时已经完成。</p>
<p><img src="/2018/12/26/java-bio-nio/./异步IO.png" alt="image"></p>
<h1 id="Java-BIO通信"><a href="#Java-BIO通信" class="headerlink" title="Java BIO通信"></a>Java BIO通信</h1><p>采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，它接收到客户连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的一请求一应答的通信模型。</p>
<h2 id="同步阻塞I-O"><a href="#同步阻塞I-O" class="headerlink" title="同步阻塞I/O"></a>同步阻塞I/O</h2><p>Demo:</p>
<p>同步阻塞I/O创建的BioSocketServer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BioSocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"The server is satrt in port: "</span> + port);</span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> BioSocketServerHandler(socket)).start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"The server close"</span>);</span><br><span class="line">                serverSocket.close();</span><br><span class="line">                serverSocket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处设置绑定8080端口，默认主机localhost，通过while循环来监听客户端的连接，如果没有客户端连接，阻塞在accept操作上。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BioSocketServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BioSocketServerHandler</span> <span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//创建BufferReader对象读取客户端发送的数据</span></span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//创建PrintWriter返回响应信息给客户端</span></span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//客户端和服务端数据交互是通过流的方式进行传输交互，所以获取流转换成BufferReader对象</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">this</span>.socket.getInputStream()));</span><br><span class="line">            <span class="comment">//这里要设置autoFlush为true，实现自动刷新到缓冲区，否则数据是无法进行发送的，除非手动调用flush刷新到缓冲区</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(<span class="keyword">this</span>.socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            String currentTime = <span class="keyword">null</span>;</span><br><span class="line">            String body = <span class="keyword">null</span>;</span><br><span class="line">			<span class="comment">//循环从BufferReader中读取客户端发送的数据，当读到了输入流的尾部，就退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                body = in.readLine();</span><br><span class="line">                <span class="keyword">if</span> (body == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"The server receive msg:"</span> + body);</span><br><span class="line">                currentTime = <span class="keyword">new</span> Date(System.currentTimeMillis()).toString();</span><br><span class="line">                <span class="comment">//返回响应信息给客户端</span></span><br><span class="line">                out.println(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>)&#123;</span><br><span class="line">               out.close();</span><br><span class="line">               out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当有新客户端连接的时候，调用BioSocketServerHandler进行连接，读写事件处理。</p>
</blockquote>
<p>同步阻塞I/O创建的BioSocketClient:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BioSocketClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="comment">//指定连接的host和端口</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//发送数据给服务端</span></span><br><span class="line">            out.println(<span class="string">"hello, I am client"</span>);</span><br><span class="line">            <span class="comment">//接收服务端返回响应信息</span></span><br><span class="line">            String resp = in.readLine();</span><br><span class="line">            System.out.println(<span class="string">"Now is : "</span>+resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过上面的BIO的demo，我们发现了每当有一个新客户连接进来的时候，服务端都必须创建一个线程处理新的客户端连接，一个线程只能处理一个客户端连接，在高性能高并发的服务器应用领域，往往可能都是需要能够承受成千上万个连接处理，这样的模型显然不能满足需求。</p>
<h2 id="伪异步I-O"><a href="#伪异步I-O" class="headerlink" title="伪异步I/O"></a>伪异步I/O</h2><p>优化上面的同步阻塞I/O一个连接需要一个线程处理带来的巨额线程开销，下面使用线程池来进行处理。</p>
<p>伪异步I/O创建的AsynBioSocketServer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynBioSocketServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"The server is satrt in port: "</span> + port);</span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//自定义一个线程池</span></span><br><span class="line">             AsynBioSocketServerHandlerExecutePool singleExecutor = <span class="keyword">new</span> AsynBioSocketServerHandlerExecutePool(<span class="number">50</span>, <span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">//把每次请求封装成一个task放到线程池里面去进行处理</span></span><br><span class="line">                singleExecutor.execute(<span class="keyword">new</span> com.yate.asynbio.AsynBioSocketServerHandler(socket));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"The time server close"</span>);</span><br><span class="line">                serverSocket.close();</span><br><span class="line">                serverSocket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynBioSocketServerHandlerExecutePool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsynBioSocketServerHandlerExecutePool</span> <span class="params">(<span class="keyword">int</span> maxPoolSize, <span class="keyword">int</span> queueSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executor = <span class="keyword">new</span> ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), maxPoolSize, <span class="number">120L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(queueSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span></span>&#123;</span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>伪异步I/O创建的AsynBioSocketServerHandler:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynBioSocketServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsynBioSocketServerHandler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">this</span>.socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(<span class="keyword">this</span>.socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            String currentTime = <span class="keyword">null</span>;</span><br><span class="line">            String body = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                body = in.readLine();</span><br><span class="line">                <span class="keyword">if</span> (body == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"The server receive msg:"</span> + body);</span><br><span class="line">                currentTime = <span class="keyword">new</span> Date(System.currentTimeMillis()).toString();</span><br><span class="line">                out.println(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>)&#123;</span><br><span class="line">               out.close();</span><br><span class="line">               out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>伪异步I/O创建的AsynBioSocketClient:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynBioSocketClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            out.println(<span class="string">"hello, i am client"</span>);</span><br><span class="line">            String resp = in.readLine();</span><br><span class="line">            System.out.println(<span class="string">"Now is : "</span>+resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了线程池来进行优化了，由于线程池和消息队列都是有界的，因此，无论并发量多大，都不会导致线程个数膨胀或者溢出，相比于原本的BIO，是一种改良，但是由于它底层采用的还是同步阻塞模型，因此还是无法从根本上解决问题。在进行read和write操作都是同步阻塞的，阻塞的时间取决于对方的I/O线程的处理速度和网络I/O的传输速度，如果我们的应用程序依赖用户的处理速度，那么可靠性就变得特别差。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下BIO或者伪异步IO存在的问题:</p>
<ol>
<li>服务端处理缓慢，返回应答消息耗费60s，平时只需要10ms</li>
<li>采用伪异步I/O的线程正在读取故障服务节点的响应，由于读取输入流是阻塞的，它将会被阻塞60s</li>
<li>假如所有的可用线程都被故障服务器阻塞，那后续所有的I/O消息都将在队列中排队</li>
<li>由于线程池采用的阻塞队列实现，当队列满了以后，后续入队列的操作将被阻塞</li>
<li>由于前端只有一个Accptor线程接收客户端接入，它被阻塞在线程池的同步阻塞队列之后，新的客户端请求消息将被拒绝，客户端会发生大量的连接超时</li>
<li>由于几乎所有的连接都超时，调用者会认为系统已经崩溃，无法接收到新的请求消息。</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>NIO</tag>
        <tag>BIO</tag>
        <tag>通信</tag>
        <tag>netty</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>jar包中没有主清单属性 解决方法</title>
    <url>/2018/08/01/mvn-pack/</url>
    <content><![CDATA[<h1 id="又踩坑了"><a href="#又踩坑了" class="headerlink" title="又踩坑了"></a>又踩坑了</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天搞公司项目，把eclipse上的项目转到idea上并且改为maven风格构建，在打包以后出现执行jar包时出现了个坑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;   xxx-1.0-SNAPSHOT.jar中没有主清单属性</span><br></pre></td></tr></table></figure>
<p>上网搜了很多资料基本都是用maven-shade-plugin的方式,在pom中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Main.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后打包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean compile //清除之前target编译文件并重新编译</span><br><span class="line">mvn clean package //对项目进行打包(因为配置过插件，所以jar包是可执行的)</span><br><span class="line">mvn clean install //安装项目，然后就可以使用了</span><br></pre></td></tr></table></figure></p>
<p>然而并没有什么卵用</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>google了半天终于发现了一个好方法——用maven-assembly-plugin打包。</p>
<p>还是改pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Main.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再打包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn assembly:assembly</span><br></pre></td></tr></table></figure></p>
<p>再以java -jar 执行jar包 终于成功跑动了。</p>
<blockquote>
<p>参考资料 <a href="https://www.cnblogs.com/qifengshi/p/6036870.html" target="_blank" rel="noopener">idea打包jar的多种方式</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 的 MVC 模式</title>
    <url>/2017/05/31/php-mvc/</url>
    <content><![CDATA[<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><h2 id="基本操作步骤"><a href="#基本操作步骤" class="headerlink" title="基本操作步骤"></a>基本操作步骤</h2><ol>
<li>浏览者  -&gt; 调用控制器 对其发出指令</li>
<li>控制器(C)  -&gt; 按指令选取一个合适的模型(M) </li>
<li>模型(M)  -&gt; 按控制器(C)指令取相应数据</li>
<li>控制器(C) -&gt; 按指令选取相应视图(V)</li>
<li>视图(V) -&gt; 把第三步取得的数据按用户想要的样子显示出来</li>
</ol>
<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//浏览者调用控制器</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">'testController.class.php'</span>);</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">'testModel.class.php'</span>);</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">'testView.class.php'</span>);</span><br><span class="line">    $testController = <span class="keyword">new</span> testController();<span class="comment">//**第一步**</span></span><br><span class="line">    $testController-&gt;show();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="require-和-require-once-的区别"><a href="#require-和-require-once-的区别" class="headerlink" title="require() 和 require_once()的区别"></a>require() 和 require_once()的区别</h2><p>  require()可以多次调用相同的文件而不会提示错误，require_once则只能调用相同的文件一次，如果require_once相同的文件多次就会报错，并停止解析，从这个require_once开始后面的代码将不被解析！ </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//控制器基本结构</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">testController</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            $testModel = <span class="keyword">new</span> testModel();<span class="comment">//**第二步**</span></span><br><span class="line">            $data =$testModel-&gt;get();<span class="comment">//**第三步**</span></span><br><span class="line">            $testView = <span class="keyword">new</span> testView();<span class="comment">//**第四步**</span></span><br><span class="line">            $testView-&gt;display($data);<span class="comment">//**第五步**</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="控制器的作用"><a href="#控制器的作用" class="headerlink" title="控制器的作用"></a>控制器的作用</h4><p> 调用模型并调用视图，将模型产生的数据传递给视图，并让相关视图去显示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//模型基本结构</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">testModel</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="模型的作用"><a href="#模型的作用" class="headerlink" title="模型的作用"></a>模型的作用</h4><p>  获取数据并处理返回数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//视图基本结构</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">testView</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> $data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h4><p>  将取得的数据进行组织、美化等，并最终向用户端输出</p>
<p>#smarty</p>
<blockquote>
<p>smarty.class.php 包含了smarty的所有功能<br>smartyBC.class.php 提升了smarty上下版本兼容性<br>smarty 五配置 两方法<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//五配置</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;left_delimiter = <span class="string">"&#123;"</span>;<span class="comment">//左定界符</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;right_delimiter = <span class="string">"&#125;"</span>;<span class="comment">//右定界符</span></span><br><span class="line"><span class="comment">//括起来部分交给smarty处理</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;template_dir = <span class="string">"tpl"</span>; <span class="comment">//HTML模版</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;compile_dir =      <span class="string">"template_c"</span>;     <span class="comment">//模版编译生成的文件</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;cache_dir =  <span class="string">"cache"</span>;<span class="comment">//缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两方法</span></span><br><span class="line">$smarty-&gt;caching = <span class="keyword">true</span>;<span class="comment">//开启缓存</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;cache_lifetime = <span class="number">120</span>;<span class="comment">//缓存时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这段时间不从数据库取得数据 直接从缓存获取</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;assign(<span class="string">'articleile'</span>,<span class="string">'文章标题'</span>);<span class="comment">//对smarty的模板进行赋值</span></span><br><span class="line"></span><br><span class="line">$smarty-&gt;display(<span class="string">'test.tpl'</span>);<span class="comment">//显示模板</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="smarty-的基本语法"><a href="#smarty-的基本语法" class="headerlink" title="smarty 的基本语法"></a>smarty 的基本语法</h2><h3 id="注释与变量输出"><a href="#注释与变量输出" class="headerlink" title="注释与变量输出"></a>注释与变量输出</h3><ol>
<li>注释语句</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;*这里是注释语句*&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 smarty里输出赋值进来的变量</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主要是调用assign(string,value)方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//exp:</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'title'</span>=&gt;<span class="string">'小时代的作者'</span>,<span class="string">'author'</span>=&gt;<span class="string">'小明'</span>);</span><br><span class="line"></span><br><span class="line">$smarty-&gt;assign(<span class="string">'arr'</span>,$arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在模板tpl中</span></span><br><span class="line">&#123;$arr.title&#125;&#123;$arr.author&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以这样写更接近php</span></span><br><span class="line"><span class="comment">//&#123;$arr['title']&#125;&#123;$arr['author']&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若array是二维数组的时候</span></span><br><span class="line"><span class="comment">//&#123;$arr['xxx']['title']&#125;&#123;$arr['xxx']['author']&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="变量调节器"><a href="#变量调节器" class="headerlink" title="变量调节器"></a>变量调节器</h3><ol>
<li><p>变量变成 首字母大写的调节器 capticalize<br>示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$articleTitle|capitalize&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串连接cat 多个参数用冒号连接<br>示例</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$articleTitle|cat:<span class="string">" yesterday."</span>&#125;</span><br><span class="line">&#123;$articletitle|cat:<span class="string">' yesterday'</span>:<span class="string">"."</span>&#125;</span><br></pre></td></tr></table></figure>
<p>3.日期格式化 date_format<br>示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$yesterday|date_format&#125;</span><br><span class="line">&#123;$yesterday|date_format:<span class="string">" :"</span>%A,%B %e,%Y %H:%M:%S<span class="string">"&#125;</span></span><br></pre></td></tr></table></figure>
<p>4.为未赋值或为空的变量指定的默认值default<br>示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$articleTitle|<span class="keyword">default</span>:<span class="string">"no title"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>5.转码 escape</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$url|<span class="string">"url"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>6.大小写转换 lower upper</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$articleTitle|lower&#125;</span><br><span class="line">&#123;$articleTitle|upper&#125;</span><br></pre></td></tr></table></figure>
<p>7.换行符替换成<br></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;$articleTitle|nl2br&#125;</span><br><span class="line"><span class="comment">//nl to br  *记忆</span></span><br></pre></td></tr></table></figure>
<p>###smarty if 语句</p>
<p>####Smarty的条件判断语句<br>1.基本句式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="keyword">if</span> $name eq <span class="string">"Fred"</span>&#125;</span><br><span class="line">Welcome Sir.</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">elseif</span> $name eq <span class="string">"Wilma"</span>&#125;</span><br><span class="line">Welcome Ma<span class="string">'am.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;else&#125;</span></span><br><span class="line"><span class="string">Welcome,whatever you are.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;/if&#125;</span></span><br></pre></td></tr></table></figure>
<p>2.条件修饰符有很多，简单的几个eq（==） neq（！=）gt（&gt;）lt（&lt;）</p>
<p>==3.修饰词时必须和变量或常量用空格格开==</p>
<h3 id="smarty-循环"><a href="#smarty-循环" class="headerlink" title="smarty 循环"></a>smarty 循环</h3><ol>
<li>section,sectionelse </li>
<li>常用属性name loop</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">article</span> <span class="attr">loop</span>=<span class="string">$articlelist</span>&gt;</span></span><br><span class="line">&#123;$articlelist[article].title&#125;</span><br><span class="line">&#123;$articlelist[article].author&#125;</span><br><span class="line">&#123;$articlelist[article].content&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>其他常用属性 start step max show<br>（1）start 循环执行的初始位置。如果该值为负数，开始位置从数组的尾部算起。例如：<br>  如果数组中有7个元素，指定start为-2，那么指向当前数组的索引为5.非法值（超过了循环数组的下限）将被自动调整为最接近的合法值。</li>
</ol>
<p>（2）step 该值决定循环的步长。例如指定step=2将只遍历下标为0、2、4等的元素。如果step为负值，那么遍历数组的时候从后向前遍历。</p>
<p>（3）max 设定循环最大执行次数。</p>
<p>（4）show 决定是否显示该循环。</p>
<h4 id="smarty-foreach"><a href="#smarty-foreach" class="headerlink" title="smarty foreach"></a>smarty foreach</h4><ul>
<li>item 相当于php里 foreach 中的as 后面的</li>
<li>from 被循环的数组</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;foreach item=k from=$ss&#125;</span><br><span class="line">    &#123;$k.title&#125;</span><br><span class="line">    &#123;$k.author&#125;</span><br><span class="line">    &#123;$k.content&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;foreachelse&#125;</span><br><span class="line">当前没有文章</span><br><span class="line">&#123;/foreach&#125;</span><br></pre></td></tr></table></figure>
<p>也可以这样写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;foreach $articlelist as $article&#125;</span><br><span class="line">    &#123;$k.title&#125;</span><br><span class="line">    &#123;$k.author&#125;</span><br><span class="line">    &#123;$k.content&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;foreachelse&#125;</span><br><span class="line">当前没有文章</span><br><span class="line">&#123;/foreach&#125;</span><br></pre></td></tr></table></figure>
<h3 id="smarty-模板的引用-include"><a href="#smarty-模板的引用-include" class="headerlink" title="smarty 模板的引用 include"></a>smarty 模板的引用 include</h3><ol>
<li>和php里的include差不多</li>
<li>具备自定义属性的功能</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//test.tpl</span><br><span class="line">&#123;include file=“header.tpl” sitename=“百度”&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//header.tpl</span><br><span class="line">&#123;$sitename&#125;</span><br></pre></td></tr></table></figure>
<h3 id="smarty-类和对象的赋值和使用"><a href="#smarty-类和对象的赋值和使用" class="headerlink" title="smarty 类和对象的赋值和使用"></a>smarty 类和对象的赋值和使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_object</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">meth1</span><span class="params">($param)</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> $param[<span class="number">0</span>].<span class="string">'已经'</span>.$param[<span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">     $myobj=<span class="keyword">new</span> my_object();</span><br><span class="line">     $smarty-&gt;assign(<span class="string">'myobj'</span>,$myobj);</span><br><span class="line">     $smarty-&gt;display(<span class="string">"test.html"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//********test.html*******************</span><br><span class="line"> <span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--以数组形式--&gt;</span></span><br><span class="line"> &#123;$myobj-&gt;meth1(array('苹果','熟了'))&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="smarty-使用php内置函数-和-自定义函数"><a href="#smarty-使用php内置函数-和-自定义函数" class="headerlink" title="smarty 使用php内置函数 和 自定义函数"></a>smarty 使用php内置函数 和 自定义函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">==|之前以第一个参数传入，后边以第二第三参数传入<span class="tag">&lt;<span class="name">br</span>&gt;</span>==</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//格式化时间&lt;br&gt;</span><br><span class="line">&#123;&quot;Y-m-d H:i&quot;date:$time&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//把字符串里的d字母替换成h</span><br><span class="line">    //格式：</span><br><span class="line">    &#123;&apos;d&apos;str_replace:&apos;h&apos;:$str&#125;; </span><br><span class="line">    //d要查找的字符 h要替换的字符  $str字符串</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MVC</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/2019/08/18/template-method-pattern/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>冲茶与冲咖啡的步骤?</p>
<p>冲茶:</p>
<ol>
<li>把水煮沸</li>
<li>用沸水浸泡茶叶</li>
<li>把茶倒进杯子</li>
<li>加柠檬</li>
</ol>
<p>冲咖啡:</p>
<ol>
<li>把水煮沸</li>
<li>用沸水冲泡咖啡</li>
<li>把咖啡倒进杯子</li>
<li>加糖和牛奶</li>
</ol>
<p>这样一对比, 是不是发现冲茶和冲咖啡步骤基本一致, 只是在某些步骤实现的细节上有区别?</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>从上面的思考来看我们可以做一层抽象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Boiling water"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Pouring into cup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Steeping in the tea"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adding Lemon"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dripping Coffee through filter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adding Suger and Milk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>模板方法模式在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中.模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤.</p>
</blockquote>
<p>uml类图:<br>xxxxx</p>
<p>看两个例子:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="comment">// 声明为final是为了不让子类改变这个算法</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        primitiveOperation2();</span><br><span class="line">        concreteOperation();</span><br><span class="line">        hook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">concreteOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这个抽象类有一个具体的操作.关于这类方法 稍后会详述.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二个例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="comment">// 声明为final是为了不让子类改变这个算法</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        primitiveOperation2();</span><br><span class="line">        concreteOperation();</span><br><span class="line">        hook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">concreteOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 具体的实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * hook(钩子) 子类可视情况决定要不要覆盖他们.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 这是一个具体的方法但他什么都不干</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="用模板方法排序"><a href="#用模板方法排序" class="headerlink" title="用模板方法排序"></a>用模板方法排序</h3><p> 从 JDK 来认识模板方法模式</p>
<p>Java数组类中 有两个方法 共同提供排序的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 一个helper方法 </span></span><br><span class="line"><span class="comment">  * 1. 创建数组a的拷贝</span></span><br><span class="line"><span class="comment">  * 2. 将该拷贝当做目标数组传给mergeSort()方法 同时传入源数组a, 数组最低下标和最高下标,排序下标0(从头开始排) 几个参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    Object aux[] = (Object[])a.clone();</span><br><span class="line">    mergeSort(aux, a, <span class="number">0</span>, a.length, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * mergetSort()可以看成模板方法, 包含排序算法, 此算法依赖于compareTo()方法的实现来完成算法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(Object src[], Object dest[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> off)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = low; i &lt; high; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; low &amp;&amp; ((Comparable)dest[j-<span class="number">1</span>]).compareTo((Comparable)dest[j]) &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            swap(dest, j, j-<span class="number">1</span>); <span class="comment">// 这是一个具体方法 已经在数组类中定义了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的sort()设计者希望可以用于所有类型的数组, 而我们必须实现compareTo(), 否则无法比较再进行排序</p>
<p>在这里 设计者利用了Comparable 接口, 你必须实现这个接口并提供这个接口所声明的方法</p>
<p>这里我们以 鸭子排序为例子 </p>
<p>我们既然会排序鸭子 当然就会有Duck[] 数组, 也就是说 我们要现有Duck类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">(String name, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Duck anotherDuck = (Duck) obj;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weight &lt; anotherDuck.weight) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.weight == anotherDuck.weight) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" weighs "</span> + weight; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckSortTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Ducks[] ducks = &#123;</span><br><span class="line">          <span class="keyword">new</span> Duck(<span class="string">"a"</span>, <span class="number">8</span>);  </span><br><span class="line">          <span class="keyword">new</span> Duck(<span class="string">"b"</span>, <span class="number">18</span>);  </span><br><span class="line">          <span class="keyword">new</span> Duck(<span class="string">"c"</span>, <span class="number">10</span>);  </span><br><span class="line">          <span class="keyword">new</span> Duck(<span class="string">"d"</span>, <span class="number">6</span>);  </span><br><span class="line">        &#125;;</span><br><span class="line">        display(ducks);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(ducks);</span><br><span class="line"></span><br><span class="line">        display(ducks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Duck[] ducks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Duck duck : ducks) &#123;</span><br><span class="line">            System.out.println(duck);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4><ol>
<li>排序的实现更像是策略模式, 而不是模板方法模式?</li>
</ol>
<p>策略模式我们使用所组合的的类实现了整个算法.而这里的排序算法并不完整, 它需要一个类填补compareTo()的实现.因此认为这更像模板方法</p>
<ol start="2">
<li>其他的模板方法例子?<br>JDK中 InputStream类的read()方法是由子类实现的, 而这个方法又会被read(byte b[], int off, int len)模板方法使用</li>
</ol>
<h1 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h1><blockquote>
<p>别调用我们, 我们会调用你。</p>
</blockquote>
<p>高层组件可以控制何时以及如何让低层组件参与计算</p>
<p>低层组件只可参与计算， 但不可直接调用高层组件</p>
<p>参考上面的冲茶例子，我们可以发现 高层组件(CaffeineBeverage),可以控制冲泡法的算法, 只有在需要子类实现某个方法时,才调用子类(低层组件, Tea or Coffee)<br>而Client只依赖CaffeineBeverage 而不会去依赖具体的Tea 或者 Coffee</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>还没空写…</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP加密URL地址</title>
    <url>/2017/09/15/url-encode/</url>
    <content><![CDATA[<h1 id="转-分享如何使用PHP将URL地址参数进行加密传输提高网站安全性"><a href="#转-分享如何使用PHP将URL地址参数进行加密传输提高网站安全性" class="headerlink" title="[转]分享如何使用PHP将URL地址参数进行加密传输提高网站安全性"></a>[转]分享如何使用PHP将URL地址参数进行加密传输提高网站安全性</h1><p> 大家在使用PHP进行GET或POST提交数据时，<br> 经常会在URL带着参数进行传递，<br> 比如<a href="http://www.mdaima.com/get.php?id=1&amp;page=5，" target="_blank" rel="noopener">www.mdaima.com/get.php?id=1&amp;page=5，</a><br> 这里就将id编号和page页码进行了参数传递，<br> 如果这样直接明文传输，<br> 会将参数直接暴露给用户，<br> 要是是比较重要的数据这样传输我觉得还是不太安全。<br> 那如果将参数变成下面这样，<br> 是不是会好点呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">www.mdaima.com/get.php?VGsAYQ96VzkEaF08DTxTLQIyDmsBIQtnVj0Fe1ciAD0EN1M0X2MHMQYxDDcAOwI%2FXToBPVM5ADxfag%3D%3D</span><br></pre></td></tr></table></figure>
<p>我们再加强一下，<br>将get.php重命名改为get_mb.php，<br>然后利用静态规则，<br>把get.html映射到get_mb.php，<br>这样即使用户试着访问get.php也无法找到真实的PHP文件了，<br>因为真实的PHP文件不是get.php而是get_mb.php，<br>以下是.htaccess规则设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteRule ^get.html$ get_mb.php?&amp;%&#123;QUERY_STRING&#125;   #.htaccess伪静态规则的设置（加入到.htaccess里就行）</span><br></pre></td></tr></table></figure>
<p>利用加密再配合伪静态设置，<br>最终效果就是下面这样了，<br>即隐藏了真实php文件get_mb.php又将参数都加密传输了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">www.mdaima.com/get.html?VGsAYQ96VzkEaF08DTxTLQIyDmsBIQtnVj0Fe1ciAD0EN1M0X2MHMQYxDDcAOwI%2FXToBPVM5ADxfag%3D%3D</span><br></pre></td></tr></table></figure>
<p>相比之下已经好一些了吧，<br>至少看上去会好很多，<br>那如何进行加密和解密呢？<br>请看下面函数（不用细看，直接拿过去用就行了，重点看如果调用）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------以下为加密函数（复制过去就行了）-----------------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyED</span><span class="params">($txt,$encrypt_key)</span></span>&#123;       </span><br><span class="line">    $encrypt_key =    md5($encrypt_key);</span><br><span class="line">    $ctr=<span class="number">0</span>;       </span><br><span class="line">    $tmp = <span class="string">""</span>;       </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)       </span><br><span class="line">    &#123;           </span><br><span class="line">        <span class="keyword">if</span> ($ctr==strlen($encrypt_key))</span><br><span class="line">        $ctr=<span class="number">0</span>;           </span><br><span class="line">        $tmp.= substr($txt,$i,<span class="number">1</span>) ^ substr($encrypt_key,$ctr,<span class="number">1</span>);</span><br><span class="line">        $ctr++;       </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">return</span> $tmp;   </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($txt,$key)</span>   </span>&#123;</span><br><span class="line">    $encrypt_key = md5(mt_rand(<span class="number">0</span>,<span class="number">100</span>));</span><br><span class="line">    $ctr=<span class="number">0</span>;       </span><br><span class="line">    $tmp = <span class="string">""</span>;      </span><br><span class="line">     <span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)       </span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span> ($ctr==strlen($encrypt_key))</span><br><span class="line">            $ctr=<span class="number">0</span>;           </span><br><span class="line">        $tmp.=substr($encrypt_key,$ctr,<span class="number">1</span>) </span><br><span class="line">            . (substr($txt,$i,<span class="number">1</span>) </span><br><span class="line">            ^ substr($encrypt_key,$ctr,<span class="number">1</span>));</span><br><span class="line">        $ctr++;       </span><br><span class="line">     &#125;       </span><br><span class="line">     <span class="keyword">return</span> keyED($tmp,$key);</span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($txt,$key)</span></span>&#123;       </span><br><span class="line">    $txt = keyED($txt,$key);       </span><br><span class="line">    $tmp = <span class="string">""</span>;       </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)       </span><br><span class="line">    &#123;           </span><br><span class="line">        $md5 = substr($txt,$i,<span class="number">1</span>);</span><br><span class="line">        $i++;           </span><br><span class="line">        $tmp.= (substr($txt,$i,<span class="number">1</span>) ^ $md5);       </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">return</span> $tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt_url</span><span class="params">($url,$key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rawurlencode(base64_encode(encrypt($url,$key)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt_url</span><span class="params">($url,$key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> decrypt(base64_decode(rawurldecode($url)),$key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">geturl</span><span class="params">($str,$key)</span></span>&#123;</span><br><span class="line">    $str = decrypt_url($str,$key);</span><br><span class="line">    $url_array = explode(<span class="string">'&amp;'</span>,$str);</span><br><span class="line">    <span class="keyword">if</span> (is_array($url_array))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($url_array <span class="keyword">as</span> $var)</span><br><span class="line">        &#123;</span><br><span class="line">            $var_array = explode(<span class="string">"="</span>,$var);</span><br><span class="line">            $vars[$var_array[<span class="number">0</span>]]=$var_array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $vars;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$key_url_md_5 = <span class="string">'mdaima.com-123-scc'</span>; <span class="comment">//可以更换为其它的加密标记，可以自由发挥</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//---------------以上为加密函数-结束（复制过去就行了）-----------------</span></span><br></pre></td></tr></table></figure>
<p>以上这个是关键的加密与解密函数，<br>下面看一下如何调用，<br>我们举例说一下将表单action中参数id和page进行加密并加入时间戳一起，<br>这样每次的链接地址都是动态的，<br>而且可以在接收页面设置页面限制超时的有效期了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">method</span>=<span class="string">"post"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">action</span>=<span class="string">"?&lt;?=encrypt_url("</span><span class="attr">id</span>=<span class="string">1&amp;page</span>=<span class="string">5</span>"<span class="attr">.</span>"&amp;<span class="attr">time</span>=<span class="string">".time(),$key_url_md_5)?&gt;"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面就是如何加密参数。再看一下如何解密接收到的参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$url_info = geturl($_SERVER[QUERY_STRING],$key_url_md_5);<span class="comment">//接收所有参数</span></span><br><span class="line">$page=$url_info[<span class="string">'page'</span>];<span class="comment">//解密对应参数</span></span><br><span class="line">$id=$url_info[<span class="string">'id'</span>];</span><br><span class="line">$time=$url_info[<span class="string">'time'</span>];<span class="comment">//这个是时间戳，大家可以利用这个参数判断一下</span></span><br><span class="line"><span class="comment">//链接生成的时间，就可以判断是否超时了（此项如果不需要也可以忽略）</span></span><br></pre></td></tr></table></figure>
<p>这样我们就得到了解密的$page和$id参数了，大家试一下吧，有问题也可以联系我！</p>
<blockquote>
<p>转载请注明：<a href="http://www.mdaima.com/jingyan/36.html" target="_blank" rel="noopener">分享如何使用PHP将URL地址参数进行加密传输提高网站安全性 | 码代码-李雷博客</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger 2  文档梳理</title>
    <url>/2018/08/02/swagger/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Swagger2 相对于传统wiki文档共享方式具有以下优势</p>
<ul>
<li>功能丰富 ：支持多种注解，自动生成接口文档界面，支持在界面测试API接口功能；</li>
<li>及时更新 ：开发过程中花一点写注释的时间，就可以及时的更新API文档，省心省力；</li>
<li>整合简单 ：通过添加pom依赖和简单配置，内嵌于应用中就可同时发布API接口文档界面，不需要部署独立服务。</li>
</ul>
<p>描述版本v2.7.0</p>
<h1 id="Swagger使用"><a href="#Swagger使用" class="headerlink" title="Swagger使用"></a>Swagger使用</h1><h2 id="Springboot-Swagger-2-部署"><a href="#Springboot-Swagger-2-部署" class="headerlink" title="Springboot + Swagger 2 部署"></a>Springboot + Swagger 2 部署</h2><ol>
<li><p>添加pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将swagger-ui中的界面配置至spring-boot环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">				.apiInfo(apiInfo())</span><br><span class="line">				.select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">"cn.lynnjy.controller"</span>))</span><br><span class="line">				.paths(PathSelectors.any())</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">				.title(<span class="string">"springboot利用swagger构建api文档"</span>)</span><br><span class="line">				.description(<span class="string">"简单优雅的restfun风格，http://www.lynnjy.cn"</span>)</span><br><span class="line">				.termsOfServiceUrl(<span class="string">"http:/www.lynnjy.cn"</span>)</span><br><span class="line">				.version(<span class="string">"1.0"</span>)</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>用@Configuration注解该类，等价于XML中配置beans；用@Bean标注方法等价于XML中配置bean。</p>
</blockquote>
<ol start="3">
<li><p>在Application类中加入注解@EnableSwagger2 表示开启Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目查看Swagger文档</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动SpringBoot项目，访问 http://localhost:8080/swagger-ui.html</span><br></pre></td></tr></table></figure>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）关于模型的注解： </span><br><span class="line">@Api </span><br><span class="line">@ApiModel </span><br><span class="line">（2）关于接口的注解： </span><br><span class="line">@ApiModelProperty </span><br><span class="line">@ApiOperation </span><br><span class="line">@ApiParam </span><br><span class="line">@ApiResponse </span><br><span class="line">@ApiResponses </span><br><span class="line">@ResponseHeader</span><br></pre></td></tr></table></figure>
<h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><p>@Api 用在类上，说明该类的作用。可以标记一个Controller类做为swagger 文档资源，使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/user"</span>, description = <span class="string">"Operations about user"</span>)</span><br></pre></td></tr></table></figure>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>url的路径值</td>
</tr>
<tr>
<td>tags</td>
<td>设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td>description</td>
<td>对api资源的描述</td>
</tr>
<tr>
<td>basePath</td>
<td>基本路径可以不配置</td>
</tr>
<tr>
<td>position</td>
<td>如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td>produces</td>
<td>For example, “application/json, application/xml”</td>
</tr>
<tr>
<td>consumes</td>
<td>For example, “application/json, application/xml”</td>
</tr>
<tr>
<td>protocols</td>
<td>Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td>authorizations</td>
<td>高级特性认证时配置</td>
</tr>
<tr>
<td>hidden</td>
<td>配置为true 将在文档中隐藏</td>
</tr>
</tbody>
</table>
<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(</span><br><span class="line">          value = <span class="string">"Find purchase order by ID"</span>,</span><br><span class="line">          notes = <span class="string">"For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generated exceptions"</span>,</span><br><span class="line">          response = Order,</span><br><span class="line">          tags = &#123;<span class="string">"Pet Store"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>url的路径值</td>
</tr>
<tr>
<td>tags</td>
<td>如果设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td>description</td>
<td>对api资源的描述</td>
</tr>
<tr>
<td>basePath</td>
<td>基本路径可以不配置</td>
</tr>
<tr>
<td>position</td>
<td>如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td>produces</td>
<td>For example, “application/json, application/xml”</td>
</tr>
<tr>
<td>consumes</td>
<td>For example, “application/json, application/xml”</td>
</tr>
<tr>
<td>protocols</td>
<td>Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td>authorizations</td>
<td>高级特性认证时配置</td>
</tr>
<tr>
<td>hidden</td>
<td>配置为true 将在文档中隐藏</td>
</tr>
<tr>
<td>response</td>
<td>返回的对象</td>
</tr>
<tr>
<td>responseContainer</td>
<td>这些对象是有效的 “List”, “Set” or “Map”.，其他无效</td>
</tr>
<tr>
<td>httpMethod</td>
<td>“GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”</td>
</tr>
<tr>
<td>code</td>
<td>http的状态码 默认 200</td>
</tr>
<tr>
<td>extensions</td>
<td>扩展属性</td>
</tr>
</tbody>
</table>
<h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3><p>与Controller中的方法并列使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">createUser</span><span class="params">(@RequestBody @ApiParam(value = <span class="string">"Created user object"</span>, required = <span class="keyword">true</span>)</span>  User user)</span></span><br></pre></td></tr></table></figure></p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>属性名称</td>
</tr>
<tr>
<td>value</td>
<td>属性值</td>
</tr>
<tr>
<td>defaultValue</td>
<td>默认属性值</td>
</tr>
<tr>
<td>allowableValues</td>
<td>可以不配置</td>
</tr>
<tr>
<td>required</td>
<td>是否属性必填</td>
</tr>
<tr>
<td>access</td>
<td>不过多描述</td>
</tr>
<tr>
<td>allowMultiple</td>
<td>默认为false</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏该属性</td>
</tr>
<tr>
<td>example</td>
<td>举例子</td>
</tr>
</tbody>
</table>
<h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a>@ApiResponse</h3><p>使用方式</p>
<p>与Controller中的方法并列使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ApiResponse(code = 400, message = &quot;Invalid user supplied&quot;)</span><br></pre></td></tr></table></figure></p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td>http的状态码</td>
</tr>
<tr>
<td>message</td>
<td>描述</td>
</tr>
<tr>
<td>response</td>
<td>默认响应类 Void</td>
</tr>
<tr>
<td>reference</td>
<td>参考ApiOperation中配置</td>
</tr>
<tr>
<td>responseHeaders</td>
<td>参考ResponseHeader 属性配置说明</td>
</tr>
<tr>
<td>responseContainer</td>
<td>参考ApiOperation中配置</td>
</tr>
</tbody>
</table>
<h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3><p>ApiResponses：响应集配置，使用方式：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(&#123; <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid Order"</span>) &#125;)</span><br></pre></td></tr></table></figure></p>
<p> 与Controller中的方法并列使用</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>多个ApiResponse配置</td>
</tr>
</tbody>
</table>
<h3 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a>@ResponseHeader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseHeader</span>(name=<span class="string">"head1"</span>,description=<span class="string">"response head conf"</span>)</span><br></pre></td></tr></table></figure>
<p>与Controller中的方法并列使用</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>响应头名称</td>
</tr>
<tr>
<td>description</td>
<td>头描述</td>
</tr>
<tr>
<td>response</td>
<td>默认响应类 Void</td>
</tr>
<tr>
<td>responseContainer</td>
<td>参考ApiOperation中配置</td>
</tr>
</tbody>
</table>
<h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3><p>@ApiImplicitParams：用在方法上包含一组参数说明； </p>
<p>@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面 </p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>properties</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>paramType</td>
<td>参数放在哪个地方 </td>
</tr>
<tr>
<td>name</td>
<td>参数代表的含义 </td>
</tr>
<tr>
<td>value</td>
<td>参数名称 </td>
</tr>
<tr>
<td>dataType：</td>
<td>参数类型，有String/int，无用 </td>
</tr>
<tr>
<td>required</td>
<td>是否必要 </td>
</tr>
<tr>
<td>defaultValue</td>
<td>参数的默认值 </td>
</tr>
</tbody>
</table>
<p>@ApiModel：描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候；</p>
<p>@ApiModelProperty：描述一个model的属性。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>spring springMVC Mybatis 笔记</title>
    <url>/2017/09/12/ssm/</url>
    <content><![CDATA[<blockquote>
<p>资料大部分来源于csdn 以及 how2java.com</p>
</blockquote>
<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>Spring 开源 轻量级 的 控制反转（IoC）和 面向切面（AOP）的容器框架 </p>
<h2 id="Spring特性"><a href="#Spring特性" class="headerlink" title="Spring特性"></a>Spring特性</h2><ul>
<li>从大小与开销都是轻量级的</li>
<li>通过控制反转的技术达到松耦合的目的</li>
<li>提供丰富的面向切面编程，允许通过分离应用的业务逻辑与系统级服务进行内聚性开发</li>
<li>包含并管理应用对象的配置和声明周期，这个意义上是一种容器</li>
<li>将简单的组件配置、组合成为复杂的应用，这个意义上是框架</li>
</ul>
<h2 id="spring的作用："><a href="#spring的作用：" class="headerlink" title="spring的作用："></a>spring的作用：</h2><ol>
<li>容器</li>
<li>提供多种技术的支持如–JMS–MQ支持–UnitTest–…</li>
<li>AOP（事务、日志等）</li>
<li>提供了众多方便应用的辅助类（JDBC Template等）</li>
<li>对主流应用框架（Hibernate等）提供了良好的支持</li>
</ol>
<p>适用范围：</p>
<ul>
<li>构建企业应用（SSH、SSM）</li>
<li>单独使用Bean容器（Bean管理）</li>
<li>单独AOP进行切面处理</li>
<li>其他Spring功能，如：对消息的支持等</li>
<li>在互联网中的应用</li>
</ul>
<h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>简单说就是创建对象由以前的程序员自己new 构造方法来调用，变成了交由Spring创建对象</p>
<p>哪些方面的控制被反转了呢：</p>
<ul>
<li>获得依赖对象的过程被反转了</li>
<li>控制被反转之后，获得依赖对象的过程由自身管理变为了由IOC容器主动注入</li>
</ul>
<h3 id="实现IOC的方法：注入"><a href="#实现IOC的方法：注入" class="headerlink" title="实现IOC的方法：注入"></a>实现IOC的方法：注入</h3><p>  所谓DI依赖注入，就是由IOC容器在运行期间，动态的将某种依赖关系注入到对象之中<br>  简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。 </p>
<p>  房屋中介               IOC<br>  找中介       ——-&gt;  找IOC容器<br>  中介介绍房子 ——-&gt;  容器返回对象<br>  租房、入住   ——-&gt;  使用对象</p>
<p>IOC: 即控制反转, 解决程序对象紧密耦合问题(方式: 工厂+反射+配置文件), 将程序中原来构造对象的操作,交给IoC容器, 当程序真正需要对象时,再找IoC容器获取. </p>
<p>DI: 即依赖注入, IoC容器需要为程序提供依赖对象,而所依赖的对象又依赖于其他对象,因此可以一次获取该对象所依赖的所有对象(如Controller依赖于Service, Service依赖于DAO, 因此Controller找Ioc容器获取Service, 当IoC容器提供Service的同时,DAO也同时注入到Service中) </p>
<h4 id="第一个测试项目-先看效果"><a href="#第一个测试项目-先看效果" class="headerlink" title="第一个测试项目 先看效果"></a>第一个测试项目 先看效果</h4><p>以eclipse IDE为例</p>
<ol>
<li>创建java project 暂命名Spring</li>
<li>下载spring 的 jar 包</li>
<li>导包 add external jars</li>
<li><p>准备pojo Category，用来演示IOC和DI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在src目录创建applicationContext.xml文件并完成配置</p>
</li>
<li><p>执行TestSpring通过spring获取Category对象，以及该对象被注入的name属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123; <span class="string">"applicationContext.xml"</span> &#125;);</span><br><span class="line"> </span><br><span class="line">        Category c = (Category) context.getBean(<span class="string">"c"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>若执行结果为category 1 则通过</p>
</li>
</ol>
<h3 id="关于注入"><a href="#关于注入" class="headerlink" title="关于注入"></a>关于注入</h3><p>小结:以获取对象的方式来进行比较</p>
<ul>
<li><p>传统的方式：<br>通过new 关键字主动创建一个对象<br>IOC方式<br>对象的生命周期由Spring来管理，直接从Spring那里去获取一个对象。 IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。 </p>
</li>
<li><p>打个比喻：<br>传统方式：相当于你自己去菜市场new 了一直鸡，但是是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。<br>用 IOC：相当于去馆子(Spring)点了一直 鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。</p>
<p>接口在Spring中的配置方式</p>
<ol>
<li>XML</li>
<li>注解</li>
</ol>
</li>
</ul>
<p>XML结构 例子</p>
<p>applicationContext.xml是Spring的核心配置文件 </p>
<p>实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context      </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Category"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"category 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注解方式 例子</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span><span class="comment">&lt;!-- 加上这句-- &gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;bean name="c" class="com.how2java.pojo.Category"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="name" value="category 1" /&gt;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">&lt;bean name="p" class="com.how2java.pojo.Product"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="name" value="product1" /&gt;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    &lt;!-- &lt;property name="category" ref="c" /&gt; --&gt;</span>  <span class="comment">&lt;!--该句注释--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>之后在Product.java的category属性前加上@Autowired注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>关于@Autowired的位置</p>
<p>除了前面的 也可以在属性前加上@Autowired 这种方式外，也可以在setCategory方法(<strong>成员变量的set方法</strong>)前加上@Autowired，这样来达到相同的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.category = category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了@Autowired之外，@Resource也是常用的手段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"c"</span>)</span><br><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure>
<p>上述例子是对注入对象行为的注解，那么bean对象本身，比如Category,Product可不可以移出applicationContext.xml配置文件，也通过注解进行呢？<br>接下来就讲解如何对Bean进行注解配置</p>
<p>修改applicationContext.xml，什么都去掉，只新增：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用是告诉Spring =&gt; bean都放在com.how2java.pojo这个包下 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>为Product类加上@Component注解，即表明此类是bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Component</span>(<span class="string">"p"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">为Category 类加上<span class="meta">@Component</span>注解，即表明此类是bean</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">    <span class="meta">@Component</span>(<span class="string">"c"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>另外，因为配置从applicationContext.xml中移出来了，所以属性初始化放在属性声明上进行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name=<span class="string">"product 1"</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name=<span class="string">"category 1"</span>;</span><br></pre></td></tr></table></figure>
<p>最后我们执行 main方法所在的TestSpring类<br>可以发现运行结果一样</p>
<p>小结：@Autowired是by type，@Resource是by name</p>
<h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h2><blockquote>
<p>AOP 即 Aspect Oriented Program 面向切面编程 </p>
</blockquote>
<blockquote>
<p>首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。 </p>
</blockquote>
<ul>
<li>所谓的<strong>核心业务</strong>，比如登陆，增加数据，删除数据都叫核心业务 </li>
<li>所谓的<strong>周边功能</strong>，比如性能统计，日志，事务管理等等 </li>
</ul>
<p><strong>周边功能</strong> 在Spring的面向切面编程AOP思想里，即被定义为 <strong>切面</strong></p>
<p>在面向切面编程AOP的思想里面，核心业务功能和切面功能分别<strong>独立进行开发</strong> </p>
<p>然后把切面功能和核心业务功能 “<strong>编织</strong>“ 在一起，这就叫<strong>AOP</strong></p>
<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>功能分两大类，辅助功能和核心业务功能</li>
<li>辅助功能和核心业务功能彼此独立进行开发</li>
<li>比如登陆功能，即便是没有性能统计和日志输出，也可以正常运行</li>
<li>如果有需要，就把”日志输出” 功能和 “登陆” 功能 编织在一起，这样登陆的时候，就可以看到日志输出了</li>
<li>辅助功能，又叫做切面，这种能够选择性的，低耦合的把切面和核心业务功能结合在一起的编程思想，就叫做切面编程</li>
</ol>
<p><img src="http://stepimage.how2j.cn/1878.png" alt="image"></p>
<h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p>接着上面的项目</p>
<p>准备一个业务类ProductService<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="keyword">package</span> com.how2java.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"doSomeService"</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着在xml中配置bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"s"</span> <span class="attr">class</span>=<span class="string">"com.how2java.service.ProductService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在引入切面之前  先通过TestSpring调用该业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.service.ProductService;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123; <span class="string">"applicationContext.xml"</span> &#125;);</span><br><span class="line">        ProductService s = (ProductService) context.getBean(<span class="string">"s"</span>);</span><br><span class="line">        s.doSomeService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时控制台输出结果为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doSomeService</span><br></pre></td></tr></table></figure></p>
<p>接下来做一个日志切面</p>
<p>该日志切面的功能是 </p>
<p>在调用核心功能之前和之后分别打印日志</p>
<p>切面就是原理图中讲的那些辅助功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.how2java.aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start log:"</span> + joinPoint.getSignature().getName());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Object object = joinPoint.proceed();</span><br><span class="line">        <span class="comment">//该句用于将来与某个核心功能编织之后，用于 执行 核心功能的代码</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"end log:"</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>划重点</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object object = joinPoint.proceed();</span><br></pre></td></tr></table></figure></p>
<p>创建切面以后 继续配置好applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"s"</span> <span class="attr">class</span>=<span class="string">"com.how2java.service.ProductService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggerAspect"</span> <span class="attr">class</span>=<span class="string">"com.how2java.aspect.LoggerAspect"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定核心业务功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"loggerCutpoint"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=</span></span><br><span class="line"><span class="tag">        "<span class="attr">execution</span>(* <span class="attr">com.how2java.service.ProductService.</span>*(<span class="attr">..</span>)) "/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表示对满足如下条件的方法调用，进行切面操作--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- * 表示返回任意类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.how2java.service.ProductService.* 包名以 com.how2java.service.ProductService 开头的类的任意方法--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (..) 参数是任意数量和类型--&gt;</span></span><br><span class="line">        </span><br><span class="line">     <span class="comment">&lt;!-- 指定辅助功能--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">ref</span>=<span class="string">"loggerAspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"loggerCutpoint"</span> <span class="attr">method</span>=<span class="string">"log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span>     </span><br><span class="line"><span class="comment">&lt;!-- 通过aop:config把业务对象与辅助功能编织在一起。 --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在不改变TestSpring 的情况下 再次执行<br>控制台输出结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start log:doSomeService</span><br><span class="line">doSomeService</span><br><span class="line">end log:doSomeService</span><br></pre></td></tr></table></figure></p>
<h2 id="注解方式AOP"><a href="#注解方式AOP" class="headerlink" title="注解方式AOP"></a>注解方式AOP</h2><blockquote>
<p>该部分将上一节中的xml配置方式改造为注解方式</p>
</blockquote>
<ul>
<li>注解配置业务类</li>
</ul>
<p>使用@Component(“s”) 注解ProductService 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"s"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"doSomeService"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解配置切面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* com.how2java.service.ProductService.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start log:"</span> + joinPoint.getSignature().getName());</span><br><span class="line">        Object object = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"end log:"</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Aspect 注解表示这是一个切面</p>
<p>@Component 表示这是一个bean,由Spring进行管理</p>
<p>@Around(value = “execution(<em> com.how2java.service.ProductService.</em>(..))”) 表示对com.how2java.service.ProductService 这个类中的所有方法进行切面操作</p>
<ul>
<li>applicationContext.xml</li>
</ul>
<p>去掉原有信息，添加如下3行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.how2java.aspect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.how2java.service"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  扫描包com.how2java.aspect和com.how2java.service，定位业务类和切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>PS：关于 <a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a></p>
<blockquote>
<p><a href="http://blog.csdn.net/yoxibaga/article/details/23467781" target="_blank" rel="noopener">http://blog.csdn.net/yoxibaga/article/details/23467781</a></p>
</blockquote>
<ul>
<li>TestSpring无需更改</li>
</ul>
<p>此时输出结果依旧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start log:doSomeService</span><br><span class="line">doSomeService</span><br><span class="line">end log:doSomeService</span><br></pre></td></tr></table></figure>
<h2 id="SPRING-注解方式测试"><a href="#SPRING-注解方式测试" class="headerlink" title="SPRING 注解方式测试"></a>SPRING 注解方式测试</h2><p>注解方式用到了junit,所以需要下载:</p>
<ul>
<li>junit-4.12.jar</li>
<li>hamcrest-all-1.3.jar<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<span class="comment">//记得导包</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")//定位Spring的配置文件</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Category c;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>同时在applicationContext.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Category"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"category 1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行TestSpring</p>
<p>控制台输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">十一月 13, 2017 8:01:43 下午 org.springframework.test.context.TestContextManager retrieveTestExecutionListeners</span><br><span class="line">信息: @TestExecutionListeners is not present for class [class com.how2java.test.TestSpring]: using defaults.</span><br><span class="line">十一月 13, 2017 8:01:43 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [applicationContext.xml]</span><br><span class="line">十一月 13, 2017 8:01:43 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.GenericApplicationContext@17d99928: startup date [Mon Nov 13 20:01:43 CST 2017]; root of context hierarchy</span><br><span class="line">十一月 13, 2017 8:01:43 下午 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons</span><br><span class="line">信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@67784306: defining beans [c,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy</span><br><span class="line">category 1</span><br><span class="line">十一月 13, 2017 8:01:43 下午 org.springframework.context.support.AbstractApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.GenericApplicationContext@17d99928: startup date [Mon Nov 13 20:01:43 CST 2017]; root of context hierarchy</span><br></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>切面的好处到底在哪呢？</p>
<ul>
<li><p>不用AOP呢，每次打日志都去修改业务代码。</p>
</li>
<li><p>使用AOP呢，业务代码不需要做任何改变，通过配置就可以实现哪些业务要上日志，哪些业务不用上日志。代码量更小， 不改代码意味着，犯错的机会更小，维护成本更低，同一时间，开发人员能完成的工作量也更大了。</p>
</li>
</ul>
<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="运行框架"><a href="#运行框架" class="headerlink" title="运行框架"></a>运行框架</h2><ul>
<li>导包</li>
</ul>
<p>解压后复制到  x:/project/springmvc/WebContent/WEB-INF/lib目录下</p>
<h2 id="第-配置web-xml"><a href="#第-配置web-xml" class="headerlink" title="第- 配置web.xml"></a>第- 配置web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建springmvc-servlet.xml</li>
</ul>
<p>在WEB-INF目录下创建 springmvc-servlet.xml</p>
<p>springmvc-servlet.xml 与上一步中的<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>springmvc</strong>对应</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//SPRING//DTD BEAN//EN"</span> <span class="meta-string">"http://www.springframework.org/dtd/spring-beans.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlHandlerMapping"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/index"</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"indexController"</span> <span class="attr">class</span>=<span class="string">"controller.IndexController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是Spring MVC的 映射配置文件</p>
<p>表示访问路径/index会交给id=indexController的bean处理</p>
<p>id=indexController的bean配置为类：IndexController</p>
<ul>
<li>创建控制类 IndexController   </li>
</ul>
<p>控制类 IndexController实现接口Controller </p>
<p>提供方法handleRequest处理请求</p>
<p>方法handleRequest，用于进行请求的功能处理，处理完请求后返回ModelAndView（Model模型数据部分 和 View视图部分）。</p>
<p>SpringMVC通过 ModelAndView 对象把模型和视图结合在一起</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</span><br><span class="line">        mav.addObject(<span class="string">"message"</span>, <span class="string">"Hello Spring MVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建视图页面index.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;$&#123;message&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问路径/index</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/index</span><br></pre></td></tr></table></figure>
<p>页面显示”Hello Spring MVC”  则代表框架运行成功</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>用户访问 /index</li>
<li>根据web.xml中的配置 所有的访问都会经过DispatcherServlet</li>
<li>根据配置文件springmvc-servlet.xml ，访问路径/index<br>会进入IndexController类</li>
<li>在IndexController中指定跳转到页面index.jsp，并传递message数据</li>
<li>在index.jsp中显示message信息</li>
</ol>
<h2 id="视图定位"><a href="#视图定位" class="headerlink" title="视图定位"></a>视图定位</h2><p>前面指定视图的代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</span><br></pre></td></tr></table></figure>
<p>所谓的视图定位，指的是代码还是写成<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ModelAndView(<span class="string">"index"</span>);</span><br></pre></td></tr></table></figure></p>
<p>但是会跳转到 index.jsp </p>
<ul>
<li>修改springmvc-servlet.xml</li>
</ul>
<p>在前面的一节基础上加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改IndexController</li>
</ul>
<p>把IndexController类的这一行代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</span><br></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index"</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>移动index.jsp以检验</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在WEB-INF下新建目录page</span><br><span class="line">把index.jsp移动到 WEB-INF/page 目录下</span><br></pre></td></tr></table></figure>
<ul>
<li>访问/index<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/index</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><ul>
<li>修改IndexController<br>在控制器类前加上@Controller(注:记得导包)</li>
</ul>
<p>在方法handleRequest 前面加上 @RequestMapping(“/index”) 表示路径/index会映射到该方法上</p>
<p>注意：不再让IndexController实现Controller接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index"</span>);</span><br><span class="line">        mav.addObject(<span class="string">"message"</span>, <span class="string">"Hello Spring MVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改springmvc-servlet.xml</li>
</ul>
<p>增加<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>之前的xml变为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context         </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"irViewResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;bean id="simpleUrlHandlerMapping" --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;property name="mappings"&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             &lt;props&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                 &lt;prop key="/index"&gt;indexController&lt;/prop&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             &lt;/props&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;bean id="indexController" class="controller.IndexController"&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处要特别注意头部的beans中的<strong>xmlns</strong>属性相比之前有所改变</p>
<p>若漏加 tomcat启动时会抛出异常</p>
<ul>
<li>访问/index</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/index</span><br></pre></td></tr></table></figure>
<p>显示依旧 则成功</p>
<h2 id="接收表单数据"><a href="#接收表单数据" class="headerlink" title="接收表单数据"></a>接收表单数据</h2><ul>
<li>添加实体类Product</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加表单提交页面addProduct.jsp</li>
</ul>
<p>在web目录下 （不是在WEB-INF下）增加商品的页面addProduct.jsp</p>
<p><strong>注意</strong>：++产品名称input的name要使用name，而不是 product.name++<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span>%&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"addProduct"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    产品名称 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    产品价格： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"增加商品"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>添加控制器ProductController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> pojo.Product;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addProduct"</span>)<span class="comment">//映射/addProduct路径-&gt; add()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">add</span><span class="params">(Product product)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//为add方法准备一个Product 参数，用于接收注入</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"showProduct"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加接收页面showProduct.jsp</p>
</li>
</ul>
<p>在WEB-INF/page 目录下创建 showProduct.jsp </p>
<p>用 EL 表达式显示用户提交的名称和价格</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">产品名称： $&#123;product.name&#125;&lt;br&gt;</span><br><span class="line">产品价格： $&#123;product.price&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问页面提交表单验证效果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/addProduct.jsp</span><br></pre></td></tr></table></figure>
<h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><blockquote>
<p>重定向</p>
</blockquote>
<p>在IndexController中加入一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jump"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/index"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>访问页面<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/jump</span><br></pre></td></tr></table></figure></p>
<p>结果客户端跳转到了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:8080/springmvc/index</span><br></pre></td></tr></table></figure></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>在IndexController中加入一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/check"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">check</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//为方法check()提供参数HttpSession session，这样就可以在方法体中使用session了</span></span><br><span class="line">        </span><br><span class="line">        Integer i = (Integer) session.getAttribute(<span class="string">"count"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">null</span>)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">        session.setAttribute(<span class="string">"count"</span>, i);</span><br><span class="line">        <span class="comment">//跳转到check.jsp页面</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"check"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>添加check.jsp<br><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">session中记录的访问次数：$&#123;count&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试 </p>
<p>访问<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/check</span><br></pre></td></tr></table></figure></p>
<p>每次访问，次数都+1</p>
<h2 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h2><ul>
<li>web.xml配置filter</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>表单提交方式改为post</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form action=<span class="string">"addProduct"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"> </span><br><span class="line">    产品名称 ：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;&lt;br /&gt;</span><br><span class="line">    产品价格： &lt;input type=<span class="string">"text"</span> name=<span class="string">"price"</span> value=<span class="string">""</span>&gt;&lt;br /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"增加商品"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>为什么要改成post方法提交？</p>
<p>这个就涉及到不同浏览器对get这种方式的处理手法有所区别的。</p>
<p>某些浏览器，会对get方式提交的数据进行二次编码，导致服务端取出数据无法正确解码，所以尽量使用post方式，确保中文可以正常处理。</p>
<h2 id="文化上传"><a href="#文化上传" class="headerlink" title="文化上传"></a>文化上传</h2><ul>
<li>配置web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>表示允许访问*.jpg。</strong> 注意是<strong>访问</strong></p>
<p>为什么要加这一段呢？ 因为配置springmvc的servlet的时候，使用的路径是”/“，导致静态资源在默认情况下不能访问，所以要加上这一段，允许访问jpg。 <strong>并且必须加在springmvc的servlet之前</strong></p>
<p>如果你配置spring-mvc使用的路径是/*.do，就不会有这个问题了。</p>
<p><strong>注</strong>： 这里仅仅是允许访问jpg,如果你要显示png,gif那么需要额外进行配置</p>
<ul>
<li>配置springmvc-servlet.xml</li>
</ul>
<p>新增<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>开放对上传功能的支持</p>
<ul>
<li>创建upload.jsp 上传页面</li>
</ul>
<p>上传页面，++需要注意的是form 的两个属性必须提供++</p>
<p><strong>method=”post”</strong> 和 <strong>enctype=”multipart/form-data”</strong> 缺一不可</p>
<p>上传组件 增加一个属性 <strong>accept=”image/*”</strong> 表示<strong>只能选择图片进行上传</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line">  </span><br><span class="line">&lt;form action=<span class="string">"uploadImage"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">  选择图片:&lt;input type=<span class="string">"file"</span> name=<span class="string">"image"</span> accept=<span class="string">"image/*"</span> /&gt; &lt;br&gt; </span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>留意<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个<strong>image</strong>，++之后注入页面的image变量名要与之对应++</p>
<ul>
<li>准备pojo类UploadedImageFile</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadedImageFile</span> </span>&#123;</span><br><span class="line">    MultipartFile image;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartFile <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(MultipartFile image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建UploadController 上传控制器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.xwork.RandomStringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> pojo.UploadedImageFile;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/uploadImage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">upload</span><span class="params">(HttpServletRequest request, UploadedImageFile file)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalStateException, IOException </span>&#123;</span><br><span class="line">        String name = RandomStringUtils.randomAlphanumeric(<span class="number">10</span>);</span><br><span class="line">        String newFileName = name + <span class="string">".jpg"</span>;</span><br><span class="line">        File newFile = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">"/image"</span>), newFileName);</span><br><span class="line">        newFile.getParentFile().mkdirs();</span><br><span class="line">        file.getImage().transferTo(newFile);</span><br><span class="line"> </span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"showUploadedFile"</span>);</span><br><span class="line">        mav.addObject(<span class="string">"imageName"</span>, newFileName);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>showUploadedFile.jsp 显示图片的页面</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;img src=<span class="string">"image/$&#123;imageName&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/upload.jsp</span><br></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul>
<li>创建拦截器类IndexInterceptor  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> interceptor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;  </span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 在业务处理器处理请求之前被调用  </span></span><br><span class="line"><span class="comment">     * 如果返回false  </span></span><br><span class="line"><span class="comment">     *     从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链 </span></span><br><span class="line"><span class="comment">     * 如果返回true  </span></span><br><span class="line"><span class="comment">     *    执行下一个拦截器,直到所有的拦截器都执行完毕  </span></span><br><span class="line"><span class="comment">     *    再执行被拦截的Controller  </span></span><br><span class="line"><span class="comment">     *    然后进入拦截器链,  </span></span><br><span class="line"><span class="comment">     *    从最后一个拦截器往回执行所有的postHandle()  </span></span><br><span class="line"><span class="comment">     *    接着再从最后一个拦截器往回执行所有的afterCompletion()  </span></span><br><span class="line"><span class="comment">     */</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,    </span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"preHandle(), 在访问Controller之前被调用"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 在业务处理器处理请求执行完成后,生成视图之前执行的动作    </span></span><br><span class="line"><span class="comment">     * 可在modelAndView中加入数据，比如当前时间 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,    </span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, Object handler,    </span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"postHandle(), 在访问Controller之后，访问视图之前被调用,这里可以注入一个时间到modelAndView中，用于后续视图显示"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"date"</span>,<span class="string">"由拦截器生成的时间:"</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等   </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,    </span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, Object handler, Exception ex)</span>  </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">           </span><br><span class="line">        System.out.println(<span class="string">"afterCompletion(), 在访问视图之后被调用"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置拦截器</li>
</ul>
<p>修改springmvc-servlet.xml以对/index路径进行拦截 </p>
<p>如果要拦截其他路径：</p>
<p>/** 拦截所有</p>
<p>/category/** 拦截/category路径下的所有</p>
<p><strong>xml 记得补充MVC的描述</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context         </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc  </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--下面省略--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>后面加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/index"</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"interceptor.IndexInterceptor"</span>/&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改 index.jsp</li>
</ul>
<p>打印拦截器放进去的日期</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;$&#123;message&#125;&lt;/h1&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;$&#123;date&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<p>访问<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/springmvc/index</span><br></pre></td></tr></table></figure></p>
<p>查看控制台输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console:</span><br><span class="line">    preHandle(), 在访问Controller之前被调用</span><br><span class="line">    postHandle(), 在访问Controller之后，访问视图之前被调用,这里可以注入一个时间到modelAndView中，用于后续视图显示</span><br><span class="line">    afterCompletion(), 在访问视图之后被调用</span><br></pre></td></tr></table></figure></p>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>平时我们都用JDBC访问数据库，除了需要自己写SQL之外，还必须操作Connection, Statment, ResultSet 这些其实只是手段的辅助类。 不仅如此，访问不同的表，还会写很多雷同的代码，显得繁琐和枯燥。 </p>
<p>那么用了Mybatis之后，只需要自己提供SQL语句，其他的工作，诸如建立连接，Statement， JDBC相关异常处理等等都交给Mybatis去做了，那些重复性的工作Mybatis也给做掉了，我们只需要关注在增删改查等操作层面上，而把技术细节都封装在了我们看不见的地方。 </p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ul>
<li><p>创建Mysql数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> how2java;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> how2java;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category_ (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> how2java;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="literal">null</span>,<span class="string">'category1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="literal">null</span>,<span class="string">'category2'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个java项目mybatis</p>
</li>
<li><p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置文件mybatis-config.xml</p>
</li>
</ul>
<p>在<strong>src</strong>目录下创建mybatis的主配置文件<strong>mybatis-config.xml</strong> (相当于hibernate中的hibernate.cfg.xml)</p>
<p>其作用主要是提供连接数据库用的驱动，数据库名称，编码方式，账号密码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及别名，自动扫描com.how2java.pojo下的类型，使得在后续配置文件Category.xml中使用resultType的时候，可以直接使用Category,而不必写全com.how2java.pojo.Category</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>映射Category.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Category.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>完整代码如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Category.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>配置文件Category.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategory"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">            select * from   category_      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这条sql语句用<strong>id: listCategory</strong>进行标示以供后续代码调用。</p>
<p><strong>resultType=”Category”</strong> 表示返回的数据和Category关联起来，</p>
<p>这里本应该使用的是 <strong>com.how2java.pojo.Category</strong>,</p>
<p>但是因为上一步配置了别名，所以直接使用Category就行了</p>
<ul>
<li><p>测试类TestMybatis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        <span class="comment">//根据配置文件mybatis-config.xml得到sqlSessionFactory </span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//然后再根据sqlSessionFactory 得到session</span></span><br><span class="line">        SqlSession session=sqlSessionFactory.openSession();</span><br><span class="line">         </span><br><span class="line">        List&lt;Category&gt; cs=session.selectList(<span class="string">"listCategory"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本原理</p>
</li>
</ul>
<ol>
<li>应用程序找Mybatis要数据</li>
<li><p>mbatis从数据库中找来数据<br> 2.1 通过mybatis-config.xml 定位哪个数据库</p>
<p> 2.2 通过Category.xml执行对应的select语句</p>
<p> 2.3 基于Catgory.xml把返回的数据库记录封装在Category对象中</p>
<p> 2.4 把多个Category对象装在一个Category集合中</p>
</li>
<li>返回一个Category集合</li>
</ol>
<p><img src="http://stepimage.how2j.cn/4205.png" alt="image"></p>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><blockquote>
<p>crud是指在做计算处理时的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)几个单词的首字母简写。</p>
</blockquote>
<ul>
<li>配置文件Category.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></span><br><span class="line">            insert into category_ ( name ) values (#&#123;name&#125;)    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></span><br><span class="line">            delete from category_ where id= #&#123;id&#125;   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCategory"</span> <span class="attr">parameterType</span>=<span class="string">"_int"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">            select * from   category_  where id= #&#123;id&#125;    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></span><br><span class="line">            update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategory"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">            select * from   category_      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//insert</span></span><br><span class="line">        Category c = <span class="keyword">new</span> Category();</span><br><span class="line">        c.setName(<span class="string">"新增加的Category"</span>);</span><br><span class="line">        session.insert(<span class="string">"addCategory"</span>,c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        <span class="comment">// Category c = new Category();</span></span><br><span class="line">        <span class="comment">//c.setId(6);</span></span><br><span class="line">        <span class="comment">//session.delete("deleteCategory",c);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//delete也可这样写</span></span><br><span class="line">        <span class="comment">//Category c = session.selectOne("getCategory", 6);</span></span><br><span class="line">        session.delete(<span class="string">"deleteCategory"</span>, c);</span><br><span class="line">        </span><br><span class="line">        &lt;!--&lt;delete id=<span class="string">"deleteCategory"</span> parameterType=<span class="string">"int"</span> &gt;--&gt;</span><br><span class="line">        &lt;!--    delete from category_ where id= #&#123;id&#125;   --&gt;</span><br><span class="line">        &lt;!--&lt;/delete&gt;--&gt;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//select</span></span><br><span class="line">        <span class="comment">//Category c= session.selectOne("getCategory",3);</span></span><br><span class="line">        <span class="comment">//System.out.println(c.getName());</span></span><br><span class="line">        <span class="comment">//listAll(session);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//update</span></span><br><span class="line">        <span class="comment">//Category c= session.selectOne("getCategory",3);</span></span><br><span class="line">        <span class="comment">//c.setName("修改了的Category名稱");</span></span><br><span class="line">        <span class="comment">//session.update("updateCategory",c);</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        listAll(session);</span><br><span class="line">         </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(SqlSession session)</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; cs = session.selectList(<span class="string">"listCategory"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>xml加上<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategoryByName"</span>  <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">        select * from   category_  where name like concat('%',#&#123;0&#125;,'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在测试类中加入<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Category&gt; cs = session.selectList(<span class="string">"listCategoryByName"</span>,<span class="string">"cat"</span>);<span class="comment">//第二个参数即上面xml中的#&#123;0&#125; 为string类型</span></span><br></pre></td></tr></table></figure></p>
<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>若在模糊查询基础上加多个条件</p>
<p>xml加上<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategoryByIdAndName"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">    select * from   category_  where id&gt; #&#123;id&#125;  and name like concat('%',#&#123;name&#125;,'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为是多个参数，而selectList方法又只接受一个参数对象，所以需要把多个参数放在Map里，然后把这个Map对象作为参数传递进去</p>
<p>测试类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"id"</span>, <span class="number">3</span>);</span><br><span class="line">params.put(<span class="string">"name"</span>, <span class="string">"cat"</span>);</span><br><span class="line">List&lt;Category&gt; cs = session.selectList(<span class="string">"listCategoryByIdAndName"</span>,params);</span><br></pre></td></tr></table></figure></p>
<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>关系升级为1个目录(Category)可对应多个产品(Product)</p>
<p>更新下数据库内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> how2java;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product_(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">price <span class="built_in">float</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">cid <span class="built_in">int</span> ,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> how2java;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> category_;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'category1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">'category2'</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> product_;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'product a'</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">'product b'</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">'product c'</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">'product x'</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="string">'product y'</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">6</span>,<span class="string">'product z'</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>此时catagory_表数据为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id  name</span><br><span class="line">1	category1</span><br><span class="line">2	category2</span><br><span class="line"></span><br><span class="line">而  product_表为</span><br><span class="line"></span><br><span class="line">id      name            price   cid</span><br><span class="line">1	product a	88.88	1</span><br><span class="line">2	product b	88.88	1</span><br><span class="line">3	product c	88.88	1</span><br><span class="line">4	product x	88.88	2</span><br><span class="line">5	product y	88.88	2</span><br><span class="line">6	product z	88.88	2</span><br></pre></td></tr></table></figure></p>
<p>新建Product类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改Category实体类，提供变量名为<strong>products</strong>的集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    List&lt;Product&gt; products;<span class="comment">//加上该属性与getter setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">getProducts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> products;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProducts</span><span class="params">(List&lt;Product&gt; products)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.products = products;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Category [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Category.xml</p>
<p>通过left join关联查询，对Category和Product表进行关联查询。<br>与前面学习的有所区别，这里不是用的resultType, 而是resultMap，通过resultMap把数据取出来放在对应的 对象属性里<br><strong>注：</strong> Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。<br>name字段同理。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Category"</span> <span class="attr">id</span>=<span class="string">"categoryBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">&lt;!-- 一对多的关系 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"products"</span> <span class="attr">ofType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">&lt;!-- 关联查询分类和产品表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategory"</span> <span class="attr">resultMap</span>=<span class="string">"categoryBean"</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from category_ c left join product_ p on c.id = p.cid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">  </span><br><span class="line">        List&lt;Category&gt; cs = session.selectList(<span class="string">"listCategory"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">            List&lt;Product&gt; ps = c.getProducts();</span><br><span class="line">            <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">                System.out.println(<span class="string">"\t"</span>+p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Category [id=1, name=category1]</span><br><span class="line">	Product [id=1, name=product a, price=88.88]</span><br><span class="line">	Product [id=2, name=product b, price=88.88]</span><br><span class="line">	Product [id=3, name=product c, price=88.88]</span><br><span class="line">Category [id=2, name=category2]</span><br><span class="line">	Product [id=4, name=product x, price=88.88]</span><br><span class="line">	Product [id=5, name=product y, price=88.88]</span><br><span class="line">	Product [id=6, name=product z, price=88.88]</span><br></pre></td></tr></table></figure></p>
<h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>根据Products得到对应的Category分类</p>
<p>为Product类增加category属性<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Category category;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> category;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.category = category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Product.xml</p>
<p>通过listProduct配置关联查询的sql语句。</p>
<p>然后通过resultMap ，进行字段和属性的对应。</p>
<p>使用<strong>association</strong> 进行多对一关系关联，指定表字段名称与对象属性名称的一一对应关系</p>
<p><strong>注：</strong> Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。<br>name字段同理。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Product"</span> <span class="attr">id</span>=<span class="string">"productBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">&lt;!-- 多对一的关系 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"category"</span> <span class="attr">javaType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">&lt;!-- 根据id查询Product, 关联将Orders查询出来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultMap</span>=<span class="string">"productBean"</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from category_ c left join product_ p on c.id = p.cid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在mybatis-config.xml中增加对于Product.xml的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Category.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Product.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>TestMybatis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">  </span><br><span class="line">        List&lt;Product&gt; ps = session.selectList(<span class="string">"listProduct"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">            System.out.println(p+<span class="string">" 对应的分类是 \t "</span>+ p.getCategory());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>多对多的关系，这里以订单Order和产品Product为例：</p>
<p>一张订单里 可以包含多种产品</p>
<p>一种产品 可以出现在多张订单里</p>
<p>为了维系多对多关系，必须要一个中间表。 在这里我们使用订单项(OrderItem)表来作为中间表</p>
<p>mysql建表并插入数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table order_ (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  code varchar(32) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br><span class="line"> </span><br><span class="line">create table order_item_(</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT, </span><br><span class="line">  oid int ,</span><br><span class="line">  pid int ,</span><br><span class="line">  number int ,</span><br><span class="line">  PRIMARY KEY(id)</span><br><span class="line">)AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO order_ VALUES (1,&apos;code000A&apos;);</span><br><span class="line">INSERT INTO order_ VALUES (2,&apos;code000B&apos;);</span><br><span class="line"> </span><br><span class="line">INSERT INTO order_item_ VALUES (null, 1, 1, 100);</span><br><span class="line">INSERT INTO order_item_ VALUES (null, 1, 2, 100);</span><br><span class="line">INSERT INTO order_item_ VALUES (null, 1, 3, 100);</span><br><span class="line">INSERT INTO order_item_ VALUES (null, 2, 2, 100);</span><br><span class="line">INSERT INTO order_item_ VALUES (null, 2, 3, 100);</span><br><span class="line">INSERT INTO order_item_ VALUES (null, 2, 4, 100);</span><br></pre></td></tr></table></figure></p>
<p>建立相应的pojo类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">     </span><br><span class="line">    List&lt;OrderItem&gt; orderItems;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getOrderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderItems;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderItems</span><span class="params">(List&lt;OrderItem&gt; orderItems)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderItems = orderItems;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml</p>
<p>Order.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Order"</span> <span class="attr">id</span>=<span class="string">"orderBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"code"</span> <span class="attr">property</span>=<span class="string">"code"</span> /&gt;</span></span><br><span class="line">             </span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderItems"</span> <span class="attr">ofType</span>=<span class="string">"OrderItem"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oiid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"product"</span> <span class="attr">javaType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">association</span>&gt;</span>               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listOrder"</span> <span class="attr">resultMap</span>=<span class="string">"orderBean"</span>&gt;</span></span><br><span class="line">            select o.*,p.*,oi.*, o.id 'oid', p.id 'pid', oi.id 'oiid', p.name 'pname'</span><br><span class="line">                from order_ o</span><br><span class="line">                left join order_item_ oi    on o.id =oi.oid</span><br><span class="line">                left join product_ p on p.id = oi.pid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOrder"</span> <span class="attr">resultMap</span>=<span class="string">"orderBean"</span>&gt;</span></span><br><span class="line">            select o.*,p.*,oi.*, o.id 'oid', p.id 'pid', oi.id 'oiid', p.name 'pname'</span><br><span class="line">                from order_ o</span><br><span class="line">                left join order_item_ oi on o.id =oi.oid</span><br><span class="line">                left join product_ p on p.id = oi.pid</span><br><span class="line">            where o.id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Product.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Product"</span> <span class="attr">id</span>=<span class="string">"productBean"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">&lt;!-- 多对一的关系 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"category"</span> <span class="attr">javaType</span>=<span class="string">"Category"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultMap</span>=<span class="string">"productBean"</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname'</span><br><span class="line">                from category_ c</span><br><span class="line">                left join product_ p on c.id = p.cid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--加上这段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProduct"</span> <span class="attr">resultMap</span>=<span class="string">"productBean"</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname'</span><br><span class="line">                from category_ c</span><br><span class="line">                left join product_ p on c.id = p.cid</span><br><span class="line">            where p.id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>OrderItem.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addOrderItem"</span> <span class="attr">parameterType</span>=<span class="string">"OrderItem"</span>&gt;</span></span><br><span class="line">            insert into order_item_</span><br><span class="line">                values(null,#&#123;order.id&#125;,#&#123;product.id&#125;,#&#123;number&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"deleteOrderItem"</span> <span class="attr">parameterType</span>=<span class="string">"OrderItem"</span>&gt;</span></span><br><span class="line">            delete from order_item_</span><br><span class="line">                where oid = #&#123;order.id&#125; and pid = #&#123;product.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>   </span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加上这句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Order.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/OrderItem.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>TestMybatis.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">  </span><br><span class="line">        listOrder(session);</span><br><span class="line"> </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listOrder</span><span class="params">(SqlSession session)</span> </span>&#123;</span><br><span class="line">        List&lt;Order&gt; os = session.selectList(<span class="string">"listOrder"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Order o : os) &#123;</span><br><span class="line">            System.out.println(o.getCode());</span><br><span class="line">            List&lt;OrderItem&gt; ois= o.getOrderItems();</span><br><span class="line">            <span class="keyword">for</span> (OrderItem oi : ois) &#123;</span><br><span class="line">                System.out.format(<span class="string">"\t%s\t%f\t%d%n"</span>, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code000A</span><br><span class="line">	product a	88.879997	100</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">code000B</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">	product x	88.879997	100</span><br></pre></td></tr></table></figure>
<p>操作原理</p>
<p>查询出所有的订单，然后遍历每个订单下的多条订单项，以及订单项对应的产品名称，价格，购买数量</p>
<p>通过Order.xml的listOrder对应的sql语句进行查询 联合order_, order_item_, product_ 三张表进行查询 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listOrder"</span> <span class="attr">resultMap</span>=<span class="string">"orderBean"</span>&gt;</span></span><br><span class="line">	select o.*,p.*,oi.*, o.id 'oid', p.id 'pid', oi.id 'oiid', p.name 'pname' </span><br><span class="line">		from order_ o </span><br><span class="line">		left join order_item_ oi	on o.id =oi.oid </span><br><span class="line">		left join product_ p on p.id = oi.pid </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>查询结果 id和code字段放在Order对象里， 然后通过一对多的<collection>标签把oiid和number放在OrderItem对象里，最后把pid,pname,price放进Product对象里。</collection></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Order"</span> <span class="attr">id</span>=<span class="string">"orderBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"code"</span> <span class="attr">property</span>=<span class="string">"code"</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderItems"</span> <span class="attr">ofType</span>=<span class="string">"OrderItem"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oiid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"product"</span> <span class="attr">javaType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span>				</span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面修改数据库表让订单000A和产品z建立关系</p>
<p>操作步骤：</p>
<p>首先通过id分别获取Ordre对象和Product对象，然后创建一个新的OrderItem对象，接着设置Order，设置Product，设置数量，最后调用”addOrderItem” 对应的sql语句插入数据。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Order o1 = session.selectOne(<span class="string">"getOrder"</span>, <span class="number">1</span>);</span><br><span class="line">Product p6 = session.selectOne(<span class="string">"getProduct"</span>, <span class="number">6</span>);</span><br><span class="line">OrderItem oi = <span class="keyword">new</span> OrderItem();</span><br><span class="line">oi.setProduct(p6);</span><br><span class="line">oi.setOrder(o1);</span><br><span class="line">oi.setNumber(<span class="number">200</span>);</span><br><span class="line">session.insert(<span class="string">"addOrderItem"</span>, oi);</span><br></pre></td></tr></table></figure></p>
<p>addOrderItem调用insert into 语句插入一条OrderItem记录<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addOrderItem"</span> <span class="attr">parameterType</span>=<span class="string">"OrderItem"</span>&gt;</span></span><br><span class="line">	insert into order_item_ </span><br><span class="line">		values(null,#&#123;order.id&#125;,#&#123;product.id&#125;,#&#123;number&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>TestMybatis.java 加入一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOrderItem</span><span class="params">(SqlSession session)</span> </span>&#123;</span><br><span class="line">    Order o1 = session.selectOne(<span class="string">"getOrder"</span>, <span class="number">1</span>);</span><br><span class="line">    Product p6 = session.selectOne(<span class="string">"getProduct"</span>, <span class="number">6</span>);</span><br><span class="line">    OrderItem oi = <span class="keyword">new</span> OrderItem();</span><br><span class="line">    oi.setProduct(p6);</span><br><span class="line">    oi.setOrder(o1);</span><br><span class="line">    oi.setNumber(<span class="number">200</span>);</span><br><span class="line"> </span><br><span class="line">    session.insert(<span class="string">"addOrderItem"</span>, oi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code000A</span><br><span class="line">	product a	88.879997	100</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">	product z	88.879997	200</span><br><span class="line">code000B</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">	product x	88.879997	100</span><br></pre></td></tr></table></figure>
<p>类似的 也可以删除关系、修改关系</p>
<p>TestMybatis.java 加入一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteOrderItem</span><span class="params">(SqlSession session)</span> </span>&#123;</span><br><span class="line">    Order o1 = session.selectOne(<span class="string">"getOrder"</span>,<span class="number">1</span>);</span><br><span class="line">    Product p6 = session.selectOne(<span class="string">"getProduct"</span>,<span class="number">6</span>);</span><br><span class="line">    OrderItem oi = <span class="keyword">new</span> OrderItem();</span><br><span class="line">    oi.setProduct(p6);</span><br><span class="line">    oi.setOrder(o1);</span><br><span class="line">    session.delete(<span class="string">"deleteOrderItem"</span>, oi);     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code000A</span><br><span class="line">	product a	88.879997	100</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">code000B</span><br><span class="line">	product b	88.879997	100</span><br><span class="line">	product c	88.879997	100</span><br><span class="line">	product x	88.879997	100</span><br></pre></td></tr></table></figure>
<p><strong>注</strong>：在多对多关系中，修改关系就是删除旧的再增加一条新的</p>
<p><strong>注</strong>：通过Mybatis执行多条sql语句需要增加一个参数：allowMultiQueries<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>allowMultiQueries=true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">    select * from product_         </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProductByName"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">    select * from product_  where name like concat('%',#&#123;name&#125;,'%')        </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果Product的字段比较多的话，</p>
<p>为了应付各个字段的查询，</p>
<p>那么就需要写多条sql语句，</p>
<p>这样就变得难以维护。</p>
<p>这个时候，就可以使用Mybatis 动态SQL里的if标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">    select * from product_</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">        where name like concat('%',#&#123;name&#125;,'%')</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果没有传参数name,那么就查询所有</p>
<p>如果有name参数，那么就进行模糊查询。</p>
<p>这样只需要定义一条sql语句即可应付多种情况了，</p>
<p>在测试的时候，也只需要调用这么一条sql语句listProduct 即可。</p>
<h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>如果要进行多条件判断，就会写成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">	select * from product_</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">		where name like concat('%',#&#123;name&#125;,'%')</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span>		 	</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"price!=0"</span>&gt;</span></span><br><span class="line">		and price &gt; #&#123;price&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span>		 	</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这么写的问题是：当没有name参数，却有price参数的时候，执行的sql语句就会是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from product_ and price &gt; 10.</span><br></pre></td></tr></table></figure>
<p>必然报错</p>
<p>这时候用where<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">	select * from product_</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">			and name like concat('%',#&#123;name&#125;,'%')</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span>		 	</span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"price!=null and price!=0"</span>&gt;</span></span><br><span class="line">			and price &gt; #&#123;price&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span>	 	</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><where>标签会进行自动判断</where></p>
<p>如果任何条件都不成立，</p>
<p>那么就在sql语句里就不会出现where关键字</p>
<p>如果有任何条件成立，</p>
<p>会自动去掉多出来的 and 或者 or。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line"><span class="comment">//params.put("name","a");</span></span><br><span class="line">params.put(<span class="string">"price"</span>,<span class="string">"10"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>与where标签类似的，在update语句里也会碰到多个字段相关的问题。 在这种情况下，就可以使用set标签：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;</span><br><span class="line"> 	&lt;if test="name != null"&gt;name=#&#123;name&#125;,&lt;/if&gt;</span><br><span class="line"> 	&lt;if test="price != null"&gt;price=#&#123;price&#125;&lt;/if&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>
<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>trim 用来定制想要的功能，比如where标签就可以用<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>来替换</p>
<p>set 同理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h4><p>Mybatis里面没有else标签，但是可以使用when otherwise标签来达到这样的效果。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">	  SELECT * FROM product_ </span><br><span class="line">	  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">		    and name like concat('%',#&#123;name&#125;,'%')</span><br><span class="line">		  <span class="tag">&lt;/<span class="name">when</span>&gt;</span>			  </span><br><span class="line">		  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"price !=null and price != 0"</span>&gt;</span></span><br><span class="line">		    and price &gt; #&#123;price&#125;</span><br><span class="line">		  <span class="tag">&lt;/<span class="name">when</span>&gt;</span>			  		</span><br><span class="line">	  	  <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">	  	  	and id &gt;1</span><br><span class="line">	  	  <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>foreach标签通常用于in 这样的语法里<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product_ </span><br><span class="line">    WHERE ID in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">  	             #&#123;item&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p> bind标签就像是再做一次字符串拼接，方便后续使用<br>如本例，在模糊查询的基础上，把模糊查询改为bind标签。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本来的模糊查询方式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;select id="listProduct" resultType="Product"&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             select * from   product_  where name like concat('%',#&#123;0&#125;,'%') --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;/select&gt; --&gt;</span></span><br><span class="line">             </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"likename"</span> <span class="attr">value</span>=<span class="string">"'%' + name + '%'"</span> /&gt;</span></span><br><span class="line">    select * from   product_  where name like #&#123;likename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>##注解方式</p>
<h3 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h3><p>把 XML方式的CRUD 修改为注解方式</p>
<p>新增加接口CategoryMapper ，并在接口中声明的方法上，加上注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.how2java.mapper;</span><br><span class="line">  </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.apache.ibatis.annotations.Delete;</span><br><span class="line">import org.apache.ibatis.annotations.Insert;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line">import org.apache.ibatis.annotations.Update;</span><br><span class="line"> </span><br><span class="line">import com.how2java.pojo.Category;</span><br><span class="line">  </span><br><span class="line">public interface CategoryMapper &#123;</span><br><span class="line">  </span><br><span class="line">    @Insert(&quot; insert into category_ ( name ) values (#&#123;name&#125;) &quot;) </span><br><span class="line">    public int add(Category category); </span><br><span class="line">        </span><br><span class="line">    @Delete(&quot; delete from category_ where id= #&#123;id&#125; &quot;) </span><br><span class="line">    public void delete(int id); </span><br><span class="line">        </span><br><span class="line">    @Select(&quot;select * from category_ where id= #&#123;id&#125; &quot;) </span><br><span class="line">    public Category get(int id); </span><br><span class="line">      </span><br><span class="line">    @Update(&quot;update category_ set name=#&#123;name&#125; where id=#&#123;id&#125; &quot;) </span><br><span class="line">    public int update(Category category);  </span><br><span class="line">        </span><br><span class="line">    @Select(&quot; select * from category_ &quot;) </span><br><span class="line">    public List&lt;Category&gt; list(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mybatis-config.xml</p>
<p>增加对CategoryMapper映射，原来的Category.xml 是否保留随意</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可去掉--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Category.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.CategoryMapper"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>TestMybatis<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        CategoryMapper mapper = session.getMapper(CategoryMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//        add(mapper);</span></span><br><span class="line"><span class="comment">//        delete(mapper);</span></span><br><span class="line"><span class="comment">//        get(mapper);</span></span><br><span class="line"><span class="comment">//        update(mapper);</span></span><br><span class="line">        listAll(mapper);</span><br><span class="line">              </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">8</span>);</span><br><span class="line">        c.setName(<span class="string">"修改了的Category名稱"</span>);</span><br><span class="line">        mapper.update(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">8</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        mapper.delete(<span class="number">2</span>);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c = <span class="keyword">new</span> Category();</span><br><span class="line">        c.setName(<span class="string">"新增加的Category"</span>);</span><br><span class="line">        mapper.add(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; cs = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h3><p>在XML方式的一对多的基础上，进行修改，以实现注解方式的一对多</p>
<p>新增加CategoryMapper接口，查询所有Category<br>@Select注解获取Category类本身<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">" select * from category_ "</span>)</span><br></pre></td></tr></table></figure></p>
<p>@Results 通过@Result和@Many中调用ProductMapper.listByCategory()方法相结合，来获取一对多关系</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Results</span>(&#123;<span class="meta">@Result</span>(property = <span class="string">"products"</span>, javaType = List<span class="class">.<span class="keyword">class</span>, <span class="title">column</span> </span>= <span class="string">"id"</span>,  </span><br><span class="line">          many = <span class="meta">@Many</span>(select = <span class="string">"com.how2java.mapper.ProductMapper.listByCategory"</span>))&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Many;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ "</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123; </span><br><span class="line">                <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(property = <span class="string">"products"</span>, javaType = List<span class="class">.<span class="keyword">class</span>, <span class="title">column</span> </span>= <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.how2java.mapper.ProductMapper.listByCategory"</span>) )</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增接口ProductMapper<br>注解@Select用于根据分类id获取产品集合<br>@Select(“ select * from product_ where cid = #{cid}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" select * from product_ where cid = #&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listByCategory</span><span class="params">(<span class="keyword">int</span> cid)</span></span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加ProductMapper和CategoryMapper的映射<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.CategoryMapper"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.ProductMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>TestMybatis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        CategoryMapper mapper = session.getMapper(CategoryMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">        listAll(mapper);</span><br><span class="line">              </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; cs = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">            List&lt;Product&gt; ps = c.getProducts();</span><br><span class="line">            <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">                System.out.println(<span class="string">"\t"</span>+p.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多对一-1"><a href="#多对一-1" class="headerlink" title="多对一"></a>多对一</h3><p>新增CategoryMapper接口，提供get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增ProductMapper接口，提供list方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" select * from product_ "</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123; </span><br><span class="line">        <span class="meta">@Result</span>(property=<span class="string">"category"</span>,column=<span class="string">"cid"</span>,one=<span class="meta">@One</span>(select=<span class="string">"com.how2java.mapper.CategoryMapper.get"</span>)) </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.CategoryMapper"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.ProductMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>TestMybatis<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        ProductMapper mapper = session.getMapper(ProductMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">        List&lt;Product&gt; ps= mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">            System.out.println(p + <span class="string">"\t对应的分类是:\t"</span> + p.getCategory().getName());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h3><p>新增一个ProductMapper借口，提供 get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from product_ where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增OrderItemMapper，提供listByOrder方法。<br>这里会与Product建立多对一关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.OrderItem;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderItemMapper</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">" select * from order_item_ where oid = #&#123;oid&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123; </span><br><span class="line">        <span class="meta">@Result</span>(property=<span class="string">"product"</span>,column=<span class="string">"pid"</span>,one=<span class="meta">@One</span>(select=<span class="string">"com.how2java.mapper.ProductMapper.get"</span>)) </span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">listByOrder</span><span class="params">(<span class="keyword">int</span> oid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增OrderMapper，提供list方法，这里会与OrderItem建立一对多关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Many;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Order;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_"</span>)</span><br><span class="line">     <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"orderItems"</span>, javaType = List<span class="class">.<span class="keyword">class</span>, <span class="title">column</span> </span>= <span class="string">"id"</span>, </span><br><span class="line">                    many = <span class="meta">@Many</span>(select = <span class="string">"com.how2java.mapper.OrderItemMapper.listByOrder"</span>))</span><br><span class="line">            &#125;)      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.OrderItemMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.OrderMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.how2java.mapper.ProductMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>TestMybatis<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Product;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">  </span><br><span class="line">        listOrder(session);</span><br><span class="line"> </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listOrder</span><span class="params">(SqlSession session)</span> </span>&#123;</span><br><span class="line">        OrderMapper mapper =session.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Order&gt; os = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Order o : os) &#123;</span><br><span class="line">            System.out.println(o.getCode());</span><br><span class="line">            List&lt;OrderItem&gt; ois= o.getOrderItems();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=ois)&#123;</span><br><span class="line">                <span class="keyword">for</span> (OrderItem oi : ois) &#123;</span><br><span class="line">                    System.out.format(<span class="string">"\t%s\t%f\t%d%n"</span>, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber());</span><br><span class="line">                &#125;              </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="动态SQL-1"><a href="#动态SQL-1" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>新增CategoryDynaSqlProvider，提供CRUD对应的SQL语句。</p>
<p>这里的SQL语句使用SQL类的方式构建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.SQL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDynaSqlProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">                 .SELECT(<span class="string">"*"</span>)</span><br><span class="line">                 .FROM(<span class="string">"category_"</span>)</span><br><span class="line">                 .toString();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">                .SELECT(<span class="string">"*"</span>)</span><br><span class="line">                .FROM(<span class="string">"category_"</span>)</span><br><span class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">                .INSERT_INTO(<span class="string">"category_"</span>)</span><br><span class="line">                .VALUES(<span class="string">"name"</span>, <span class="string">"#&#123;name&#125;"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">                .UPDATE(<span class="string">"category_"</span>)</span><br><span class="line">                .SET(<span class="string">"name=#&#123;name&#125;"</span>)</span><br><span class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">                .DELETE_FROM(<span class="string">"category_"</span>)</span><br><span class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==============================================</p>
<p>关于sql类：</p>
<blockquote>
<p>SQL类是用于进行动态SQL生成的，如下代码是一个相对复杂的SQL类的使用举例，以后需要用到的时候，再来参考。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectPersonSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">    SELECT(<span class="string">"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME"</span>);</span><br><span class="line">    SELECT(<span class="string">"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON"</span>);</span><br><span class="line">    FROM(<span class="string">"PERSON P"</span>);</span><br><span class="line">    FROM(<span class="string">"ACCOUNT A"</span>);</span><br><span class="line">    INNER_JOIN(<span class="string">"DEPARTMENT D on D.ID = P.DEPARTMENT_ID"</span>);</span><br><span class="line">    INNER_JOIN(<span class="string">"COMPANY C on D.COMPANY_ID = C.ID"</span>);</span><br><span class="line">    WHERE(<span class="string">"P.ID = A.ID"</span>);</span><br><span class="line">    WHERE(<span class="string">"P.FIRST_NAME like ?"</span>);</span><br><span class="line">    OR();</span><br><span class="line">    WHERE(<span class="string">"P.LAST_NAME like ?"</span>);</span><br><span class="line">    GROUP_BY(<span class="string">"P.ID"</span>);</span><br><span class="line">    HAVING(<span class="string">"P.LAST_NAME like ?"</span>);</span><br><span class="line">    OR();</span><br><span class="line">    HAVING(<span class="string">"P.FIRST_NAME like ?"</span>);</span><br><span class="line">    ORDER_BY(<span class="string">"P.ID"</span>);</span><br><span class="line">    ORDER_BY(<span class="string">"P.FULL_NAME"</span>);</span><br><span class="line">  &#125;&#125;.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==============================================</p>
<p>把本来是手写SQL的CategoryMapper接口，</p>
<p>修改为注解引用CategoryDynaSqlProvider类的方式</p>
<p>比如增加，本来是手写SQL语句的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">" insert into category_ ( name ) values (#&#123;name&#125;) "</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>修改为了注解@InsertProvider配合CategoryDynaSqlProvider的add方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InsertProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"add"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>CategoryMapper<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.DeleteProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.InsertProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.SelectProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.UpdateProvider;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.CategoryDynaSqlProvider;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@InsertProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"add"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>; </span><br><span class="line">        </span><br><span class="line">    <span class="meta">@DeleteProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br><span class="line">        </span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"get"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@UpdateProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"update"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;  </span><br><span class="line">        </span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=CategoryDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"list"</span>)     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>TestMybatis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        CategoryMapper mapper = session.getMapper(CategoryMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//        add(mapper);</span></span><br><span class="line"><span class="comment">//        delete(mapper);</span></span><br><span class="line"><span class="comment">//        get(mapper);</span></span><br><span class="line"><span class="comment">//        update(mapper);</span></span><br><span class="line">        listAll(mapper);</span><br><span class="line">              </span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">14</span>);</span><br><span class="line">        c.setName(<span class="string">"修改了的Category名稱"</span>);</span><br><span class="line">        mapper.update(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">14</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        mapper.delete(<span class="number">13</span>);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        Category c = <span class="keyword">new</span> Category();</span><br><span class="line">        c.setName(<span class="string">"新增加的Category"</span>);</span><br><span class="line">        mapper.add(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(CategoryMapper mapper)</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; cs = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><blockquote>
<p>将上面的spring springMVC Mybatis 整合 </p>
</blockquote>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol>
<li>数据库设计</li>
<li>导入所需jar包</li>
<li>在WEB-INF目录下新增加web.xml 用于配置spring和springMVC核心</li>
<li>准备pojo类</li>
<li>准备pojo类对应的Mapper接口以及对应xml文件 放在同一个包下</li>
<li>准备pojo类对应的Service接口以及对应实现类的ServiceImpl @Service</li>
<li>准备Controller类 @Controller</li>
<li>Controller类的中自动装配(@Autowired) 第5步的Service</li>
<li>通过@RequestMapping映射访问路径到方法Controller中的方法</li>
<li>在src目录下新建applicationContext.xml文件，这是Spring的配置文件</li>
<li>在src目录下新建springMVC.xml</li>
<li>在WEB-INF下创建jsp目录并创建jsp文件</li>
<li>部署tomcat并测试</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>ssm</tag>
        <tag>springMVC</tag>
        <tag>Mybatis</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
</search>
